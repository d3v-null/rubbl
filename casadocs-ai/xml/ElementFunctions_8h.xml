<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ElementFunctions_8h" kind="file" language="C++">
    <compoundname>ElementFunctions.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">complex</includes>
    <includes local="no">limits</includes>
    <incdepgraph>
      <node id="4">
        <label>limits</label>
      </node>
      <node id="1">
        <label>casa/Arrays/ElementFunctions.h</label>
        <link refid="ElementFunctions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff" prot="public">casacore::arrays_internal::SumSqrDiff</innerclass>
    <innerclass refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4" prot="public">casacore::arrays_internal::SumSqrDiff&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <innernamespace refid="namespacecasacore_1_1arrays__internal">casacore::arrays_internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ELEMENT_FUNCTIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ELEMENT_FUNCTIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecasacore" kindref="compound">casacore</ref><sp/>{</highlight></codeline>
<codeline lineno="9" refid="namespacecasacore_1_1arrays__internal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">arrays_internal<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tol<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>&gt;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(val1-val2)<sp/>&lt;=<sp/>tol*<ref refid="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" kindref="member">std::max</ref>(val1,val2));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(val2-val1)<sp/>&lt;=<sp/>tol*<ref refid="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" kindref="member">std::max</ref>(val1,val2));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespacecasacore_1_1arrays__internal_1af90d2e8a8c96743312ed6e8cd8ba5978" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tol<sp/>&lt;=0)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0&lt;val1)<sp/>!=<sp/>(0&lt;val2))<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aval1<sp/>=<sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aval2<sp/>=<sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(aval1-aval2)<sp/>&lt;=<sp/>tol*</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" kindref="member">std::max</ref>(aval1,aval2)));</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespacecasacore_1_1arrays__internal_1ab6f853f41e94fe18f74b544ef84014a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tol<sp/>&lt;=0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2)<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;float&gt;::min</ref>());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1)<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;float&gt;::min</ref>());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0&lt;val1)<sp/>!=<sp/>(0&lt;val2))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1-val2)<sp/>&lt;=<sp/>tol*<ref refid="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" kindref="member">std::max</ref>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1),<sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2)));</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="namespacecasacore_1_1arrays__internal_1a429b629d98ebdc4ad976d48f44984895" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tol<sp/>&lt;=0)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2)<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;double&gt;::min</ref>());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1)<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;double&gt;::min</ref>());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0&lt;val1)<sp/>!=<sp/>(0&lt;val2))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1-val2)<sp/>&lt;=<sp/>tol*<ref refid="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" kindref="member">std::max</ref>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1),<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2)));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="namespacecasacore_1_1arrays__internal_1a1f88a20e883f421dd7782b9e4dace054" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(val1),<sp/>val2,<sp/>tol);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="namespacecasacore_1_1arrays__internal_1aa76dcd7ecb501463d14b3d5ab3aff4d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(val2),<sp/>tol);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="namespacecasacore_1_1arrays__internal_1a64b194f07476dcc50fe8f2ab1532146c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>&amp;val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>&amp;val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol=1.0e-5)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tol<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>==<sp/>val2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(val1.real(),<sp/>val2.real(),<sp/>tol)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(val1.imag(),<sp/>val2.imag(),<sp/>tol))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aval1(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1)),<sp/>aval2(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aval1<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aval2<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;float&gt;::min</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aval2<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aval1<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;float&gt;::min</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/>dval(val1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>dval<sp/>-=<sp/>std::complex&lt;double&gt;(val2);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(dval)<sp/>&lt;=<sp/>tol<sp/>*<sp/>(aval1<sp/>&lt;<sp/>aval2<sp/>?<sp/>aval2<sp/>:<sp/>aval1);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="namespacecasacore_1_1arrays__internal_1a37e0b2adf0ff0d85b52e68b41467c27d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a11517c30804582047626e9f12c49ad51" kindref="member">near</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol=1.0e-13)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tol<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val1<sp/>==<sp/>val2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2)<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;double&gt;::min</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1)<sp/>&lt;=<sp/>(1+tol)*<ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::numeric_limits&lt;double&gt;::min</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aval1(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1)),<sp/>aval2(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val1-val2)<sp/>&lt;=<sp/>tol<sp/>*<sp/>(aval1<sp/>&lt;<sp/>aval2<sp/>?<sp/>aval2<sp/>:<sp/>aval1);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" kindref="member">nearAbs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>&amp;val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>&amp;val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol=1.0e-5)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2<sp/>-<sp/>val1)<sp/>&lt;=<sp/>tol;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="namespacecasacore_1_1arrays__internal_1a753824a8a6b8957de284ff24bbcb7163" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" kindref="member">nearAbs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol=1.0e-13)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2<sp/>-<sp/>val1)<sp/>&lt;=<sp/>tol;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="namespacecasacore_1_1arrays__internal_1adf05552a7065b4b9e71ee88f9392a52a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" kindref="member">nearAbs</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>==<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val1<sp/>&gt;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tol<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(val1<sp/>-<sp/>val2));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tol<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(val2<sp/>-<sp/>val1));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="namespacecasacore_1_1arrays__internal_1a43f21509bc92e566957c7560bbe1b1ed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" kindref="member">nearAbs</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tol<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2<sp/>-<sp/>val1)));</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="namespacecasacore_1_1arrays__internal_1a1e224c5a3540ef60a852eca158049474" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" kindref="member">nearAbs</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tol<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2<sp/>-<sp/>val1)));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="namespacecasacore_1_1arrays__internal_1a88d2ae4726d8b2b6e68892022c57c235" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1addf7d823ba8075edcc51cbb581a2c8b1" kindref="member">nearAbs</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tol<sp/>&gt;=<sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(val2<sp/>-<sp/>val1));</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>to<sp/>compare<sp/>all<sp/>elements<sp/>of<sp/>two<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>returns<sp/>true<sp/>if<sp/>all<sp/>elements<sp/>compare<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>example<sp/>compare<sp/>operator<sp/>is<sp/>&lt;src&gt;std::equal_to&lt;/src&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="146" refid="namespacecasacore_1_1arrays__internal_1a13a3b6f49dfade9661b38ff9b59633d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a13a3b6f49dfade9661b38ff9b59633d4" kindref="member">compareAll</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator2<sp/>first2,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1,<sp/>++first2)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op(*first1,<sp/>*first2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>left<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="158" refid="namespacecasacore_1_1arrays__internal_1ac8ac9a6c0925402633d03eee5de6bfec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1ac8ac9a6c0925402633d03eee5de6bfec" kindref="member">compareAllLeft</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>left,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op(left,<sp/>*first1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="170" refid="namespacecasacore_1_1arrays__internal_1ae8f82f1d69d7a9a9539a853def1b33e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1ae8f82f1d69d7a9a9539a853def1b33e3" kindref="member">compareAllRight</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>right,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op(*first1,<sp/>right))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>to<sp/>compare<sp/>all<sp/>elements<sp/>of<sp/>two<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>returns<sp/>true<sp/>if<sp/>any<sp/>element<sp/>compares<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>example<sp/>compare<sp/>operator<sp/>is<sp/>&lt;src&gt;std::equal_to&lt;/src&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="185" refid="namespacecasacore_1_1arrays__internal_1afe010c5ad9d48874b9a4f29676cddc0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1afe010c5ad9d48874b9a4f29676cddc0b" kindref="member">compareAny</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator2<sp/>first2,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1,<sp/>++first2)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op(*first1,<sp/>*first2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>left<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="197" refid="namespacecasacore_1_1arrays__internal_1a07f4d3e2a40e46bd10cc160348b4b982" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a07f4d3e2a40e46bd10cc160348b4b982" kindref="member">compareAnyLeft</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>left,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op(left,<sp/>*first1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="209" refid="namespacecasacore_1_1arrays__internal_1a41126701c91590ba660a5832a07b57af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a41126701c91590ba660a5832a07b57af" kindref="member">compareAnyRight</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>right,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op(*first1,<sp/>right))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>add<sp/>squared<sp/>diff<sp/>of<sp/>right<sp/>and<sp/>base<sp/>value<sp/>to<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>it<sp/>is<sp/>specialized<sp/>for<sp/>complex<sp/>values<sp/>to<sp/>handle<sp/>real<sp/>and<sp/>imag<sp/>separately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Accum=T&gt;</highlight></codeline>
<codeline lineno="223" refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff" kindref="compound">SumSqrDiff</ref></highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225" refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_1a192baaa4fdadce20f326dd6f24e541c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_1a192baaa4fdadce20f326dd6f24e541c2" kindref="member">SumSqrDiff</ref>(T<sp/>base)<sp/>:<sp/>itsBase(base)<sp/>{}</highlight></codeline>
<codeline lineno="226" refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_1a56f4c055dca22f32cd7f2b9267149657" refkind="member"><highlight class="normal"><sp/><sp/>Accum<sp/><ref refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_1a56f4c055dca22f32cd7f2b9267149657" kindref="member">operator() </ref>(Accum<sp/>left,<sp/>T<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="227"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>+<sp/>(right-itsBase)*(right-itsBase);<sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>Accum<sp/>itsBase;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>as<sp/>Accum,<sp/>so<sp/>subtraction<sp/>results<sp/>in<sp/>Accum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialize<sp/>for<sp/>complex<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variance<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>for<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>a<sp/>complex<sp/>value.<sp/>thus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum(abs((a[i]<sp/>-<sp/>mean)**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>sqrt<sp/>used<sp/>in<sp/>abs<sp/>and<sp/>the<sp/>**2<sp/>cancel<sp/>each<sp/>other,<sp/>thus<sp/>can<sp/>be<sp/>left<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>also<sp/>https://en.wikipedia.org/wiki/Complex_random_variable#Variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>although<sp/>the<sp/>sum<sp/>is<sp/>real,<sp/>a<sp/>complex<sp/>value<sp/>is<sp/>used<sp/>to<sp/>have<sp/>equal<sp/>template<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="239" refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff" kindref="compound">SumSqrDiff</ref>&lt;std::complex&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241" refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4_1a9189627af04a1bc42272f88829bfbf03" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4_1a9189627af04a1bc42272f88829bfbf03" kindref="member">SumSqrDiff</ref>(std::complex&lt;T&gt;<sp/>base)<sp/>:<sp/>itsBase(base)<sp/>{}</highlight></codeline>
<codeline lineno="242" refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4_1a6e9068ff8e41a0bb18a1d6baa5e47eae" refkind="member"><highlight class="normal"><sp/><sp/>std::complex&lt;T&gt;<sp/><ref refid="structcasacore_1_1arrays__internal_1_1SumSqrDiff_1a56f4c055dca22f32cd7f2b9267149657" kindref="member">operator() </ref>(std::complex&lt;T&gt;<sp/>left,<sp/>std::complex&lt;T&gt;<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="243"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>+<sp/>((right.real()<sp/>-<sp/>itsBase.real())<sp/>*<sp/>(right.real()<sp/>-<sp/>itsBase.real())<sp/>+</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(right.imag()<sp/>-<sp/>itsBase.imag())<sp/>*<sp/>(right.imag()<sp/>-<sp/>itsBase.imag()));<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::complex&lt;T&gt;<sp/>itsBase;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="250" refid="namespacecasacore_1_1arrays__internal_1af5a51842084e5fe2bb2626d1226ea479" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1af5a51842084e5fe2bb2626d1226ea479" kindref="member">isnan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;T&gt;<sp/>&amp;val)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1af5a51842084e5fe2bb2626d1226ea479" kindref="member">std::isnan</ref>(val.real())<sp/>||<sp/><ref refid="namespacecasacore_1_1arrays__internal_1af5a51842084e5fe2bb2626d1226ea479" kindref="member">std::isnan</ref>(val.imag());</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="256" refid="namespacecasacore_1_1arrays__internal_1aec84777e1f2f0958bb67725002ce46e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1aec84777e1f2f0958bb67725002ce46e6" kindref="member">isinf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;T&gt;<sp/>&amp;val)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1aec84777e1f2f0958bb67725002ce46e6" kindref="member">std::isinf</ref>(val.real())<sp/>||<sp/><ref refid="namespacecasacore_1_1arrays__internal_1aec84777e1f2f0958bb67725002ce46e6" kindref="member">std::isinf</ref>(val.imag());</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="262" refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">isfinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;T&gt;<sp/>&amp;val)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">std::isfinite</ref>(val.real())<sp/>||<sp/><ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">std::isfinite</ref>(val.imag());</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="namespacecasacore_1_1arrays__internal_1ab06e7d3c0ce4c40a109296b79aaacb56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1ab06e7d3c0ce4c40a109296b79aaacb56" kindref="member">floormod</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>x%y;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0<sp/><sp/><sp/>&amp;&amp;<sp/><sp/>(x&lt;0)<sp/>!=<sp/>(y&lt;0))<sp/>r+=y;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273" refid="namespacecasacore_1_1arrays__internal_1afc2691caa664df19015e1b3cfda4002a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1ab06e7d3c0ce4c40a109296b79aaacb56" kindref="member">floormod</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>x%y;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0<sp/><sp/>&amp;&amp;<sp/><sp/>(x&lt;0)<sp/>!=<sp/>(y&lt;0))<sp/>r+=y;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279" refid="namespacecasacore_1_1arrays__internal_1ac2743673de035171b4ac1d5576829569" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1ab06e7d3c0ce4c40a109296b79aaacb56" kindref="member">floormod</ref><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r<sp/>=<sp/><ref refid="namespacecasacore_1a567c268477381245c46030a94e36d5ba" kindref="member">std::fmod</ref>(x,y);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0<sp/><sp/>&amp;&amp;<sp/><sp/>(x&lt;0)<sp/>!=<sp/>(y&lt;0))<sp/>r+=y;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285" refid="namespacecasacore_1_1arrays__internal_1afc413c1717b05d1e99f12d167c5f7de9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1ab06e7d3c0ce4c40a109296b79aaacb56" kindref="member">floormod</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/><ref refid="namespacecasacore_1a567c268477381245c46030a94e36d5ba" kindref="member">std::fmod</ref>(x,y);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0<sp/><sp/>&amp;&amp;<sp/><sp/>(x&lt;0)<sp/>!=<sp/>(y&lt;0))<sp/>r+=y;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="namespacecasacore_1_1arrays__internal_1a7e9352226747ddd388e0b9047e76b267" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a7e9352226747ddd388e0b9047e76b267" kindref="member">convertScalar</ref><sp/>(T&amp;<sp/>out,<sp/>F<sp/>in)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{<sp/>out<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in);<sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="namespacecasacore_1_1arrays__internal_1a72bf3c5bd1a77e6f219c94edba6b2b8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1_1arrays__internal_1a7e9352226747ddd388e0b9047e76b267" kindref="member">convertScalar</ref><sp/>(std::complex&lt;float&gt;&amp;<sp/>out,<sp/>std::complex&lt;double&gt;<sp/>in)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{<sp/>out<sp/>=<sp/>std::complex&lt;float&gt;(in.real(),<sp/>in.imag());<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">}<sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/Arrays/ElementFunctions.h"/>
  </compounddef>
</doxygen>
