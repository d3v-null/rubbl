<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="VirtArrCol_8tcc" kind="file" language="C++">
    <compoundname>VirtArrCol.tcc</compoundname>
    <includedby refid="VirtArrCol_8h" local="no">tables/DataMan/VirtArrCol.h</includedby>
    <invincdepgraph>
      <node id="12">
        <label>tables/DataMan/CompressFloat.cc</label>
        <link refid="CompressFloat_8cc"/>
      </node>
      <node id="8">
        <label>tables/DataMan/CompressComplex.cc</label>
        <link refid="CompressComplex_8cc"/>
      </node>
      <node id="10">
        <label>tables/Tables.h</label>
        <link refid="Tables_8h"/>
      </node>
      <node id="5">
        <label>tables/DataMan/BitFlagsEngine.cc</label>
        <link refid="BitFlagsEngine_8cc"/>
      </node>
      <node id="7">
        <label>tables/DataMan/CompressComplex.h</label>
        <link refid="CompressComplex_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tables/DataMan/VirtArrCol.cc</label>
        <link refid="VirtArrCol_8cc"/>
      </node>
      <node id="3">
        <label>tables/DataMan/BaseMappedArrayEngine.h</label>
        <link refid="BaseMappedArrayEngine_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tables/DataMan/VirtArrCol.h</label>
        <link refid="VirtArrCol_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tables/DataMan/ScaledComplexData.h</label>
        <link refid="ScaledComplexData_8h"/>
      </node>
      <node id="11">
        <label>tables/DataMan/CompressFloat.h</label>
        <link refid="CompressFloat_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>tables/DataMan/ScaledArrayEngine.h</label>
        <link refid="ScaledArrayEngine_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tables/DataMan/VirtArrCol.tcc</label>
        <link refid="VirtArrCol_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tables/DataMan/BitFlagsEngine.h</label>
        <link refid="BitFlagsEngine_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>tables/DataMan/DataManager.cc</label>
        <link refid="DataManager_8cc"/>
      </node>
      <node id="17">
        <label>tables/DataMan/VACEngine.h</label>
        <link refid="VACEngine_8h"/>
      </node>
      <node id="13">
        <label>tables/DataMan/MappedArrayEngine.h</label>
        <link refid="MappedArrayEngine_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>tables/DataMan.h</label>
        <link refid="DataMan_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>tables/DataMan/RetypedArrayEngine.h</label>
        <link refid="RetypedArrayEngine_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>VirtArrCol.tcc:<sp/>Base<sp/>virtual<sp/>column<sp/>data<sp/>manager<sp/>class</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1994,1995,1996,1999,2000</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TABLES_VIRTARRCOL_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TABLES_VIRTARRCOL_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Includes</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/DataMan/VirtArrCol.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/RefRows.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Array.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/ArrayIter.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/IPosition.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Slicer.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/DataMan/DataManError.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/ValTypeId.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">VirtualArrayColumn&lt;T&gt;::~VirtualArrayColumn()</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>VirtualArrayColumn&lt;T&gt;::dataType()<sp/>const</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>return<sp/>ValType::getType<sp/>(static_cast&lt;T*&gt;(0));<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">String<sp/>VirtualArrayColumn&lt;T&gt;::dataTypeId()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>valDataTypeId<sp/>(static_cast&lt;T*&gt;(0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getArrayV<sp/>(rownr_t<sp/>rownr,<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>getArray<sp/>(rownr,<sp/>static_cast&lt;Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putArrayV<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>putArray<sp/>(rownr,<sp/>static_cast&lt;const<sp/>Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getSliceV<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>getSlice<sp/>(rownr,<sp/>slicer,<sp/>static_cast&lt;Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putSliceV<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>putSlice<sp/>(rownr,<sp/>slicer,<sp/>static_cast&lt;const<sp/>Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getArrayColumnV<sp/>(ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>getArrayColumn<sp/>(static_cast&lt;Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putArrayColumnV<sp/>(const<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>putArrayColumn<sp/>(static_cast&lt;const<sp/>Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getArrayColumnCellsV<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>getArrayColumnCells<sp/>(rownrs,<sp/>static_cast&lt;Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putArrayColumnCellsV<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>putArrayColumnCells<sp/>(rownrs,<sp/>static_cast&lt;const<sp/>Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getColumnSliceV<sp/>(const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>getColumnSlice<sp/>(slicer,<sp/>static_cast&lt;Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putColumnSliceV<sp/>(const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>putColumnSlice<sp/>(slicer,<sp/>static_cast&lt;const<sp/>Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getColumnSliceCellsV<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>getColumnSliceCells<sp/>(rownrs,<sp/>slicer,<sp/>static_cast&lt;Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putColumnSliceCellsV<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ArrayBase&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>putColumnSliceCells<sp/>(rownrs,<sp/>slicer,<sp/>static_cast&lt;const<sp/>Array&lt;T&gt;&amp;&gt;(array));<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>The<sp/>default<sp/>implementations<sp/>of<sp/>get/putSlice<sp/>get<sp/>the<sp/>entire<sp/>array</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>and<sp/>access<sp/>the<sp/>required<sp/>slice.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getSlice<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arraySlice)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getSliceBase<sp/>(rownr,<sp/>slicer,<sp/>arraySlice);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putSlice<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arraySlice)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putSliceBase<sp/>(rownr,<sp/>slicer,<sp/>arraySlice);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>The<sp/>default<sp/>implementations<sp/>of<sp/>get/putArrayColumn<sp/>handle<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>array<sp/>in<sp/>each<sp/>individual<sp/>row.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getArrayColumn<sp/>(Array&lt;T&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getArrayColumnBase<sp/>(array);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putArrayColumn<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putArrayColumnBase<sp/>(array);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>The<sp/>default<sp/>implementations<sp/>of<sp/>get/putColumnSlice<sp/>take<sp/>a<sp/>slice</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>for<sp/>each<sp/>individual<sp/>row.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getColumnSlice<sp/>(const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getColumnSliceBase<sp/>(slicer,<sp/>array);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putColumnSlice<sp/>(const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putColumnSliceBase<sp/>(slicer,<sp/>array);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>The<sp/>default<sp/>implementations<sp/>of<sp/>the<sp/>Cells<sp/>functions<sp/>throw<sp/>an<sp/>exception.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getArrayColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getArrayColumnCellsBase<sp/>(rownrs,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putArrayColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putArrayColumnCellsBase<sp/>(rownrs,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::getColumnSliceCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>ns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getColumnSliceCellsBase<sp/>(rownrs,<sp/>ns,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putColumnSliceCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>ns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putColumnSliceCellsBase<sp/>(rownrs,<sp/>ns,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>The<sp/>default<sp/>implementation<sp/>of<sp/>the<sp/>put<sp/>function<sp/>throws</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>an<sp/>exception.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>VirtualArrayColumn&lt;T&gt;::putArray<sp/>(rownr_t,<sp/>const<sp/>Array&lt;T&gt;&amp;)</highlight></codeline>
<codeline><highlight class="normal">{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>DataManInvOper<sp/>(&quot;VirtualArrayColumn::putArray<sp/>not<sp/>possible&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>for<sp/>column<sp/>&quot;<sp/>+<sp/>columnName());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="tables/DataMan/VirtArrCol.tcc"/>
  </compounddef>
</doxygen>
