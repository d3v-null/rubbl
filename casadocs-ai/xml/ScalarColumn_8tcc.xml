<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ScalarColumn_8tcc" kind="file" language="C++">
    <compoundname>ScalarColumn.tcc</compoundname>
    <includedby refid="ScalarColumn_8h" local="no">tables/Tables/ScalarColumn.h</includedby>
    <invincdepgraph>
      <node id="16">
        <label>tables/Dysco/dyscostman.cc</label>
        <link refid="dyscostman_8cc"/>
      </node>
      <node id="9">
        <label>tables/DataMan/CompressFloat.cc</label>
        <link refid="CompressFloat_8cc"/>
      </node>
      <node id="4">
        <label>tables/DataMan/CompressComplex.cc</label>
        <link refid="CompressComplex_8cc"/>
      </node>
      <node id="7">
        <label>tables/Tables.h</label>
        <link refid="Tables_8h"/>
      </node>
      <node id="2">
        <label>tables/Tables/ScalarColumn.h</label>
        <link refid="ScalarColumn_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>tables/Dysco/dyscodatacolumn.h</label>
        <link refid="dyscodatacolumn_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tables/Tables/TableRow.cc</label>
        <link refid="TableRow_8cc"/>
      </node>
      <node id="27">
        <label>tables/TaQL/ExprDerNode.cc</label>
        <link refid="ExprDerNode_8cc"/>
      </node>
      <node id="21">
        <label>tables/LogTables/TableLogSink.cc</label>
        <link refid="TableLogSink_8cc"/>
      </node>
      <node id="23">
        <label>tables/Tables/ScalarColumn_tmpl.cc</label>
        <link refid="ScalarColumn__tmpl_8cc"/>
      </node>
      <node id="3">
        <label>tables/DataMan/CompressComplex.h</label>
        <link refid="CompressComplex_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tables/TaQL/TableParseTableList.cc</label>
        <link refid="TableParseTableList_8cc"/>
      </node>
      <node id="19">
        <label>tables/LogTables/TableLogSink.h</label>
        <link refid="TableLogSink_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tables/Dysco/threadeddyscocolumn.h</label>
        <link refid="threadeddyscocolumn_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>tables/Tables/TableProxy.cc</label>
        <link refid="TableProxy_8cc"/>
      </node>
      <node id="11">
        <label>tables/DataMan/ForwardColRow.cc</label>
        <link refid="ForwardColRow_8cc"/>
      </node>
      <node id="15">
        <label>tables/Dysco/dyscodatacolumn.cc</label>
        <link refid="dyscodatacolumn_8cc"/>
      </node>
      <node id="18">
        <label>tables/Dysco/dyscoweightcolumn.cc</label>
        <link refid="dyscoweightcolumn_8cc"/>
      </node>
      <node id="1">
        <label>tables/Tables/ScalarColumn.tcc</label>
        <link refid="ScalarColumn_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tables/Dysco/threadeddyscocolumn.cc</label>
        <link refid="threadeddyscocolumn_8cc"/>
      </node>
      <node id="28">
        <label>tables/TaQL/TableParseQuery.cc</label>
        <link refid="TableParseQuery_8cc"/>
      </node>
      <node id="8">
        <label>tables/DataMan/CompressFloat.h</label>
        <link refid="CompressFloat_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>tables/Dysco/dyscoweightcolumn.h</label>
        <link refid="dyscoweightcolumn_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>tables/DataMan/DataManager.cc</label>
        <link refid="DataManager_8cc"/>
      </node>
      <node id="22">
        <label>tables/Tables/ColumnsIndex.cc</label>
        <link refid="ColumnsIndex_8cc"/>
      </node>
      <node id="24">
        <label>tables/Tables/TableIterProxy.cc</label>
        <link refid="TableIterProxy_8cc"/>
      </node>
      <node id="10">
        <label>tables/DataMan/ForwardColRow.h</label>
        <link refid="ForwardColRow_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>tables/LogTables/LoggerHolder.cc</label>
        <link refid="LoggerHolder_8cc"/>
      </node>
      <node id="30">
        <label>tables/TaQL/TableParseUtil.cc</label>
        <link refid="TableParseUtil_8cc"/>
      </node>
      <node id="6">
        <label>tables/DataMan.h</label>
        <link refid="DataMan_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>ScalarColumn.cc:<sp/>Access<sp/>to<sp/>a<sp/>scalar<sp/>table<sp/>column<sp/>with<sp/>arbitrary<sp/>data<sp/>type</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1994,1995,1996,1997,1998,1999</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TABLES_SCALARCOLUMN_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TABLES_SCALARCOLUMN_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/ScalarColumn.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/Table.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/BaseColumn.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/RefRows.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Vector.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Slicer.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/ValTypeId.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/BasicSL/String.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/TableError.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScalarColumn&lt;T&gt;::ScalarColumn()</highlight></codeline>
<codeline><highlight class="normal">:<sp/>TableColumn()</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScalarColumn&lt;T&gt;::ScalarColumn<sp/>(const<sp/>Table&amp;<sp/>tab,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>columnName)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>TableColumn<sp/>(tab,<sp/>columnName)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkDataType();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScalarColumn&lt;T&gt;::ScalarColumn<sp/>(const<sp/>TableColumn&amp;<sp/>column)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>TableColumn<sp/>(column)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkDataType();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScalarColumn&lt;T&gt;::ScalarColumn<sp/>(const<sp/>ScalarColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>TableColumn<sp/>(that)</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">TableColumn*<sp/>ScalarColumn&lt;T&gt;::clone()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>new<sp/>ScalarColumn&lt;T&gt;<sp/>(*this);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScalarColumn&lt;T&gt;&amp;<sp/>ScalarColumn&lt;T&gt;::operator=<sp/>(const<sp/>ScalarColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reference<sp/>(that);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(*this);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::reference<sp/>(const<sp/>ScalarColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this<sp/>!=<sp/>&amp;that)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TableColumn::reference<sp/>(that);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScalarColumn&lt;T&gt;::~ScalarColumn()</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::checkDataType()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Check<sp/>if<sp/>the<sp/>data<sp/>type<sp/>matches.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>ColumnDesc&amp;<sp/>cd<sp/>=<sp/>baseColPtr_p-&gt;columnDesc();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>dtype<sp/>=<sp/>cd.dataType();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(dtype<sp/>!=<sp/>ValType::getType(static_cast&lt;T*&gt;(0))<sp/><sp/>||<sp/><sp/>!cd.isScalar())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw<sp/>(TableInvDT<sp/>(&quot;<sp/>in<sp/>ScalarColumn<sp/>ctor<sp/>for<sp/>column<sp/>&quot;<sp/>+<sp/>cd.name()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(dtype<sp/>==<sp/>TpOther)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cd.dataTypeId()<sp/>!=<sp/>valDataTypeId(static_cast&lt;T*&gt;(0)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>(TableInvDT<sp/>(&quot;<sp/>in<sp/>ScalarColumn<sp/>ctor<sp/>for<sp/>column<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>cd.name()<sp/>+<sp/>&quot;;<sp/>using<sp/>data<sp/>type<sp/>id<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>valDataTypeId(static_cast&lt;T*&gt;(0))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>&quot;,<sp/>expected<sp/>&quot;<sp/>+<sp/>cd.dataTypeId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Vector&lt;T&gt;<sp/>ScalarColumn&lt;T&gt;::getColumn()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumn<sp/>(vec);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::getColumn<sp/>(Vector&lt;T&gt;&amp;<sp/>vec,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Resize<sp/>the<sp/>vector<sp/>if<sp/>empty;<sp/>otherwise<sp/>check<sp/>its<sp/>length.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(vec.nelements()<sp/>!=<sp/>nrrow)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(resize<sp/><sp/>||<sp/><sp/>vec.nelements()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec.resize<sp/>(nrrow);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>(TableConformanceError(&quot;ScalarColumn::getColumn&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>column.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>baseColPtr_p-&gt;getScalarColumn<sp/>(vec);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Vector&lt;T&gt;<sp/>ScalarColumn&lt;T&gt;::getColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumnRange<sp/>(rowRange,<sp/>vec);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::getColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;T&gt;&amp;<sp/>vec,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IPosition<sp/>shp,<sp/>blc,<sp/>trc,<sp/>inc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shp<sp/>=<sp/>rowRange.inferShapeFromSource<sp/>(IPosition(1,nrrow),<sp/>blc,<sp/>trc,<sp/>inc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>When<sp/>the<sp/>entire<sp/>column<sp/>is<sp/>accessed,<sp/>use<sp/>that<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(blc(0)<sp/>==<sp/>0<sp/><sp/>&amp;&amp;<sp/><sp/>shp(0)<sp/>==<sp/>Int(nrrow)<sp/><sp/>&amp;&amp;<sp/><sp/>inc(0)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getColumn<sp/>(vec,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>getColumnCells<sp/>(RefRows(blc(0),<sp/>trc(0),<sp/>inc(0)),<sp/>vec,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Vector&lt;T&gt;<sp/>ScalarColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumnCells<sp/>(rownrs,<sp/>vec);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;T&gt;&amp;<sp/>vec,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Resize<sp/>the<sp/>vector<sp/>if<sp/>needed;<sp/>otherwise<sp/>check<sp/>its<sp/>length.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>rownrs.nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(vec.nelements()<sp/>!=<sp/>nrrow)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(resize<sp/><sp/>||<sp/><sp/>vec.nelements()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec.resize<sp/>(nrrow);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>(TableConformanceError(&quot;ScalarColumn::getColumnCells&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>baseColPtr_p-&gt;getScalarColumnCells<sp/>(rownrs,<sp/>vec);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::put<sp/>(rownr_t<sp/>thisRownr,<sp/>const<sp/>ScalarColumn&lt;T&gt;&amp;<sp/>that,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>thatRownr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>put<sp/>(thisRownr,<sp/>that(thatRownr));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::put<sp/>(rownr_t<sp/>thisRownr,<sp/>const<sp/>TableColumn&amp;<sp/>that,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>thatRownr,<sp/>Bool)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>that.getScalarValue<sp/>(thatRownr,<sp/>&amp;value,<sp/>columnDesc().dataTypeId());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>put<sp/>(thisRownr,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::putColumn<sp/>(const<sp/>Vector&lt;T&gt;&amp;<sp/>vec)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkWritable();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Check<sp/>the<sp/>vector<sp/>length.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(vec.nelements()<sp/>!=<sp/>nrrow)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw<sp/>(TableConformanceError(&quot;ScalarColumn::putColumn(Vector&amp;)&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Put<sp/>the<sp/>column.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>baseColPtr_p-&gt;putScalarColumn<sp/>(vec);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::putColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;T&gt;&amp;<sp/>vec)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IPosition<sp/>shp,<sp/>blc,<sp/>trc,<sp/>inc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shp<sp/>=<sp/>rowRange.inferShapeFromSource<sp/>(IPosition(1,nrrow),<sp/>blc,<sp/>trc,<sp/>inc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>When<sp/>the<sp/>entire<sp/>column<sp/>is<sp/>accessed,<sp/>use<sp/>that<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(blc(0)<sp/>==<sp/>0<sp/><sp/>&amp;&amp;<sp/><sp/>shp(0)<sp/>==<sp/>Int(nrrow)<sp/><sp/>&amp;&amp;<sp/><sp/>inc(0)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putColumn<sp/>(vec);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>putColumnCells<sp/>(RefRows(blc(0),<sp/>trc(0),<sp/>inc(0)),<sp/>vec);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::putColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;T&gt;&amp;<sp/>vec)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkWritable();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Check<sp/>the<sp/>vector<sp/>length.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>rownrs.nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(vec.nelements()<sp/>!=<sp/>nrrow)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw<sp/>(TableConformanceError(&quot;ScalarColumn::putColumnCells&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>baseColPtr_p-&gt;putScalarColumnCells<sp/>(rownrs,<sp/>vec);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#//<sp/>This<sp/>is<sp/>a<sp/>very<sp/>simple<sp/>implementation.</highlight></codeline>
<codeline><highlight class="normal">//#//<sp/>Ultimately<sp/>this<sp/>must<sp/>be<sp/>done<sp/>more<sp/>directly<sp/>via<sp/>the<sp/>data<sp/>manager.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::fillColumn<sp/>(const<sp/>T&amp;<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(rownr_t<sp/>i=0;<sp/>i&lt;nrrow;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>put<sp/>(i,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScalarColumn&lt;T&gt;::putColumn<sp/>(const<sp/>ScalarColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Check<sp/>the<sp/>column<sp/>lengths.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr_t<sp/>nrrow<sp/>=<sp/>nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(nrrow<sp/>!=<sp/>that.nrow())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw<sp/>(TableConformanceError<sp/>(&quot;ScalarColumn&lt;T&gt;::putColumn&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(rownr_t<sp/>i=0;<sp/>i&lt;nrrow;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>put<sp/>(i,<sp/>that,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="tables/Tables/ScalarColumn.tcc"/>
  </compounddef>
</doxygen>
