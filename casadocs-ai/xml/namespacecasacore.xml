<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacecasacore" kind="namespace" language="C++">
    <compoundname>casacore</compoundname>
    <innerclass refid="classcasacore_1_1Array" prot="public">casacore::Array</innerclass>
    <innerclass refid="classcasacore_1_1ArrayBaseAccessor" prot="public">casacore::ArrayBaseAccessor</innerclass>
    <innerclass refid="classcasacore_1_1ArrayAccessor" prot="public">casacore::ArrayAccessor</innerclass>
    <innerclass refid="classcasacore_1_1ArrayAccessor_3_01T_00_01Axis_3_01U_01_4_01_4" prot="public">casacore::ArrayAccessor&lt; T, Axis&lt; U &gt; &gt;</innerclass>
    <innerclass refid="classcasacore_1_1ArrayAccessor_3_01T_00_01AxisN_01_4" prot="public">casacore::ArrayAccessor&lt; T, AxisN &gt;</innerclass>
    <innerclass refid="classcasacore_1_1ArrayBase" prot="public">casacore::ArrayBase</innerclass>
    <innerclass refid="classcasacore_1_1ArrayError" prot="public">casacore::ArrayError</innerclass>
    <innerclass refid="classcasacore_1_1ArrayIndexError" prot="public">casacore::ArrayIndexError</innerclass>
    <innerclass refid="classcasacore_1_1ArrayConformanceError" prot="public">casacore::ArrayConformanceError</innerclass>
    <innerclass refid="classcasacore_1_1ArrayNDimError" prot="public">casacore::ArrayNDimError</innerclass>
    <innerclass refid="classcasacore_1_1ArrayShapeError" prot="public">casacore::ArrayShapeError</innerclass>
    <innerclass refid="classcasacore_1_1ArrayIteratorError" prot="public">casacore::ArrayIteratorError</innerclass>
    <innerclass refid="classcasacore_1_1ArraySlicerError" prot="public">casacore::ArraySlicerError</innerclass>
    <innerclass refid="classcasacore_1_1Vector" prot="public">casacore::Vector</innerclass>
    <innerclass refid="classcasacore_1_1Matrix" prot="public">casacore::Matrix</innerclass>
    <innerclass refid="classcasacore_1_1Cube" prot="public">casacore::Cube</innerclass>
    <innerclass refid="classcasacore_1_1MaskedArray" prot="public">casacore::MaskedArray</innerclass>
    <innerclass refid="classcasacore_1_1ArrayIterator" prot="public">casacore::ArrayIterator</innerclass>
    <innerclass refid="classcasacore_1_1ReadOnlyArrayIterator" prot="public">casacore::ReadOnlyArrayIterator</innerclass>
    <innerclass refid="classcasacore_1_1AllFunc" prot="public">casacore::AllFunc</innerclass>
    <innerclass refid="classcasacore_1_1AnyFunc" prot="public">casacore::AnyFunc</innerclass>
    <innerclass refid="classcasacore_1_1NTrueFunc" prot="public">casacore::NTrueFunc</innerclass>
    <innerclass refid="classcasacore_1_1NFalseFunc" prot="public">casacore::NFalseFunc</innerclass>
    <innerclass refid="classcasacore_1_1ArrayFunctorBase" prot="public">casacore::ArrayFunctorBase</innerclass>
    <innerclass refid="classcasacore_1_1SumFunc" prot="public">casacore::SumFunc</innerclass>
    <innerclass refid="classcasacore_1_1SumSqrFunc" prot="public">casacore::SumSqrFunc</innerclass>
    <innerclass refid="classcasacore_1_1ProductFunc" prot="public">casacore::ProductFunc</innerclass>
    <innerclass refid="classcasacore_1_1MinFunc" prot="public">casacore::MinFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaxFunc" prot="public">casacore::MaxFunc</innerclass>
    <innerclass refid="classcasacore_1_1MeanFunc" prot="public">casacore::MeanFunc</innerclass>
    <innerclass refid="classcasacore_1_1VarianceFunc" prot="public">casacore::VarianceFunc</innerclass>
    <innerclass refid="classcasacore_1_1StddevFunc" prot="public">casacore::StddevFunc</innerclass>
    <innerclass refid="classcasacore_1_1AvdevFunc" prot="public">casacore::AvdevFunc</innerclass>
    <innerclass refid="classcasacore_1_1RmsFunc" prot="public">casacore::RmsFunc</innerclass>
    <innerclass refid="classcasacore_1_1MedianFunc" prot="public">casacore::MedianFunc</innerclass>
    <innerclass refid="classcasacore_1_1MadfmFunc" prot="public">casacore::MadfmFunc</innerclass>
    <innerclass refid="classcasacore_1_1FractileFunc" prot="public">casacore::FractileFunc</innerclass>
    <innerclass refid="classcasacore_1_1InterFractileRangeFunc" prot="public">casacore::InterFractileRangeFunc</innerclass>
    <innerclass refid="classcasacore_1_1InterHexileRangeFunc" prot="public">casacore::InterHexileRangeFunc</innerclass>
    <innerclass refid="classcasacore_1_1InterQuartileRangeFunc" prot="public">casacore::InterQuartileRangeFunc</innerclass>
    <innerclass refid="classcasacore_1_1ArrayPositionIterator" prot="public">casacore::ArrayPositionIterator</innerclass>
    <innerclass refid="classcasacore_1_1AxesMapping" prot="public">casacore::AxesMapping</innerclass>
    <innerclass refid="classcasacore_1_1AxesSpecifier" prot="public">casacore::AxesSpecifier</innerclass>
    <innerclass refid="classcasacore_1_1ExtendSpecifier" prot="public">casacore::ExtendSpecifier</innerclass>
    <innerclass refid="classcasacore_1_1IPosition" prot="public">casacore::IPosition</innerclass>
    <innerclass refid="classcasacore_1_1IPositionComparator" prot="public">casacore::IPositionComparator</innerclass>
    <innerclass refid="classcasacore_1_1MaskedSumFunc" prot="public">casacore::MaskedSumFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedProductFunc" prot="public">casacore::MaskedProductFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedMinFunc" prot="public">casacore::MaskedMinFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedMaxFunc" prot="public">casacore::MaskedMaxFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedMeanFunc" prot="public">casacore::MaskedMeanFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedVarianceFunc" prot="public">casacore::MaskedVarianceFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedStddevFunc" prot="public">casacore::MaskedStddevFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedAvdevFunc" prot="public">casacore::MaskedAvdevFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedRmsFunc" prot="public">casacore::MaskedRmsFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedMedianFunc" prot="public">casacore::MaskedMedianFunc</innerclass>
    <innerclass refid="classcasacore_1_1MaskedMadfmFunc" prot="public">casacore::MaskedMadfmFunc</innerclass>
    <innerclass refid="classcasacore_1_1MatrixIterator" prot="public">casacore::MatrixIterator</innerclass>
    <innerclass refid="classcasacore_1_1ReadOnlyMatrixIterator" prot="public">casacore::ReadOnlyMatrixIterator</innerclass>
    <innerclass refid="classcasacore_1_1Slice" prot="public">casacore::Slice</innerclass>
    <innerclass refid="classcasacore_1_1Slicer" prot="public">casacore::Slicer</innerclass>
    <innerclass refid="classcasacore_1_1VectorIterator" prot="public">casacore::VectorIterator</innerclass>
    <innerclass refid="classcasacore_1_1ReadOnlyVectorIterator" prot="public">casacore::ReadOnlyVectorIterator</innerclass>
    <innerclass refid="classcasacore_1_1VectorSTLIterator" prot="public">casacore::VectorSTLIterator</innerclass>
    <innerclass refid="classcasacore_1_1Lattice" prot="public">casacore::Lattice</innerclass>
    <innerclass refid="classcasacore_1_1Functional" prot="public">casacore::Functional</innerclass>
    <innerclass refid="structcasacore_1_1Plus" prot="public">casacore::Plus</innerclass>
    <innerclass refid="structcasacore_1_1Minus" prot="public">casacore::Minus</innerclass>
    <innerclass refid="structcasacore_1_1Multiplies" prot="public">casacore::Multiplies</innerclass>
    <innerclass refid="structcasacore_1_1Divides" prot="public">casacore::Divides</innerclass>
    <innerclass refid="structcasacore_1_1Modulo" prot="public">casacore::Modulo</innerclass>
    <innerclass refid="structcasacore_1_1FloorMod" prot="public">casacore::FloorMod</innerclass>
    <innerclass refid="structcasacore_1_1BitAnd" prot="public">casacore::BitAnd</innerclass>
    <innerclass refid="structcasacore_1_1BitOr" prot="public">casacore::BitOr</innerclass>
    <innerclass refid="structcasacore_1_1BitXor" prot="public">casacore::BitXor</innerclass>
    <innerclass refid="structcasacore_1_1BitNegate" prot="public">casacore::BitNegate</innerclass>
    <innerclass refid="structcasacore_1_1IsNaN" prot="public">casacore::IsNaN</innerclass>
    <innerclass refid="structcasacore_1_1IsInf" prot="public">casacore::IsInf</innerclass>
    <innerclass refid="structcasacore_1_1IsFinite" prot="public">casacore::IsFinite</innerclass>
    <innerclass refid="structcasacore_1_1Near" prot="public">casacore::Near</innerclass>
    <innerclass refid="structcasacore_1_1NearAbs" prot="public">casacore::NearAbs</innerclass>
    <innerclass refid="structcasacore_1_1Sin" prot="public">casacore::Sin</innerclass>
    <innerclass refid="structcasacore_1_1Sinh" prot="public">casacore::Sinh</innerclass>
    <innerclass refid="structcasacore_1_1Asin" prot="public">casacore::Asin</innerclass>
    <innerclass refid="structcasacore_1_1Cos" prot="public">casacore::Cos</innerclass>
    <innerclass refid="structcasacore_1_1Cosh" prot="public">casacore::Cosh</innerclass>
    <innerclass refid="structcasacore_1_1Acos" prot="public">casacore::Acos</innerclass>
    <innerclass refid="structcasacore_1_1Tan" prot="public">casacore::Tan</innerclass>
    <innerclass refid="structcasacore_1_1Tanh" prot="public">casacore::Tanh</innerclass>
    <innerclass refid="structcasacore_1_1Atan" prot="public">casacore::Atan</innerclass>
    <innerclass refid="structcasacore_1_1Atan2" prot="public">casacore::Atan2</innerclass>
    <innerclass refid="structcasacore_1_1Sqr" prot="public">casacore::Sqr</innerclass>
    <innerclass refid="structcasacore_1_1Pow3" prot="public">casacore::Pow3</innerclass>
    <innerclass refid="structcasacore_1_1Sqrt" prot="public">casacore::Sqrt</innerclass>
    <innerclass refid="structcasacore_1_1Exp" prot="public">casacore::Exp</innerclass>
    <innerclass refid="structcasacore_1_1Log" prot="public">casacore::Log</innerclass>
    <innerclass refid="structcasacore_1_1Log10" prot="public">casacore::Log10</innerclass>
    <innerclass refid="structcasacore_1_1Abs" prot="public">casacore::Abs</innerclass>
    <innerclass refid="structcasacore_1_1Floor" prot="public">casacore::Floor</innerclass>
    <innerclass refid="structcasacore_1_1Ceil" prot="public">casacore::Ceil</innerclass>
    <innerclass refid="structcasacore_1_1Round" prot="public">casacore::Round</innerclass>
    <innerclass refid="structcasacore_1_1Sign" prot="public">casacore::Sign</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplex" prot="public">casacore::MakeComplex</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplexReal" prot="public">casacore::MakeComplexReal</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplexImag" prot="public">casacore::MakeComplexImag</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplexRealImag" prot="public">casacore::MakeComplexRealImag</innerclass>
    <innerclass refid="structcasacore_1_1Conj" prot="public">casacore::Conj</innerclass>
    <innerclass refid="structcasacore_1_1Real" prot="public">casacore::Real</innerclass>
    <innerclass refid="structcasacore_1_1Imag" prot="public">casacore::Imag</innerclass>
    <innerclass refid="structcasacore_1_1CArg" prot="public">casacore::CArg</innerclass>
    <innerclass refid="structcasacore_1_1CAbs" prot="public">casacore::CAbs</innerclass>
    <innerclass refid="structcasacore_1_1Pow" prot="public">casacore::Pow</innerclass>
    <innerclass refid="structcasacore_1_1Fmod" prot="public">casacore::Fmod</innerclass>
    <innerclass refid="structcasacore_1_1Min" prot="public">casacore::Min</innerclass>
    <innerclass refid="structcasacore_1_1Max" prot="public">casacore::Max</innerclass>
    <innerclass refid="structcasacore_1_1SumSqr" prot="public">casacore::SumSqr</innerclass>
    <innerclass refid="structcasacore_1_1SumSqrDiff" prot="public">casacore::SumSqrDiff</innerclass>
    <innerclass refid="structcasacore_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4" prot="public">casacore::SumSqrDiff&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structcasacore_1_1SumAbsDiff" prot="public">casacore::SumAbsDiff</innerclass>
    <innerclass refid="structcasacore_1_1Downcase" prot="public">casacore::Downcase</innerclass>
    <innerclass refid="structcasacore_1_1Upcase" prot="public">casacore::Upcase</innerclass>
    <innerclass refid="structcasacore_1_1Capitalize" prot="public">casacore::Capitalize</innerclass>
    <innerclass refid="structcasacore_1_1Trim" prot="public">casacore::Trim</innerclass>
    <innerclass refid="classcasacore_1_1Primes" prot="public">casacore::Primes</innerclass>
    <innerclass refid="classcasacore_1_1RNG" prot="public">casacore::RNG</innerclass>
    <innerclass refid="classcasacore_1_1ACG" prot="public">casacore::ACG</innerclass>
    <innerclass refid="classcasacore_1_1MLCG" prot="public">casacore::MLCG</innerclass>
    <innerclass refid="classcasacore_1_1Random" prot="public">casacore::Random</innerclass>
    <innerclass refid="classcasacore_1_1Binomial" prot="public">casacore::Binomial</innerclass>
    <innerclass refid="classcasacore_1_1DiscreteUniform" prot="public">casacore::DiscreteUniform</innerclass>
    <innerclass refid="classcasacore_1_1Erlang" prot="public">casacore::Erlang</innerclass>
    <innerclass refid="classcasacore_1_1Geometric" prot="public">casacore::Geometric</innerclass>
    <innerclass refid="classcasacore_1_1HyperGeometric" prot="public">casacore::HyperGeometric</innerclass>
    <innerclass refid="classcasacore_1_1Normal" prot="public">casacore::Normal</innerclass>
    <innerclass refid="classcasacore_1_1LogNormal" prot="public">casacore::LogNormal</innerclass>
    <innerclass refid="classcasacore_1_1NegativeExpntl" prot="public">casacore::NegativeExpntl</innerclass>
    <innerclass refid="classcasacore_1_1Poisson" prot="public">casacore::Poisson</innerclass>
    <innerclass refid="classcasacore_1_1Uniform" prot="public">casacore::Uniform</innerclass>
    <innerclass refid="classcasacore_1_1Weibull" prot="public">casacore::Weibull</innerclass>
    <innerclass refid="classcasacore_1_1Dummy__Constants__class" prot="public">casacore::Dummy_Constants_class</innerclass>
    <innerclass refid="classcasacore_1_1IComplex" prot="public">casacore::IComplex</innerclass>
    <innerclass refid="classcasacore_1_1SubString" prot="public">casacore::SubString</innerclass>
    <innerclass refid="classcasacore_1_1String" prot="public">casacore::String</innerclass>
    <innerclass refid="classcasacore_1_1ArrayInitPolicy" prot="public">casacore::ArrayInitPolicy</innerclass>
    <innerclass refid="structcasacore_1_1ArrayInitPolicies" prot="public">casacore::ArrayInitPolicies</innerclass>
    <innerclass refid="structcasacore_1_1casacore__allocator" prot="public">casacore::casacore_allocator</innerclass>
    <innerclass refid="structcasacore_1_1new__del__allocator" prot="public">casacore::new_del_allocator</innerclass>
    <innerclass refid="classcasacore_1_1Block" prot="public">casacore::Block</innerclass>
    <innerclass refid="classcasacore_1_1Allocator__private" prot="public">casacore::Allocator_private</innerclass>
    <innerclass refid="classcasacore_1_1AbstractAllocator" prot="public">casacore::AbstractAllocator</innerclass>
    <innerclass refid="classcasacore_1_1BaseAllocator" prot="public">casacore::BaseAllocator</innerclass>
    <innerclass refid="classcasacore_1_1NewDelAllocator" prot="public">casacore::NewDelAllocator</innerclass>
    <innerclass refid="classcasacore_1_1AlignedAllocator" prot="public">casacore::AlignedAllocator</innerclass>
    <innerclass refid="classcasacore_1_1DefaultAllocator" prot="public">casacore::DefaultAllocator</innerclass>
    <innerclass refid="structcasacore_1_1AllocSpec" prot="public">casacore::AllocSpec</innerclass>
    <innerclass refid="classcasacore_1_1BlockTrace" prot="public">casacore::BlockTrace</innerclass>
    <innerclass refid="classcasacore_1_1Block__internal__IsFundamental" prot="public">casacore::Block_internal_IsFundamental</innerclass>
    <innerclass refid="classcasacore_1_1Block__internal__IsPointer" prot="public">casacore::Block_internal_IsPointer</innerclass>
    <innerclass refid="classcasacore_1_1PtrBlock" prot="public">casacore::PtrBlock</innerclass>
    <innerclass refid="classcasacore_1_1IterError" prot="public">casacore::IterError</innerclass>
    <innerclass refid="classcasacore_1_1IterBoundaryError" prot="public">casacore::IterBoundaryError</innerclass>
    <innerclass refid="classcasacore_1_1IterInitError" prot="public">casacore::IterInitError</innerclass>
    <innerclass refid="classcasacore_1_1InvalidIterError" prot="public">casacore::InvalidIterError</innerclass>
    <innerclass refid="classcasacore_1_1ObjectStack" prot="public">casacore::ObjectStack</innerclass>
    <innerclass refid="classcasacore_1_1Record" prot="public">casacore::Record</innerclass>
    <innerclass refid="classcasacore_1_1RecordDesc" prot="public">casacore::RecordDesc</innerclass>
    <innerclass refid="classcasacore_1_1RecordDescRep" prot="public">casacore::RecordDescRep</innerclass>
    <innerclass refid="classcasacore_1_1RecordFieldPtr" prot="public">casacore::RecordFieldPtr</innerclass>
    <innerclass refid="classcasacore_1_1RORecordFieldPtr" prot="public">casacore::RORecordFieldPtr</innerclass>
    <innerclass refid="classcasacore_1_1RecordFieldId" prot="public">casacore::RecordFieldId</innerclass>
    <innerclass refid="classcasacore_1_1RecordFieldWriter" prot="public">casacore::RecordFieldWriter</innerclass>
    <innerclass refid="classcasacore_1_1RecordFieldCopier" prot="public">casacore::RecordFieldCopier</innerclass>
    <innerclass refid="classcasacore_1_1UnequalShapeCopier" prot="public">casacore::UnequalShapeCopier</innerclass>
    <innerclass refid="classcasacore_1_1MultiRecordFieldWriter" prot="public">casacore::MultiRecordFieldWriter</innerclass>
    <innerclass refid="classcasacore_1_1RecordInterface" prot="public">casacore::RecordInterface</innerclass>
    <innerclass refid="classcasacore_1_1RecordRep" prot="public">casacore::RecordRep</innerclass>
    <innerclass refid="classcasacore_1_1ValueHolder" prot="public">casacore::ValueHolder</innerclass>
    <innerclass refid="classcasacore_1_1ValueHolderRep" prot="public">casacore::ValueHolderRep</innerclass>
    <innerclass refid="classcasacore_1_1CasaErrorTools" prot="public">casacore::CasaErrorTools</innerclass>
    <innerclass refid="classcasacore_1_1AipsError" prot="public">casacore::AipsError</innerclass>
    <innerclass refid="classcasacore_1_1AllocError" prot="public">casacore::AllocError</innerclass>
    <innerclass refid="classcasacore_1_1IndexError" prot="public">casacore::IndexError</innerclass>
    <innerclass refid="classcasacore_1_1indexError" prot="public">casacore::indexError</innerclass>
    <innerclass refid="classcasacore_1_1DuplError" prot="public">casacore::DuplError</innerclass>
    <innerclass refid="classcasacore_1_1duplError" prot="public">casacore::duplError</innerclass>
    <innerclass refid="classcasacore_1_1SystemCallError" prot="public">casacore::SystemCallError</innerclass>
    <innerclass refid="classcasacore_1_1AbortError" prot="public">casacore::AbortError</innerclass>
    <innerclass refid="classcasacore_1_1InitError" prot="public">casacore::InitError</innerclass>
    <innerclass refid="classcasacore_1_1HDF5DataSet" prot="public">casacore::HDF5DataSet</innerclass>
    <innerclass refid="classcasacore_1_1HDF5DataType" prot="public">casacore::HDF5DataType</innerclass>
    <innerclass refid="classcasacore_1_1HDF5Error" prot="public">casacore::HDF5Error</innerclass>
    <innerclass refid="classcasacore_1_1HDF5File" prot="public">casacore::HDF5File</innerclass>
    <innerclass refid="classcasacore_1_1HDF5Group" prot="public">casacore::HDF5Group</innerclass>
    <innerclass refid="classcasacore_1_1HDF5HidProperty" prot="public">casacore::HDF5HidProperty</innerclass>
    <innerclass refid="classcasacore_1_1HDF5HidDataType" prot="public">casacore::HDF5HidDataType</innerclass>
    <innerclass refid="classcasacore_1_1HDF5HidDataSpace" prot="public">casacore::HDF5HidDataSpace</innerclass>
    <innerclass refid="classcasacore_1_1HDF5HidAttribute" prot="public">casacore::HDF5HidAttribute</innerclass>
    <innerclass refid="classcasacore_1_1HDF5Object" prot="public">casacore::HDF5Object</innerclass>
    <innerclass refid="classcasacore_1_1HDF5Record" prot="public">casacore::HDF5Record</innerclass>
    <innerclass refid="classcasacore_1_1Input" prot="public">casacore::Input</innerclass>
    <innerclass refid="classcasacore_1_1Param" prot="public">casacore::Param</innerclass>
    <innerclass refid="classcasacore_1_1AipsIO" prot="public">casacore::AipsIO</innerclass>
    <innerclass refid="classcasacore_1_1BaseSinkSource" prot="public">casacore::BaseSinkSource</innerclass>
    <innerclass refid="classcasacore_1_1BucketBase" prot="public">casacore::BucketBase</innerclass>
    <innerclass refid="classcasacore_1_1BucketBuffered" prot="public">casacore::BucketBuffered</innerclass>
    <innerclass refid="classcasacore_1_1BucketCache" prot="public">casacore::BucketCache</innerclass>
    <innerclass refid="classcasacore_1_1BucketFile" prot="public">casacore::BucketFile</innerclass>
    <innerclass refid="classcasacore_1_1BucketMapped" prot="public">casacore::BucketMapped</innerclass>
    <innerclass refid="classcasacore_1_1ByteIO" prot="public">casacore::ByteIO</innerclass>
    <innerclass refid="classcasacore_1_1ByteSink" prot="public">casacore::ByteSink</innerclass>
    <innerclass refid="classcasacore_1_1ByteSinkSource" prot="public">casacore::ByteSinkSource</innerclass>
    <innerclass refid="classcasacore_1_1ByteSource" prot="public">casacore::ByteSource</innerclass>
    <innerclass refid="classcasacore_1_1CanonicalIO" prot="public">casacore::CanonicalIO</innerclass>
    <innerclass refid="classcasacore_1_1ConversionIO" prot="public">casacore::ConversionIO</innerclass>
    <innerclass refid="classcasacore_1_1FilebufIO" prot="public">casacore::FilebufIO</innerclass>
    <innerclass refid="classcasacore_1_1FiledesIO" prot="public">casacore::FiledesIO</innerclass>
    <innerclass refid="classcasacore_1_1FileLocker" prot="public">casacore::FileLocker</innerclass>
    <innerclass refid="classcasacore_1_1FileUnbufferedIO" prot="public">casacore::FileUnbufferedIO</innerclass>
    <innerclass refid="classcasacore_1_1LECanonicalIO" prot="public">casacore::LECanonicalIO</innerclass>
    <innerclass refid="classcasacore_1_1LockFile" prot="public">casacore::LockFile</innerclass>
    <innerclass refid="classcasacore_1_1MemoryIO" prot="public">casacore::MemoryIO</innerclass>
    <innerclass refid="classcasacore_1_1MFFileIO" prot="public">casacore::MFFileIO</innerclass>
    <innerclass refid="classcasacore_1_1MMapfdIO" prot="public">casacore::MMapfdIO</innerclass>
    <innerclass refid="classcasacore_1_1MMapIO" prot="public">casacore::MMapIO</innerclass>
    <innerclass refid="classcasacore_1_1MultiFile" prot="public">casacore::MultiFile</innerclass>
    <innerclass refid="classcasacore_1_1MultiFileBuffer" prot="public">casacore::MultiFileBuffer</innerclass>
    <innerclass refid="structcasacore_1_1MultiFileInfo" prot="public">casacore::MultiFileInfo</innerclass>
    <innerclass refid="classcasacore_1_1MultiFileBase" prot="public">casacore::MultiFileBase</innerclass>
    <innerclass refid="classcasacore_1_1MultiHDF5" prot="public">casacore::MultiHDF5</innerclass>
    <innerclass refid="classcasacore_1_1RawIO" prot="public">casacore::RawIO</innerclass>
    <innerclass refid="classcasacore_1_1RegularFileIO" prot="public">casacore::RegularFileIO</innerclass>
    <innerclass refid="classcasacore_1_1StreamIO" prot="public">casacore::StreamIO</innerclass>
    <innerclass refid="classcasacore_1_1TapeIO" prot="public">casacore::TapeIO</innerclass>
    <innerclass refid="classcasacore_1_1TypeIO" prot="public">casacore::TypeIO</innerclass>
    <innerclass refid="classcasacore_1_1JsonError" prot="public">casacore::JsonError</innerclass>
    <innerclass refid="classcasacore_1_1JsonKVMap" prot="public">casacore::JsonKVMap</innerclass>
    <innerclass refid="classcasacore_1_1JsonOut" prot="public">casacore::JsonOut</innerclass>
    <innerclass refid="classcasacore_1_1JsonParser" prot="public">casacore::JsonParser</innerclass>
    <innerclass refid="classcasacore_1_1JsonValue" prot="public">casacore::JsonValue</innerclass>
    <innerclass refid="classcasacore_1_1LogFilter" prot="public">casacore::LogFilter</innerclass>
    <innerclass refid="classcasacore_1_1LogFilterInterface" prot="public">casacore::LogFilterInterface</innerclass>
    <innerclass refid="classcasacore_1_1LogIO" prot="public">casacore::LogIO</innerclass>
    <innerclass refid="classcasacore_1_1LogMessage" prot="public">casacore::LogMessage</innerclass>
    <innerclass refid="classcasacore_1_1LogOrigin" prot="public">casacore::LogOrigin</innerclass>
    <innerclass refid="structcasacore_1_1SourceLocation" prot="public">casacore::SourceLocation</innerclass>
    <innerclass refid="classcasacore_1_1LogSink" prot="public">casacore::LogSink</innerclass>
    <innerclass refid="classcasacore_1_1LogSinkInterface" prot="public">casacore::LogSinkInterface</innerclass>
    <innerclass refid="classcasacore_1_1MemoryLogSink" prot="public">casacore::MemoryLogSink</innerclass>
    <innerclass refid="classcasacore_1_1NullLogSink" prot="public">casacore::NullLogSink</innerclass>
    <innerclass refid="classcasacore_1_1StreamLogSink" prot="public">casacore::StreamLogSink</innerclass>
    <innerclass refid="classcasacore_1_1CanonicalConversion" prot="public">casacore::CanonicalConversion</innerclass>
    <innerclass refid="classcasacore_1_1CanonicalDataConversion" prot="public">casacore::CanonicalDataConversion</innerclass>
    <innerclass refid="unioncasacore_1_1m64d__t" prot="public">casacore::m64d_t</innerclass>
    <innerclass refid="classcasacore_1_1Conversion" prot="public">casacore::Conversion</innerclass>
    <innerclass refid="classcasacore_1_1DataConversion" prot="public">casacore::DataConversion</innerclass>
    <innerclass refid="classcasacore_1_1Directory" prot="public">casacore::Directory</innerclass>
    <innerclass refid="classcasacore_1_1DirectoryIterator" prot="public">casacore::DirectoryIterator</innerclass>
    <innerclass refid="classcasacore_1_1DOos" prot="public">casacore::DOos</innerclass>
    <innerclass refid="classcasacore_1_1DynLib" prot="public">casacore::DynLib</innerclass>
    <innerclass refid="classcasacore_1_1EnvironmentVariable" prot="public">casacore::EnvironmentVariable</innerclass>
    <innerclass refid="classcasacore_1_1File" prot="public">casacore::File</innerclass>
    <innerclass refid="classcasacore_1_1HostInfo" prot="public">casacore::HostInfo</innerclass>
    <innerclass refid="classcasacore_1_1IBMConversion" prot="public">casacore::IBMConversion</innerclass>
    <innerclass refid="classcasacore_1_1IBMDataConversion" prot="public">casacore::IBMDataConversion</innerclass>
    <innerclass refid="classcasacore_1_1LECanonicalConversion" prot="public">casacore::LECanonicalConversion</innerclass>
    <innerclass refid="classcasacore_1_1LECanonicalDataConversion" prot="public">casacore::LECanonicalDataConversion</innerclass>
    <innerclass refid="classcasacore_1_1LittleEndianConversion" prot="public">casacore::LittleEndianConversion</innerclass>
    <innerclass refid="classcasacore_1_1Memory" prot="public">casacore::Memory</innerclass>
    <innerclass refid="classcasacore_1_1MemoryTrace" prot="public">casacore::MemoryTrace</innerclass>
    <innerclass refid="classcasacore_1_1MemoryTraceBlock" prot="public">casacore::MemoryTraceBlock</innerclass>
    <innerclass refid="classcasacore_1_1ModcompConversion" prot="public">casacore::ModcompConversion</innerclass>
    <innerclass refid="classcasacore_1_1ModcompDataConversion" prot="public">casacore::ModcompDataConversion</innerclass>
    <innerclass refid="classcasacore_1_1Path" prot="public">casacore::Path</innerclass>
    <innerclass refid="classcasacore_1_1PrecTimer" prot="public">casacore::PrecTimer</innerclass>
    <innerclass refid="classcasacore_1_1RawDataConversion" prot="public">casacore::RawDataConversion</innerclass>
    <innerclass refid="classcasacore_1_1RegularFile" prot="public">casacore::RegularFile</innerclass>
    <innerclass refid="classcasacore_1_1SymLink" prot="public">casacore::SymLink</innerclass>
    <innerclass refid="classcasacore_1_1Time" prot="public">casacore::Time</innerclass>
    <innerclass refid="classcasacore_1_1Timer" prot="public">casacore::Timer</innerclass>
    <innerclass refid="classcasacore_1_1VAXConversion" prot="public">casacore::VAXConversion</innerclass>
    <innerclass refid="classcasacore_1_1VAXDataConversion" prot="public">casacore::VAXDataConversion</innerclass>
    <innerclass refid="classcasacore_1_1Euler" prot="public">casacore::Euler</innerclass>
    <innerclass refid="classcasacore_1_1Quantum" prot="public">casacore::Quantum</innerclass>
    <innerclass refid="classcasacore_1_1MeasValue" prot="public">casacore::MeasValue</innerclass>
    <innerclass refid="classcasacore_1_1MVAngle" prot="public">casacore::MVAngle</innerclass>
    <innerclass refid="classcasacore_1_1MVBaseline" prot="public">casacore::MVBaseline</innerclass>
    <innerclass refid="classcasacore_1_1MVDirection" prot="public">casacore::MVDirection</innerclass>
    <innerclass refid="classcasacore_1_1MVDoppler" prot="public">casacore::MVDoppler</innerclass>
    <innerclass refid="classcasacore_1_1MVDouble" prot="public">casacore::MVDouble</innerclass>
    <innerclass refid="classcasacore_1_1MVEarthMagnetic" prot="public">casacore::MVEarthMagnetic</innerclass>
    <innerclass refid="classcasacore_1_1MVEpoch" prot="public">casacore::MVEpoch</innerclass>
    <innerclass refid="classcasacore_1_1MVFrequency" prot="public">casacore::MVFrequency</innerclass>
    <innerclass refid="classcasacore_1_1MVPosition" prot="public">casacore::MVPosition</innerclass>
    <innerclass refid="classcasacore_1_1MVRadialVelocity" prot="public">casacore::MVRadialVelocity</innerclass>
    <innerclass refid="classcasacore_1_1MVTime" prot="public">casacore::MVTime</innerclass>
    <innerclass refid="classcasacore_1_1MVuvw" prot="public">casacore::MVuvw</innerclass>
    <innerclass refid="classcasacore_1_1QBase" prot="public">casacore::QBase</innerclass>
    <innerclass refid="classcasacore_1_1QC" prot="public">casacore::QC</innerclass>
    <innerclass refid="classcasacore_1_1QuantumHolder" prot="public">casacore::QuantumHolder</innerclass>
    <innerclass refid="classcasacore_1_1QVector" prot="public">casacore::QVector</innerclass>
    <innerclass refid="classcasacore_1_1RotMatrix" prot="public">casacore::RotMatrix</innerclass>
    <innerclass refid="classcasacore_1_1Unit" prot="public">casacore::Unit</innerclass>
    <innerclass refid="classcasacore_1_1UnitDim" prot="public">casacore::UnitDim</innerclass>
    <innerclass refid="classcasacore_1_1UMaps" prot="public">casacore::UMaps</innerclass>
    <innerclass refid="classcasacore_1_1UnitMap" prot="public">casacore::UnitMap</innerclass>
    <innerclass refid="classcasacore_1_1UnitName" prot="public">casacore::UnitName</innerclass>
    <innerclass refid="classcasacore_1_1UnitVal" prot="public">casacore::UnitVal</innerclass>
    <innerclass refid="classcasacore_1_1UnitVal__static__initializer" prot="public">casacore::UnitVal_static_initializer</innerclass>
    <innerclass refid="classcasacore_1_1AipsrcValue" prot="public">casacore::AipsrcValue</innerclass>
    <innerclass refid="classcasacore_1_1AipsrcVector" prot="public">casacore::AipsrcVector</innerclass>
    <innerclass refid="classcasacore_1_1Aipsrc" prot="public">casacore::Aipsrc</innerclass>
    <innerclass refid="classcasacore_1_1AipsrcValue_3_01Bool_01_4" prot="public">casacore::AipsrcValue&lt; Bool &gt;</innerclass>
    <innerclass refid="classcasacore_1_1AipsrcVector__String_3_01String_01_4" prot="public">casacore::AipsrcVector_String&lt; String &gt;</innerclass>
    <innerclass refid="classcasacore_1_1AipsrcVector__Bool_3_01Bool_01_4" prot="public">casacore::AipsrcVector_Bool&lt; Bool &gt;</innerclass>
    <innerclass refid="classcasacore_1_1AppInfo" prot="public">casacore::AppInfo</innerclass>
    <innerclass refid="structcasacore_1_1FOR__GCC__4__8__DEFECTS" prot="public">casacore::FOR_GCC_4_8_DEFECTS</innerclass>
    <innerclass refid="classcasacore_1_1AppState" prot="public">casacore::AppState</innerclass>
    <innerclass refid="classcasacore_1_1AppStateSource" prot="public">casacore::AppStateSource</innerclass>
    <innerclass refid="classcasacore_1_1Casarc" prot="public">casacore::Casarc</innerclass>
    <innerclass refid="classcasacore_1_1CasarcCleanup" prot="public">casacore::CasarcCleanup</innerclass>
    <innerclass refid="classcasacore_1_1Choice" prot="public">casacore::Choice</innerclass>
    <innerclass refid="classcasacore_1_1ObjectID" prot="public">casacore::ObjectID</innerclass>
    <innerclass refid="classcasacore_1_1PGPlotter" prot="public">casacore::PGPlotter</innerclass>
    <innerclass refid="classcasacore_1_1PGPlotterInterface" prot="public">casacore::PGPlotterInterface</innerclass>
    <innerclass refid="classcasacore_1_1PGPlotterNull" prot="public">casacore::PGPlotterNull</innerclass>
    <innerclass refid="classcasacore_1_1ProgressMeter" prot="public">casacore::ProgressMeter</innerclass>
    <innerclass refid="classcasacore_1_1AlignMemory" prot="public">casacore::AlignMemory</innerclass>
    <innerclass refid="classcasacore_1_1assert__" prot="public">casacore::assert_</innerclass>
    <innerclass refid="classcasacore_1_1BitVector" prot="public">casacore::BitVector</innerclass>
    <innerclass refid="classcasacore_1_1BitVectorHelper" prot="public">casacore::BitVectorHelper</innerclass>
    <innerclass refid="classcasacore_1_1CASATask" prot="public">casacore::CASATask</innerclass>
    <innerclass refid="classcasacore_1_1BaseCompare" prot="public">casacore::BaseCompare</innerclass>
    <innerclass refid="classcasacore_1_1ObjCompare" prot="public">casacore::ObjCompare</innerclass>
    <innerclass refid="classcasacore_1_1CompareIntervalInt" prot="public">casacore::CompareIntervalInt</innerclass>
    <innerclass refid="classcasacore_1_1CompareIntervalReal" prot="public">casacore::CompareIntervalReal</innerclass>
    <innerclass refid="classcasacore_1_1CompareNoCase" prot="public">casacore::CompareNoCase</innerclass>
    <innerclass refid="classcasacore_1_1CompareAlwaysTrue" prot="public">casacore::CompareAlwaysTrue</innerclass>
    <innerclass refid="classcasacore_1_1CompositeNumber" prot="public">casacore::CompositeNumber</innerclass>
    <innerclass refid="classcasacore_1_1CountedPtr" prot="public">casacore::CountedPtr</innerclass>
    <innerclass refid="classcasacore_1_1COWPtr" prot="public">casacore::COWPtr</innerclass>
    <innerclass refid="classcasacore_1_1DynBuffer" prot="public">casacore::DynBuffer</innerclass>
    <innerclass refid="classcasacore_1_1Fallible" prot="public">casacore::Fallible</innerclass>
    <innerclass refid="classcasacore_1_1GenSort" prot="public">casacore::GenSort</innerclass>
    <innerclass refid="classcasacore_1_1GenSortIndirect" prot="public">casacore::GenSortIndirect</innerclass>
    <innerclass refid="classcasacore_1_1MUString" prot="public">casacore::MUString</innerclass>
    <innerclass refid="classcasacore_1_1PtrHolder" prot="public">casacore::PtrHolder</innerclass>
    <innerclass refid="classcasacore_1_1SPtrHolder" prot="public">casacore::SPtrHolder</innerclass>
    <innerclass refid="classcasacore_1_1RecordTransformable" prot="public">casacore::RecordTransformable</innerclass>
    <innerclass refid="classcasacore_1_1Regex" prot="public">casacore::Regex</innerclass>
    <innerclass refid="classcasacore_1_1Sequence" prot="public">casacore::Sequence</innerclass>
    <innerclass refid="classcasacore_1_1uIntSequence" prot="public">casacore::uIntSequence</innerclass>
    <innerclass refid="classcasacore_1_1SortKey" prot="public">casacore::SortKey</innerclass>
    <innerclass refid="classcasacore_1_1Sort" prot="public">casacore::Sort</innerclass>
    <innerclass refid="classcasacore_1_1SortError" prot="public">casacore::SortError</innerclass>
    <innerclass refid="classcasacore_1_1SortInvDT" prot="public">casacore::SortInvDT</innerclass>
    <innerclass refid="classcasacore_1_1SortInvIncr" prot="public">casacore::SortInvIncr</innerclass>
    <innerclass refid="classcasacore_1_1SortNoData" prot="public">casacore::SortNoData</innerclass>
    <innerclass refid="classcasacore_1_1SortInvOpt" prot="public">casacore::SortInvOpt</innerclass>
    <innerclass refid="classcasacore_1_1StringDistance" prot="public">casacore::StringDistance</innerclass>
    <innerclass refid="classcasacore_1_1Template" prot="public">casacore::Template</innerclass>
    <innerclass refid="classcasacore_1_1ValType" prot="public">casacore::ValType</innerclass>
    <innerclass refid="classcasacore_1_1Adios2StMan" prot="public">casacore::Adios2StMan</innerclass>
    <innerclass refid="classcasacore_1_1Adios2StManColumn" prot="public">casacore::Adios2StManColumn</innerclass>
    <innerclass refid="classcasacore_1_1Adios2StManColumnT" prot="public">casacore::Adios2StManColumnT</innerclass>
    <innerclass refid="classcasacore_1_1Adios2StManColumnString" prot="public">casacore::Adios2StManColumnString</innerclass>
    <innerclass refid="classcasacore_1_1ArrayColumn" prot="public">casacore::ArrayColumn</innerclass>
    <innerclass refid="classcasacore_1_1BaseMappedArrayEngine" prot="public">casacore::BaseMappedArrayEngine</innerclass>
    <innerclass refid="classcasacore_1_1BFEngineMask" prot="public">casacore::BFEngineMask</innerclass>
    <innerclass refid="classcasacore_1_1BitFlagsEngine" prot="public">casacore::BitFlagsEngine</innerclass>
    <innerclass refid="classcasacore_1_1CompressComplex" prot="public">casacore::CompressComplex</innerclass>
    <innerclass refid="classcasacore_1_1CompressComplexSD" prot="public">casacore::CompressComplexSD</innerclass>
    <innerclass refid="classcasacore_1_1CompressFloat" prot="public">casacore::CompressFloat</innerclass>
    <innerclass refid="classcasacore_1_1RODataManAccessor" prot="public">casacore::RODataManAccessor</innerclass>
    <innerclass refid="classcasacore_1_1DataManager" prot="public">casacore::DataManager</innerclass>
    <innerclass refid="classcasacore_1_1DataManagerColumn" prot="public">casacore::DataManagerColumn</innerclass>
    <innerclass refid="classcasacore_1_1DataManError" prot="public">casacore::DataManError</innerclass>
    <innerclass refid="classcasacore_1_1DataManInternalError" prot="public">casacore::DataManInternalError</innerclass>
    <innerclass refid="classcasacore_1_1DataManUnknownCtor" prot="public">casacore::DataManUnknownCtor</innerclass>
    <innerclass refid="classcasacore_1_1DataManInvDT" prot="public">casacore::DataManInvDT</innerclass>
    <innerclass refid="classcasacore_1_1DataManInvOper" prot="public">casacore::DataManInvOper</innerclass>
    <innerclass refid="classcasacore_1_1DataManUnknownVirtualColumn" prot="public">casacore::DataManUnknownVirtualColumn</innerclass>
    <innerclass refid="classcasacore_1_1TSMError" prot="public">casacore::TSMError</innerclass>
    <innerclass refid="classcasacore_1_1DataManInfo" prot="public">casacore::DataManInfo</innerclass>
    <innerclass refid="classcasacore_1_1ForwardColumn" prot="public">casacore::ForwardColumn</innerclass>
    <innerclass refid="classcasacore_1_1ForwardColumnEngine" prot="public">casacore::ForwardColumnEngine</innerclass>
    <innerclass refid="classcasacore_1_1ForwardColumnIndexedRow" prot="public">casacore::ForwardColumnIndexedRow</innerclass>
    <innerclass refid="classcasacore_1_1ForwardColumnIndexedRowEngine" prot="public">casacore::ForwardColumnIndexedRowEngine</innerclass>
    <innerclass refid="classcasacore_1_1IncrementalStMan" prot="public">casacore::IncrementalStMan</innerclass>
    <innerclass refid="classcasacore_1_1ROIncrementalStManAccessor" prot="public">casacore::ROIncrementalStManAccessor</innerclass>
    <innerclass refid="classcasacore_1_1ISMBase" prot="public">casacore::ISMBase</innerclass>
    <innerclass refid="classcasacore_1_1ISMBucket" prot="public">casacore::ISMBucket</innerclass>
    <innerclass refid="classcasacore_1_1ISMColumn" prot="public">casacore::ISMColumn</innerclass>
    <innerclass refid="classcasacore_1_1ISMIndColumn" prot="public">casacore::ISMIndColumn</innerclass>
    <innerclass refid="classcasacore_1_1ISMIndex" prot="public">casacore::ISMIndex</innerclass>
    <innerclass refid="classcasacore_1_1MappedArrayEngine" prot="public">casacore::MappedArrayEngine</innerclass>
    <innerclass refid="classcasacore_1_1MemoryStMan" prot="public">casacore::MemoryStMan</innerclass>
    <innerclass refid="classcasacore_1_1MSMBase" prot="public">casacore::MSMBase</innerclass>
    <innerclass refid="classcasacore_1_1MSMColumn" prot="public">casacore::MSMColumn</innerclass>
    <innerclass refid="classcasacore_1_1MSMDirColumn" prot="public">casacore::MSMDirColumn</innerclass>
    <innerclass refid="classcasacore_1_1MSMIndColumn" prot="public">casacore::MSMIndColumn</innerclass>
    <innerclass refid="classcasacore_1_1RetypedArrayEngine" prot="public">casacore::RetypedArrayEngine</innerclass>
    <innerclass refid="classcasacore_1_1ScalarColumn" prot="public">casacore::ScalarColumn</innerclass>
    <innerclass refid="classcasacore_1_1ScaledArrayEngine" prot="public">casacore::ScaledArrayEngine</innerclass>
    <innerclass refid="classcasacore_1_1ScaledComplexData" prot="public">casacore::ScaledComplexData</innerclass>
    <innerclass refid="classcasacore_1_1SSMBase" prot="public">casacore::SSMBase</innerclass>
    <innerclass refid="classcasacore_1_1SSMColumn" prot="public">casacore::SSMColumn</innerclass>
    <innerclass refid="classcasacore_1_1SSMDirColumn" prot="public">casacore::SSMDirColumn</innerclass>
    <innerclass refid="classcasacore_1_1SSMIndColumn" prot="public">casacore::SSMIndColumn</innerclass>
    <innerclass refid="classcasacore_1_1SSMIndex" prot="public">casacore::SSMIndex</innerclass>
    <innerclass refid="classcasacore_1_1SSMIndStringColumn" prot="public">casacore::SSMIndStringColumn</innerclass>
    <innerclass refid="classcasacore_1_1SSMStringHandler" prot="public">casacore::SSMStringHandler</innerclass>
    <innerclass refid="classcasacore_1_1StandardStMan" prot="public">casacore::StandardStMan</innerclass>
    <innerclass refid="classcasacore_1_1ROStandardStManAccessor" prot="public">casacore::ROStandardStManAccessor</innerclass>
    <innerclass refid="classcasacore_1_1StManColumnArrayAipsIO" prot="public">casacore::StManColumnArrayAipsIO</innerclass>
    <innerclass refid="classcasacore_1_1StManArrayFile" prot="public">casacore::StManArrayFile</innerclass>
    <innerclass refid="classcasacore_1_1StManColumnIndArrayAipsIO" prot="public">casacore::StManColumnIndArrayAipsIO</innerclass>
    <innerclass refid="classcasacore_1_1StIndArray" prot="public">casacore::StIndArray</innerclass>
    <innerclass refid="classcasacore_1_1StManColumnAipsIO" prot="public">casacore::StManColumnAipsIO</innerclass>
    <innerclass refid="classcasacore_1_1StManAipsIO" prot="public">casacore::StManAipsIO</innerclass>
    <innerclass refid="classcasacore_1_1StManColumn" prot="public">casacore::StManColumn</innerclass>
    <innerclass refid="classcasacore_1_1StManColumnBase" prot="public">casacore::StManColumnBase</innerclass>
    <innerclass refid="classcasacore_1_1TiledCellStMan" prot="public">casacore::TiledCellStMan</innerclass>
    <innerclass refid="classcasacore_1_1TiledColumnStMan" prot="public">casacore::TiledColumnStMan</innerclass>
    <innerclass refid="classcasacore_1_1TiledDataStMan" prot="public">casacore::TiledDataStMan</innerclass>
    <innerclass refid="classcasacore_1_1TiledDataStManAccessor" prot="public">casacore::TiledDataStManAccessor</innerclass>
    <innerclass refid="classcasacore_1_1TiledFileAccess" prot="public">casacore::TiledFileAccess</innerclass>
    <innerclass refid="classcasacore_1_1TiledFileHelper" prot="public">casacore::TiledFileHelper</innerclass>
    <innerclass refid="classcasacore_1_1TiledShapeStMan" prot="public">casacore::TiledShapeStMan</innerclass>
    <innerclass refid="classcasacore_1_1TiledStMan" prot="public">casacore::TiledStMan</innerclass>
    <innerclass refid="classcasacore_1_1ROTiledStManAccessor" prot="public">casacore::ROTiledStManAccessor</innerclass>
    <innerclass refid="classcasacore_1_1TSMColumn" prot="public">casacore::TSMColumn</innerclass>
    <innerclass refid="classcasacore_1_1TSMCoordColumn" prot="public">casacore::TSMCoordColumn</innerclass>
    <innerclass refid="classcasacore_1_1TSMCube" prot="public">casacore::TSMCube</innerclass>
    <innerclass refid="classcasacore_1_1TSMCubeBuff" prot="public">casacore::TSMCubeBuff</innerclass>
    <innerclass refid="classcasacore_1_1TSMCubeMMap" prot="public">casacore::TSMCubeMMap</innerclass>
    <innerclass refid="classcasacore_1_1TSMDataColumn" prot="public">casacore::TSMDataColumn</innerclass>
    <innerclass refid="classcasacore_1_1TSMFile" prot="public">casacore::TSMFile</innerclass>
    <innerclass refid="classcasacore_1_1TSMIdColumn" prot="public">casacore::TSMIdColumn</innerclass>
    <innerclass refid="classcasacore_1_1TSMOption" prot="public">casacore::TSMOption</innerclass>
    <innerclass refid="classcasacore_1_1TSMShape" prot="public">casacore::TSMShape</innerclass>
    <innerclass refid="classcasacore_1_1VACEngine" prot="public">casacore::VACEngine</innerclass>
    <innerclass refid="classcasacore_1_1VirtualArrayColumnBase" prot="public">casacore::VirtualArrayColumnBase</innerclass>
    <innerclass refid="classcasacore_1_1VirtualArrayColumn" prot="public">casacore::VirtualArrayColumn</innerclass>
    <innerclass refid="classcasacore_1_1VirtualColumnEngine" prot="public">casacore::VirtualColumnEngine</innerclass>
    <innerclass refid="classcasacore_1_1VirtualScalarColumnBase" prot="public">casacore::VirtualScalarColumnBase</innerclass>
    <innerclass refid="classcasacore_1_1VirtualScalarColumn" prot="public">casacore::VirtualScalarColumn</innerclass>
    <innerclass refid="classcasacore_1_1VirtualTaQLColumn" prot="public">casacore::VirtualTaQLColumn</innerclass>
    <innerclass refid="classcasacore_1_1VSCEngine" prot="public">casacore::VSCEngine</innerclass>
    <innerclass refid="classcasacore_1_1LogFilterExpr" prot="public">casacore::LogFilterExpr</innerclass>
    <innerclass refid="classcasacore_1_1LogFilterTaql" prot="public">casacore::LogFilterTaql</innerclass>
    <innerclass refid="classcasacore_1_1LoggerHolder" prot="public">casacore::LoggerHolder</innerclass>
    <innerclass refid="classcasacore_1_1LoggerHolderRep" prot="public">casacore::LoggerHolderRep</innerclass>
    <innerclass refid="classcasacore_1_1LogHolderIterEntry" prot="public">casacore::LogHolderIterEntry</innerclass>
    <innerclass refid="classcasacore_1_1LogHolderIter" prot="public">casacore::LogHolderIter</innerclass>
    <innerclass refid="classcasacore_1_1LoggerHolderIterator" prot="public">casacore::LoggerHolderIterator</innerclass>
    <innerclass refid="classcasacore_1_1NewFile" prot="public">casacore::NewFile</innerclass>
    <innerclass refid="classcasacore_1_1TableLogSink" prot="public">casacore::TableLogSink</innerclass>
    <innerclass refid="classcasacore_1_1ArrayColumnBase" prot="public">casacore::ArrayColumnBase</innerclass>
    <innerclass refid="classcasacore_1_1ColumnSlicer" prot="public">casacore::ColumnSlicer</innerclass>
    <innerclass refid="classcasacore_1_1BaseSlicesFunctor" prot="public">casacore::BaseSlicesFunctor</innerclass>
    <innerclass refid="classcasacore_1_1GetCellSlices" prot="public">casacore::GetCellSlices</innerclass>
    <innerclass refid="classcasacore_1_1GetColumnSlices" prot="public">casacore::GetColumnSlices</innerclass>
    <innerclass refid="classcasacore_1_1PutCellSlices" prot="public">casacore::PutCellSlices</innerclass>
    <innerclass refid="classcasacore_1_1PutColumnSlices" prot="public">casacore::PutColumnSlices</innerclass>
    <innerclass refid="classcasacore_1_1ArrayColumnData" prot="public">casacore::ArrayColumnData</innerclass>
    <innerclass refid="classcasacore_1_1ArrayColumnDescBase" prot="public">casacore::ArrayColumnDescBase</innerclass>
    <innerclass refid="classcasacore_1_1ArrayColumnDesc" prot="public">casacore::ArrayColumnDesc</innerclass>
    <innerclass refid="classcasacore_1_1BaseColumnDesc" prot="public">casacore::BaseColumnDesc</innerclass>
    <innerclass refid="classcasacore_1_1BaseColumn" prot="public">casacore::BaseColumn</innerclass>
    <innerclass refid="classcasacore_1_1BaseTableIterator" prot="public">casacore::BaseTableIterator</innerclass>
    <innerclass refid="classcasacore_1_1BaseTable" prot="public">casacore::BaseTable</innerclass>
    <innerclass refid="classcasacore_1_1ColumnDescSet" prot="public">casacore::ColumnDescSet</innerclass>
    <innerclass refid="classcasacore_1_1ColumnCache" prot="public">casacore::ColumnCache</innerclass>
    <innerclass refid="classcasacore_1_1ColumnDesc" prot="public">casacore::ColumnDesc</innerclass>
    <innerclass refid="classcasacore_1_1ColumnSet" prot="public">casacore::ColumnSet</innerclass>
    <innerclass refid="classcasacore_1_1ColumnsIndex" prot="public">casacore::ColumnsIndex</innerclass>
    <innerclass refid="classcasacore_1_1ColumnsIndexArray" prot="public">casacore::ColumnsIndexArray</innerclass>
    <innerclass refid="classcasacore_1_1ConcatColumn" prot="public">casacore::ConcatColumn</innerclass>
    <innerclass refid="classcasacore_1_1ConcatRows" prot="public">casacore::ConcatRows</innerclass>
    <innerclass refid="classcasacore_1_1ConcatRowsIter" prot="public">casacore::ConcatRowsIter</innerclass>
    <innerclass refid="classcasacore_1_1ConcatScalarColumn" prot="public">casacore::ConcatScalarColumn</innerclass>
    <innerclass refid="classcasacore_1_1ConcatTable" prot="public">casacore::ConcatTable</innerclass>
    <innerclass refid="classcasacore_1_1ExternalLockSync" prot="public">casacore::ExternalLockSync</innerclass>
    <innerclass refid="classcasacore_1_1MemoryTable" prot="public">casacore::MemoryTable</innerclass>
    <innerclass refid="classcasacore_1_1NullTable" prot="public">casacore::NullTable</innerclass>
    <innerclass refid="classcasacore_1_1PlainColumn" prot="public">casacore::PlainColumn</innerclass>
    <innerclass refid="classcasacore_1_1PlainTable" prot="public">casacore::PlainTable</innerclass>
    <innerclass refid="classcasacore_1_1ReadAsciiTable" prot="public">casacore::ReadAsciiTable</innerclass>
    <innerclass refid="classcasacore_1_1RefColumn" prot="public">casacore::RefColumn</innerclass>
    <innerclass refid="classcasacore_1_1RefRows" prot="public">casacore::RefRows</innerclass>
    <innerclass refid="classcasacore_1_1RefRowsSliceIter" prot="public">casacore::RefRowsSliceIter</innerclass>
    <innerclass refid="classcasacore_1_1RefTable" prot="public">casacore::RefTable</innerclass>
    <innerclass refid="classcasacore_1_1ColumnHolder" prot="public">casacore::ColumnHolder</innerclass>
    <innerclass refid="classcasacore_1_1RowCopier" prot="public">casacore::RowCopier</innerclass>
    <innerclass refid="classcasacore_1_1RowNumbers" prot="public">casacore::RowNumbers</innerclass>
    <innerclass refid="classcasacore_1_1ScalarColumnDesc" prot="public">casacore::ScalarColumnDesc</innerclass>
    <innerclass refid="classcasacore_1_1ScalarColumnData" prot="public">casacore::ScalarColumnData</innerclass>
    <innerclass refid="classcasacore_1_1ScalarRecordColumnData" prot="public">casacore::ScalarRecordColumnData</innerclass>
    <innerclass refid="classcasacore_1_1ScalarRecordColumnDesc" prot="public">casacore::ScalarRecordColumnDesc</innerclass>
    <innerclass refid="classcasacore_1_1SetupNewTableRep" prot="public">casacore::SetupNewTableRep</innerclass>
    <innerclass refid="classcasacore_1_1SetupNewTable" prot="public">casacore::SetupNewTable</innerclass>
    <innerclass refid="classcasacore_1_1StorageOption" prot="public">casacore::StorageOption</innerclass>
    <innerclass refid="classcasacore_1_1SubTableDesc" prot="public">casacore::SubTableDesc</innerclass>
    <innerclass refid="classcasacore_1_1Table" prot="public">casacore::Table</innerclass>
    <innerclass refid="classcasacore_1_1TableAttr" prot="public">casacore::TableAttr</innerclass>
    <innerclass refid="classcasacore_1_1TableCache" prot="public">casacore::TableCache</innerclass>
    <innerclass refid="classcasacore_1_1TableColumn" prot="public">casacore::TableColumn</innerclass>
    <innerclass refid="classcasacore_1_1TableCopy" prot="public">casacore::TableCopy</innerclass>
    <innerclass refid="classcasacore_1_1TableDesc" prot="public">casacore::TableDesc</innerclass>
    <innerclass refid="classcasacore_1_1TableError" prot="public">casacore::TableError</innerclass>
    <innerclass refid="classcasacore_1_1TableInternalError" prot="public">casacore::TableInternalError</innerclass>
    <innerclass refid="classcasacore_1_1TableDuplFile" prot="public">casacore::TableDuplFile</innerclass>
    <innerclass refid="classcasacore_1_1TableNoFile" prot="public">casacore::TableNoFile</innerclass>
    <innerclass refid="classcasacore_1_1TableDescNoName" prot="public">casacore::TableDescNoName</innerclass>
    <innerclass refid="classcasacore_1_1TableInvOpt" prot="public">casacore::TableInvOpt</innerclass>
    <innerclass refid="classcasacore_1_1TableNoDir" prot="public">casacore::TableNoDir</innerclass>
    <innerclass refid="classcasacore_1_1TableNoDatFile" prot="public">casacore::TableNoDatFile</innerclass>
    <innerclass refid="classcasacore_1_1TableInvType" prot="public">casacore::TableInvType</innerclass>
    <innerclass refid="classcasacore_1_1TableInvColumnDesc" prot="public">casacore::TableInvColumnDesc</innerclass>
    <innerclass refid="classcasacore_1_1TableInvHyperDesc" prot="public">casacore::TableInvHyperDesc</innerclass>
    <innerclass refid="classcasacore_1_1TableUnknownDesc" prot="public">casacore::TableUnknownDesc</innerclass>
    <innerclass refid="classcasacore_1_1TableInvDT" prot="public">casacore::TableInvDT</innerclass>
    <innerclass refid="classcasacore_1_1TableInvOper" prot="public">casacore::TableInvOper</innerclass>
    <innerclass refid="classcasacore_1_1TableArrayConformanceError" prot="public">casacore::TableArrayConformanceError</innerclass>
    <innerclass refid="classcasacore_1_1TableConformanceError" prot="public">casacore::TableConformanceError</innerclass>
    <innerclass refid="classcasacore_1_1TableInvSort" prot="public">casacore::TableInvSort</innerclass>
    <innerclass refid="classcasacore_1_1TableInvLogic" prot="public">casacore::TableInvLogic</innerclass>
    <innerclass refid="classcasacore_1_1TableInvExpr" prot="public">casacore::TableInvExpr</innerclass>
    <innerclass refid="classcasacore_1_1TableVectorNonConform" prot="public">casacore::TableVectorNonConform</innerclass>
    <innerclass refid="classcasacore_1_1TableParseError" prot="public">casacore::TableParseError</innerclass>
    <innerclass refid="classcasacore_1_1TableGramError" prot="public">casacore::TableGramError</innerclass>
    <innerclass refid="classcasacore_1_1TableIndexProxy" prot="public">casacore::TableIndexProxy</innerclass>
    <innerclass refid="classcasacore_1_1TableInfo" prot="public">casacore::TableInfo</innerclass>
    <innerclass refid="classcasacore_1_1TableIterator" prot="public">casacore::TableIterator</innerclass>
    <innerclass refid="classcasacore_1_1TableIterProxy" prot="public">casacore::TableIterProxy</innerclass>
    <innerclass refid="classcasacore_1_1TableKeyword" prot="public">casacore::TableKeyword</innerclass>
    <innerclass refid="classcasacore_1_1TableLock" prot="public">casacore::TableLock</innerclass>
    <innerclass refid="classcasacore_1_1TableLockData" prot="public">casacore::TableLockData</innerclass>
    <innerclass refid="classcasacore_1_1TableLocker" prot="public">casacore::TableLocker</innerclass>
    <innerclass refid="classcasacore_1_1TableProxy" prot="public">casacore::TableProxy</innerclass>
    <innerclass refid="classcasacore_1_1TableRecord" prot="public">casacore::TableRecord</innerclass>
    <innerclass refid="classcasacore_1_1TableRecordRep" prot="public">casacore::TableRecordRep</innerclass>
    <innerclass refid="classcasacore_1_1ROTableRow" prot="public">casacore::ROTableRow</innerclass>
    <innerclass refid="classcasacore_1_1TableRow" prot="public">casacore::TableRow</innerclass>
    <innerclass refid="classcasacore_1_1TableRowProxy" prot="public">casacore::TableRowProxy</innerclass>
    <innerclass refid="classcasacore_1_1TableSyncData" prot="public">casacore::TableSyncData</innerclass>
    <innerclass refid="classcasacore_1_1TableTrace" prot="public">casacore::TableTrace</innerclass>
    <innerclass refid="classcasacore_1_1TableVectorHelper" prot="public">casacore::TableVectorHelper</innerclass>
    <innerclass refid="classcasacore_1_1TableVector" prot="public">casacore::TableVector</innerclass>
    <innerclass refid="classcasacore_1_1TabPath" prot="public">casacore::TabPath</innerclass>
    <innerclass refid="classcasacore_1_1TabVecRep" prot="public">casacore::TabVecRep</innerclass>
    <innerclass refid="classcasacore_1_1TabVecScaCol" prot="public">casacore::TabVecScaCol</innerclass>
    <innerclass refid="classcasacore_1_1TabVecTemp" prot="public">casacore::TabVecTemp</innerclass>
    <innerclass refid="classcasacore_1_1TableExprAggrNode" prot="public">casacore::TableExprAggrNode</innerclass>
    <innerclass refid="classcasacore_1_1TableExprAggrNodeArray" prot="public">casacore::TableExprAggrNodeArray</innerclass>
    <innerclass refid="classcasacore_1_1TableExprConeNode" prot="public">casacore::TableExprConeNode</innerclass>
    <innerclass refid="classcasacore_1_1TableExprConeNodeArray" prot="public">casacore::TableExprConeNodeArray</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstBool" prot="public">casacore::TableExprNodeConstBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstInt" prot="public">casacore::TableExprNodeConstInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstDouble" prot="public">casacore::TableExprNodeConstDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstDComplex" prot="public">casacore::TableExprNodeConstDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstString" prot="public">casacore::TableExprNodeConstString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstRegex" prot="public">casacore::TableExprNodeConstRegex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeConstDate" prot="public">casacore::TableExprNodeConstDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeColumn" prot="public">casacore::TableExprNodeColumn</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeRownr" prot="public">casacore::TableExprNodeRownr</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeRowid" prot="public">casacore::TableExprNodeRowid</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeRandom" prot="public">casacore::TableExprNodeRandom</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayConstBool" prot="public">casacore::TableExprNodeArrayConstBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayConstInt" prot="public">casacore::TableExprNodeArrayConstInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayConstDouble" prot="public">casacore::TableExprNodeArrayConstDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayConstDComplex" prot="public">casacore::TableExprNodeArrayConstDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayConstString" prot="public">casacore::TableExprNodeArrayConstString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayConstDate" prot="public">casacore::TableExprNodeArrayConstDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprFuncNode" prot="public">casacore::TableExprFuncNode</innerclass>
    <innerclass refid="classcasacore_1_1TableExprFuncNodeArray" prot="public">casacore::TableExprFuncNodeArray</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupKey" prot="public">casacore::TableExprGroupKey</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupKeySet" prot="public">casacore::TableExprGroupKeySet</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupResult" prot="public">casacore::TableExprGroupResult</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncBase" prot="public">casacore::TableExprGroupFuncBase</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupNull" prot="public">casacore::TableExprGroupNull</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFirst" prot="public">casacore::TableExprGroupFirst</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupLast" prot="public">casacore::TableExprGroupLast</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupExprId" prot="public">casacore::TableExprGroupExprId</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupRowid" prot="public">casacore::TableExprGroupRowid</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupAggr" prot="public">casacore::TableExprGroupAggr</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncBool" prot="public">casacore::TableExprGroupFuncBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncInt" prot="public">casacore::TableExprGroupFuncInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncDouble" prot="public">casacore::TableExprGroupFuncDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncDComplex" prot="public">casacore::TableExprGroupFuncDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncDate" prot="public">casacore::TableExprGroupFuncDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncString" prot="public">casacore::TableExprGroupFuncString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncArrayBool" prot="public">casacore::TableExprGroupFuncArrayBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncArrayInt" prot="public">casacore::TableExprGroupFuncArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncArrayDouble" prot="public">casacore::TableExprGroupFuncArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncArrayDComplex" prot="public">casacore::TableExprGroupFuncArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncArrayDate" prot="public">casacore::TableExprGroupFuncArrayDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncArrayString" prot="public">casacore::TableExprGroupFuncArrayString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFuncSet" prot="public">casacore::TableExprGroupFuncSet</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupCountAll" prot="public">casacore::TableExprGroupCountAll</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupCount" prot="public">casacore::TableExprGroupCount</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupAny" prot="public">casacore::TableExprGroupAny</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupAll" prot="public">casacore::TableExprGroupAll</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupNTrue" prot="public">casacore::TableExprGroupNTrue</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupNFalse" prot="public">casacore::TableExprGroupNFalse</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMinInt" prot="public">casacore::TableExprGroupMinInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMaxInt" prot="public">casacore::TableExprGroupMaxInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumInt" prot="public">casacore::TableExprGroupSumInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductInt" prot="public">casacore::TableExprGroupProductInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrInt" prot="public">casacore::TableExprGroupSumSqrInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMinDouble" prot="public">casacore::TableExprGroupMinDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMaxDouble" prot="public">casacore::TableExprGroupMaxDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumDouble" prot="public">casacore::TableExprGroupSumDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductDouble" prot="public">casacore::TableExprGroupProductDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrDouble" prot="public">casacore::TableExprGroupSumSqrDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMeanDouble" prot="public">casacore::TableExprGroupMeanDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupVarianceDouble" prot="public">casacore::TableExprGroupVarianceDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupStdDevDouble" prot="public">casacore::TableExprGroupStdDevDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupRmsDouble" prot="public">casacore::TableExprGroupRmsDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFractileDouble" prot="public">casacore::TableExprGroupFractileDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumDComplex" prot="public">casacore::TableExprGroupSumDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductDComplex" prot="public">casacore::TableExprGroupProductDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrDComplex" prot="public">casacore::TableExprGroupSumSqrDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMeanDComplex" prot="public">casacore::TableExprGroupMeanDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupVarianceDComplex" prot="public">casacore::TableExprGroupVarianceDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupStdDevDComplex" prot="public">casacore::TableExprGroupStdDevDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayAny" prot="public">casacore::TableExprGroupArrayAny</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayAll" prot="public">casacore::TableExprGroupArrayAll</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayNTrue" prot="public">casacore::TableExprGroupArrayNTrue</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayNFalse" prot="public">casacore::TableExprGroupArrayNFalse</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMinArrayInt" prot="public">casacore::TableExprGroupMinArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMaxArrayInt" prot="public">casacore::TableExprGroupMaxArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumArrayInt" prot="public">casacore::TableExprGroupSumArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductArrayInt" prot="public">casacore::TableExprGroupProductArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrArrayInt" prot="public">casacore::TableExprGroupSumSqrArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMinArrayDouble" prot="public">casacore::TableExprGroupMinArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMaxArrayDouble" prot="public">casacore::TableExprGroupMaxArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumArrayDouble" prot="public">casacore::TableExprGroupSumArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductArrayDouble" prot="public">casacore::TableExprGroupProductArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrArrayDouble" prot="public">casacore::TableExprGroupSumSqrArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMeanArrayDouble" prot="public">casacore::TableExprGroupMeanArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupVarianceArrayDouble" prot="public">casacore::TableExprGroupVarianceArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupStdDevArrayDouble" prot="public">casacore::TableExprGroupStdDevArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupRmsArrayDouble" prot="public">casacore::TableExprGroupRmsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupFractileArrayDouble" prot="public">casacore::TableExprGroupFractileArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumArrayDComplex" prot="public">casacore::TableExprGroupSumArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductArrayDComplex" prot="public">casacore::TableExprGroupProductArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrArrayDComplex" prot="public">casacore::TableExprGroupSumSqrArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMeanArrayDComplex" prot="public">casacore::TableExprGroupMeanArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupVarianceArrayDComplex" prot="public">casacore::TableExprGroupVarianceArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupStdDevArrayDComplex" prot="public">casacore::TableExprGroupStdDevArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayAnys" prot="public">casacore::TableExprGroupArrayAnys</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayAlls" prot="public">casacore::TableExprGroupArrayAlls</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayNTrues" prot="public">casacore::TableExprGroupArrayNTrues</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupArrayNFalses" prot="public">casacore::TableExprGroupArrayNFalses</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMinsArrayInt" prot="public">casacore::TableExprGroupMinsArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMaxsArrayInt" prot="public">casacore::TableExprGroupMaxsArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumsArrayInt" prot="public">casacore::TableExprGroupSumsArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductsArrayInt" prot="public">casacore::TableExprGroupProductsArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrsArrayInt" prot="public">casacore::TableExprGroupSumSqrsArrayInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMinsArrayDouble" prot="public">casacore::TableExprGroupMinsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMaxsArrayDouble" prot="public">casacore::TableExprGroupMaxsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumsArrayDouble" prot="public">casacore::TableExprGroupSumsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductsArrayDouble" prot="public">casacore::TableExprGroupProductsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrsArrayDouble" prot="public">casacore::TableExprGroupSumSqrsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMeansArrayDouble" prot="public">casacore::TableExprGroupMeansArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupVariancesArrayDouble" prot="public">casacore::TableExprGroupVariancesArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupStdDevsArrayDouble" prot="public">casacore::TableExprGroupStdDevsArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupRmssArrayDouble" prot="public">casacore::TableExprGroupRmssArrayDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumsArrayDComplex" prot="public">casacore::TableExprGroupSumsArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupProductsArrayDComplex" prot="public">casacore::TableExprGroupProductsArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupSumSqrsArrayDComplex" prot="public">casacore::TableExprGroupSumSqrsArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupMeansArrayDComplex" prot="public">casacore::TableExprGroupMeansArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupVariancesArrayDComplex" prot="public">casacore::TableExprGroupVariancesArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupStdDevsArrayDComplex" prot="public">casacore::TableExprGroupStdDevsArrayDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupHistBase" prot="public">casacore::TableExprGroupHistBase</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupHistScalar" prot="public">casacore::TableExprGroupHistScalar</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupHistInt" prot="public">casacore::TableExprGroupHistInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprGroupHistDouble" prot="public">casacore::TableExprGroupHistDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQBool" prot="public">casacore::TableExprNodeEQBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQInt" prot="public">casacore::TableExprNodeEQInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQDouble" prot="public">casacore::TableExprNodeEQDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQDComplex" prot="public">casacore::TableExprNodeEQDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQString" prot="public">casacore::TableExprNodeEQString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQRegex" prot="public">casacore::TableExprNodeEQRegex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeEQDate" prot="public">casacore::TableExprNodeEQDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNEBool" prot="public">casacore::TableExprNodeNEBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNEInt" prot="public">casacore::TableExprNodeNEInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNEDouble" prot="public">casacore::TableExprNodeNEDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNEDComplex" prot="public">casacore::TableExprNodeNEDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNEString" prot="public">casacore::TableExprNodeNEString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNERegex" prot="public">casacore::TableExprNodeNERegex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNEDate" prot="public">casacore::TableExprNodeNEDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGTInt" prot="public">casacore::TableExprNodeGTInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGTDouble" prot="public">casacore::TableExprNodeGTDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGTDComplex" prot="public">casacore::TableExprNodeGTDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGTString" prot="public">casacore::TableExprNodeGTString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGTDate" prot="public">casacore::TableExprNodeGTDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGEInt" prot="public">casacore::TableExprNodeGEInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGEDouble" prot="public">casacore::TableExprNodeGEDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGEDComplex" prot="public">casacore::TableExprNodeGEDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGEString" prot="public">casacore::TableExprNodeGEString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeGEDate" prot="public">casacore::TableExprNodeGEDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeINInt" prot="public">casacore::TableExprNodeINInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeINDouble" prot="public">casacore::TableExprNodeINDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeINDComplex" prot="public">casacore::TableExprNodeINDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeINString" prot="public">casacore::TableExprNodeINString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeINDate" prot="public">casacore::TableExprNodeINDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeOR" prot="public">casacore::TableExprNodeOR</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeAND" prot="public">casacore::TableExprNodeAND</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeNOT" prot="public">casacore::TableExprNodeNOT</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQBool" prot="public">casacore::TableExprNodeArrayEQBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQInt" prot="public">casacore::TableExprNodeArrayEQInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQDouble" prot="public">casacore::TableExprNodeArrayEQDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQDComplex" prot="public">casacore::TableExprNodeArrayEQDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQString" prot="public">casacore::TableExprNodeArrayEQString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQRegex" prot="public">casacore::TableExprNodeArrayEQRegex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayEQDate" prot="public">casacore::TableExprNodeArrayEQDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNEBool" prot="public">casacore::TableExprNodeArrayNEBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNEInt" prot="public">casacore::TableExprNodeArrayNEInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNEDouble" prot="public">casacore::TableExprNodeArrayNEDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNEDComplex" prot="public">casacore::TableExprNodeArrayNEDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNEString" prot="public">casacore::TableExprNodeArrayNEString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNERegex" prot="public">casacore::TableExprNodeArrayNERegex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNEDate" prot="public">casacore::TableExprNodeArrayNEDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGTInt" prot="public">casacore::TableExprNodeArrayGTInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGTDouble" prot="public">casacore::TableExprNodeArrayGTDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGTDComplex" prot="public">casacore::TableExprNodeArrayGTDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGTString" prot="public">casacore::TableExprNodeArrayGTString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGTDate" prot="public">casacore::TableExprNodeArrayGTDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGEInt" prot="public">casacore::TableExprNodeArrayGEInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGEDouble" prot="public">casacore::TableExprNodeArrayGEDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGEDComplex" prot="public">casacore::TableExprNodeArrayGEDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGEString" prot="public">casacore::TableExprNodeArrayGEString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayGEDate" prot="public">casacore::TableExprNodeArrayGEDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayINInt" prot="public">casacore::TableExprNodeArrayINInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayINDouble" prot="public">casacore::TableExprNodeArrayINDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayINDComplex" prot="public">casacore::TableExprNodeArrayINDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayINString" prot="public">casacore::TableExprNodeArrayINString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayINDate" prot="public">casacore::TableExprNodeArrayINDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayOR" prot="public">casacore::TableExprNodeArrayOR</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayAND" prot="public">casacore::TableExprNodeArrayAND</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayNOT" prot="public">casacore::TableExprNodeArrayNOT</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodePlus" prot="public">casacore::TableExprNodePlus</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodePlusInt" prot="public">casacore::TableExprNodePlusInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodePlusDouble" prot="public">casacore::TableExprNodePlusDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodePlusDComplex" prot="public">casacore::TableExprNodePlusDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodePlusString" prot="public">casacore::TableExprNodePlusString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodePlusDate" prot="public">casacore::TableExprNodePlusDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMinus" prot="public">casacore::TableExprNodeMinus</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMinusInt" prot="public">casacore::TableExprNodeMinusInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMinusDouble" prot="public">casacore::TableExprNodeMinusDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMinusDComplex" prot="public">casacore::TableExprNodeMinusDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMinusDate" prot="public">casacore::TableExprNodeMinusDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeTimes" prot="public">casacore::TableExprNodeTimes</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeTimesInt" prot="public">casacore::TableExprNodeTimesInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeTimesDouble" prot="public">casacore::TableExprNodeTimesDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeTimesDComplex" prot="public">casacore::TableExprNodeTimesDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeDivide" prot="public">casacore::TableExprNodeDivide</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeDivideDouble" prot="public">casacore::TableExprNodeDivideDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeDivideDComplex" prot="public">casacore::TableExprNodeDivideDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeModulo" prot="public">casacore::TableExprNodeModulo</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeModuloInt" prot="public">casacore::TableExprNodeModuloInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeModuloDouble" prot="public">casacore::TableExprNodeModuloDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeBitAndInt" prot="public">casacore::TableExprNodeBitAndInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeBitOrInt" prot="public">casacore::TableExprNodeBitOrInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeBitXorInt" prot="public">casacore::TableExprNodeBitXorInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMIN" prot="public">casacore::TableExprNodeMIN</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeBitNegate" prot="public">casacore::TableExprNodeBitNegate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPlus" prot="public">casacore::TableExprNodeArrayPlus</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPlusInt" prot="public">casacore::TableExprNodeArrayPlusInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPlusDouble" prot="public">casacore::TableExprNodeArrayPlusDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPlusDComplex" prot="public">casacore::TableExprNodeArrayPlusDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPlusString" prot="public">casacore::TableExprNodeArrayPlusString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPlusDate" prot="public">casacore::TableExprNodeArrayPlusDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayMinus" prot="public">casacore::TableExprNodeArrayMinus</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayMinusInt" prot="public">casacore::TableExprNodeArrayMinusInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayMinusDouble" prot="public">casacore::TableExprNodeArrayMinusDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayMinusDComplex" prot="public">casacore::TableExprNodeArrayMinusDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayMinusDate" prot="public">casacore::TableExprNodeArrayMinusDate</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayTimes" prot="public">casacore::TableExprNodeArrayTimes</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayTimesInt" prot="public">casacore::TableExprNodeArrayTimesInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayTimesDouble" prot="public">casacore::TableExprNodeArrayTimesDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayTimesDComplex" prot="public">casacore::TableExprNodeArrayTimesDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayDivide" prot="public">casacore::TableExprNodeArrayDivide</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayDivideDouble" prot="public">casacore::TableExprNodeArrayDivideDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayDivideDComplex" prot="public">casacore::TableExprNodeArrayDivideDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayModulo" prot="public">casacore::TableExprNodeArrayModulo</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayModuloInt" prot="public">casacore::TableExprNodeArrayModuloInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayModuloDouble" prot="public">casacore::TableExprNodeArrayModuloDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayBitAndInt" prot="public">casacore::TableExprNodeArrayBitAndInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayBitOrInt" prot="public">casacore::TableExprNodeArrayBitOrInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayBitXorInt" prot="public">casacore::TableExprNodeArrayBitXorInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayMIN" prot="public">casacore::TableExprNodeArrayMIN</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayBitNegate" prot="public">casacore::TableExprNodeArrayBitNegate</innerclass>
    <innerclass refid="classcasacore_1_1MArray" prot="public">casacore::MArray</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNode" prot="public">casacore::TableExprNode</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArray" prot="public">casacore::TableExprNodeArray</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumn" prot="public">casacore::TableExprNodeArrayColumn</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnBool" prot="public">casacore::TableExprNodeArrayColumnBool</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnuChar" prot="public">casacore::TableExprNodeArrayColumnuChar</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnShort" prot="public">casacore::TableExprNodeArrayColumnShort</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnuShort" prot="public">casacore::TableExprNodeArrayColumnuShort</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnInt" prot="public">casacore::TableExprNodeArrayColumnInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnuInt" prot="public">casacore::TableExprNodeArrayColumnuInt</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnInt64" prot="public">casacore::TableExprNodeArrayColumnInt64</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnFloat" prot="public">casacore::TableExprNodeArrayColumnFloat</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnDouble" prot="public">casacore::TableExprNodeArrayColumnDouble</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnComplex" prot="public">casacore::TableExprNodeArrayColumnComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnDComplex" prot="public">casacore::TableExprNodeArrayColumnDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayColumnString" prot="public">casacore::TableExprNodeArrayColumnString</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeIndex" prot="public">casacore::TableExprNodeIndex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayPart" prot="public">casacore::TableExprNodeArrayPart</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeRecordField" prot="public">casacore::TableExprNodeRecordField</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeRecordFieldArray" prot="public">casacore::TableExprNodeRecordFieldArray</innerclass>
    <innerclass refid="classcasacore_1_1TaqlRegex" prot="public">casacore::TaqlRegex</innerclass>
    <innerclass refid="classcasacore_1_1TableExprInfo" prot="public">casacore::TableExprInfo</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeRep" prot="public">casacore::TableExprNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeBinary" prot="public">casacore::TableExprNodeBinary</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeMulti" prot="public">casacore::TableExprNodeMulti</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSet" prot="public">casacore::TableExprNodeSet</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetElemBase" prot="public">casacore::TableExprNodeSetElemBase</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetElemSingle" prot="public">casacore::TableExprNodeSetElemSingle</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetElemDiscrete" prot="public">casacore::TableExprNodeSetElemDiscrete</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetElemCont" prot="public">casacore::TableExprNodeSetElemCont</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetElemMidWidth" prot="public">casacore::TableExprNodeSetElemMidWidth</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetElem" prot="public">casacore::TableExprNodeSetElem</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetOptBase" prot="public">casacore::TableExprNodeSetOptBase</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetOptUSet" prot="public">casacore::TableExprNodeSetOptUSet</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetOptContSetBase" prot="public">casacore::TableExprNodeSetOptContSetBase</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetOptContSetMixOC" prot="public">casacore::TableExprNodeSetOptContSetMixOC</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeSetOptContSet" prot="public">casacore::TableExprNodeSetOptContSet</innerclass>
    <innerclass refid="classcasacore_1_1TableExprRange" prot="public">casacore::TableExprRange</innerclass>
    <innerclass refid="classcasacore_1_1TableExprUDFNode" prot="public">casacore::TableExprUDFNode</innerclass>
    <innerclass refid="classcasacore_1_1TableExprUDFNodeArray" prot="public">casacore::TableExprUDFNodeArray</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeUnit" prot="public">casacore::TableExprNodeUnit</innerclass>
    <innerclass refid="classcasacore_1_1TableExprNodeArrayUnit" prot="public">casacore::TableExprNodeArrayUnit</innerclass>
    <innerclass refid="classcasacore_1_1MArrayBase" prot="public">casacore::MArrayBase</innerclass>
    <innerclass refid="classcasacore_1_1MNTrueFunc" prot="public">casacore::MNTrueFunc</innerclass>
    <innerclass refid="classcasacore_1_1MNFalseFunc" prot="public">casacore::MNFalseFunc</innerclass>
    <innerclass refid="classcasacore_1_1MAllFunc" prot="public">casacore::MAllFunc</innerclass>
    <innerclass refid="classcasacore_1_1MAnyFunc" prot="public">casacore::MAnyFunc</innerclass>
    <innerclass refid="classcasacore_1_1MSumFunc" prot="public">casacore::MSumFunc</innerclass>
    <innerclass refid="classcasacore_1_1MSumSqrFunc" prot="public">casacore::MSumSqrFunc</innerclass>
    <innerclass refid="classcasacore_1_1MProductFunc" prot="public">casacore::MProductFunc</innerclass>
    <innerclass refid="classcasacore_1_1MMinFunc" prot="public">casacore::MMinFunc</innerclass>
    <innerclass refid="classcasacore_1_1MMaxFunc" prot="public">casacore::MMaxFunc</innerclass>
    <innerclass refid="classcasacore_1_1MMeanFunc" prot="public">casacore::MMeanFunc</innerclass>
    <innerclass refid="classcasacore_1_1MVarianceFunc" prot="public">casacore::MVarianceFunc</innerclass>
    <innerclass refid="classcasacore_1_1MStddevFunc" prot="public">casacore::MStddevFunc</innerclass>
    <innerclass refid="classcasacore_1_1MAvdevFunc" prot="public">casacore::MAvdevFunc</innerclass>
    <innerclass refid="classcasacore_1_1MRmsFunc" prot="public">casacore::MRmsFunc</innerclass>
    <innerclass refid="classcasacore_1_1MMedianFunc" prot="public">casacore::MMedianFunc</innerclass>
    <innerclass refid="classcasacore_1_1MFractileFunc" prot="public">casacore::MFractileFunc</innerclass>
    <innerclass refid="classcasacore_1_1MArrayFunctorBase" prot="public">casacore::MArrayFunctorBase</innerclass>
    <innerclass refid="classcasacore_1_1RecordGramVal" prot="public">casacore::RecordGramVal</innerclass>
    <innerclass refid="classcasacore_1_1RecordGram" prot="public">casacore::RecordGram</innerclass>
    <innerclass refid="classcasacore_1_1TableExprData" prot="public">casacore::TableExprData</innerclass>
    <innerclass refid="classcasacore_1_1TableExprId" prot="public">casacore::TableExprId</innerclass>
    <innerclass refid="classcasacore_1_1TableExprIdAggr" prot="public">casacore::TableExprIdAggr</innerclass>
    <innerclass refid="classcasacore_1_1TableGramState" prot="public">casacore::TableGramState</innerclass>
    <innerclass refid="classcasacore_1_1TableParseFunc" prot="public">casacore::TableParseFunc</innerclass>
    <innerclass refid="classcasacore_1_1TableParseGroupby" prot="public">casacore::TableParseGroupby</innerclass>
    <innerclass refid="classcasacore_1_1TableParseJoin" prot="public">casacore::TableParseJoin</innerclass>
    <innerclass refid="classcasacore_1_1TableParseProject" prot="public">casacore::TableParseProject</innerclass>
    <innerclass refid="classcasacore_1_1TableParseQuery" prot="public">casacore::TableParseQuery</innerclass>
    <innerclass refid="classcasacore_1_1TableParseSortKey" prot="public">casacore::TableParseSortKey</innerclass>
    <innerclass refid="classcasacore_1_1TableParsePair" prot="public">casacore::TableParsePair</innerclass>
    <innerclass refid="classcasacore_1_1TableParseTableList" prot="public">casacore::TableParseTableList</innerclass>
    <innerclass refid="classcasacore_1_1TableParseUpdate" prot="public">casacore::TableParseUpdate</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinBase" prot="public">casacore::TaQLJoinBase</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinRow" prot="public">casacore::TaQLJoinRow</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoin" prot="public">casacore::TaQLJoin</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumn" prot="public">casacore::TaQLJoinColumn</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumnBool" prot="public">casacore::TaQLJoinColumnBool</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumnInt" prot="public">casacore::TaQLJoinColumnInt</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumnDouble" prot="public">casacore::TaQLJoinColumnDouble</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumnDComplex" prot="public">casacore::TaQLJoinColumnDComplex</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumnString" prot="public">casacore::TaQLJoinColumnString</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinColumnDate" prot="public">casacore::TaQLJoinColumnDate</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinRowid" prot="public">casacore::TaQLJoinRowid</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNode" prot="public">casacore::TaQLNode</innerclass>
    <innerclass refid="classcasacore_1_1TaQLConstNode" prot="public">casacore::TaQLConstNode</innerclass>
    <innerclass refid="classcasacore_1_1TaQLRegexNode" prot="public">casacore::TaQLRegexNode</innerclass>
    <innerclass refid="classcasacore_1_1TaQLMultiNode" prot="public">casacore::TaQLMultiNode</innerclass>
    <innerclass refid="classcasacore_1_1TaQLQueryNode" prot="public">casacore::TaQLQueryNode</innerclass>
    <innerclass refid="classcasacore_1_1TaQLConstNodeRep" prot="public">casacore::TaQLConstNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLRegexNodeRep" prot="public">casacore::TaQLRegexNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLUnaryNodeRep" prot="public">casacore::TaQLUnaryNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLBinaryNodeRep" prot="public">casacore::TaQLBinaryNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLMultiNodeRep" prot="public">casacore::TaQLMultiNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLFuncNodeRep" prot="public">casacore::TaQLFuncNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLRangeNodeRep" prot="public">casacore::TaQLRangeNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLIndexNodeRep" prot="public">casacore::TaQLIndexNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLJoinNodeRep" prot="public">casacore::TaQLJoinNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLKeyColNodeRep" prot="public">casacore::TaQLKeyColNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLTableNodeRep" prot="public">casacore::TaQLTableNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLColNodeRep" prot="public">casacore::TaQLColNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLColumnsNodeRep" prot="public">casacore::TaQLColumnsNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLGroupNodeRep" prot="public">casacore::TaQLGroupNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLSortKeyNodeRep" prot="public">casacore::TaQLSortKeyNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLSortNodeRep" prot="public">casacore::TaQLSortNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLLimitOffNodeRep" prot="public">casacore::TaQLLimitOffNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLGivingNodeRep" prot="public">casacore::TaQLGivingNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLUpdExprNodeRep" prot="public">casacore::TaQLUpdExprNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLQueryNodeRep" prot="public">casacore::TaQLQueryNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLSelectNodeRep" prot="public">casacore::TaQLSelectNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLCountNodeRep" prot="public">casacore::TaQLCountNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLUpdateNodeRep" prot="public">casacore::TaQLUpdateNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLInsertNodeRep" prot="public">casacore::TaQLInsertNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLDeleteNodeRep" prot="public">casacore::TaQLDeleteNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLCalcNodeRep" prot="public">casacore::TaQLCalcNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLCreTabNodeRep" prot="public">casacore::TaQLCreTabNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLColSpecNodeRep" prot="public">casacore::TaQLColSpecNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLRecFldNodeRep" prot="public">casacore::TaQLRecFldNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLUnitNodeRep" prot="public">casacore::TaQLUnitNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLAltTabNodeRep" prot="public">casacore::TaQLAltTabNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLAddColNodeRep" prot="public">casacore::TaQLAddColNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLRenDropNodeRep" prot="public">casacore::TaQLRenDropNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLSetKeyNodeRep" prot="public">casacore::TaQLSetKeyNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLAddRowNodeRep" prot="public">casacore::TaQLAddRowNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLConcTabNodeRep" prot="public">casacore::TaQLConcTabNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLShowNodeRep" prot="public">casacore::TaQLShowNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLCopyColNodeRep" prot="public">casacore::TaQLCopyColNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLDropTabNodeRep" prot="public">casacore::TaQLDropTabNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNodeHandler" prot="public">casacore::TaQLNodeHandler</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNodeHRValue" prot="public">casacore::TaQLNodeHRValue</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNodeRep" prot="public">casacore::TaQLNodeRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNodeResultRep" prot="public">casacore::TaQLNodeResultRep</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNodeResult" prot="public">casacore::TaQLNodeResult</innerclass>
    <innerclass refid="classcasacore_1_1TaQLNodeVisitor" prot="public">casacore::TaQLNodeVisitor</innerclass>
    <innerclass refid="classcasacore_1_1TaQLResult" prot="public">casacore::TaQLResult</innerclass>
    <innerclass refid="classcasacore_1_1TaQLShow" prot="public">casacore::TaQLShow</innerclass>
    <innerclass refid="classcasacore_1_1TaQLStyle" prot="public">casacore::TaQLStyle</innerclass>
    <innerclass refid="classcasacore_1_1UDFBase" prot="public">casacore::UDFBase</innerclass>
    <innernamespace refid="namespacecasacore_1_1anonymous__namespace_02ArrayAccessor_8h_03">casacore::anonymous_namespace{ArrayAccessor.h}</innernamespace>
    <innernamespace refid="namespacecasacore_1_1arrays__internal">casacore::arrays_internal</innernamespace>
    <innernamespace refid="namespacecasacore_1_1C">casacore::C</innernamespace>
    <innernamespace refid="namespacecasacore_1_1OMP">casacore::OMP</innernamespace>
    <innernamespace refid="namespacecasacore_1_1TableExprNodeUtil">casacore::TableExprNodeUtil</innernamespace>
    <innernamespace refid="namespacecasacore_1_1TableParseUtil">casacore::TableParseUtil</innernamespace>
    <innernamespace refid="namespacecasacore_1_1TableUtil">casacore::TableUtil</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecasacore_1a44401e80192e152e570fc445a95f534b" prot="public" static="no" strong="no">
        <type></type>
        <name>StorageInitPolicy</name>
        <enumvalue id="namespacecasacore_1a44401e80192e152e570fc445a95f534ba46b2e4579af5e1f449bb55cfd9f1c9bc" prot="public">
          <name>COPY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a44401e80192e152e570fc445a95f534babd142c8c0fe4378c955bf07646a218de" prot="public">
          <name>TAKE_OVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a44401e80192e152e570fc445a95f534baa5086a1c53c26d47ae8e78207aea8853" prot="public">
          <name>SHARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayBase.h" line="49" column="1" bodyfile="casa/Arrays/ArrayBase.h" bodystart="49" bodyend="60"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" prot="public" static="no" strong="no">
        <type></type>
        <name>DataType</name>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea0b72fdd532d056dd2aff397230f83be1" prot="public">
          <name>TpBool</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea080087f08b8efb3d46074ebe6c6e4e07" prot="public">
          <name>TpChar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea8bd6db3fbdcb486ea833bc9d25e77d2b" prot="public">
          <name>TpUChar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eaf80d546d948ec68fdac6977754ecde42" prot="public">
          <name>TpShort</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea58b314c66360bc358f7338d65c65c2e2" prot="public">
          <name>TpUShort</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea519d721cfe3ef7be2e3dac59a625ab18" prot="public">
          <name>TpInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea5b4c4b242d96e0196e52a5527ae53b5b" prot="public">
          <name>TpUInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea86b6553e8354f25adf756d89867f6767" prot="public">
          <name>TpFloat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea50ae9c4fb3e089a5a00adba46418d6d7" prot="public">
          <name>TpDouble</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eaec8d99bea4059578d411bd3217602e98" prot="public">
          <name>TpComplex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea1d19eb5fa0382d68603226b40a79432b" prot="public">
          <name>TpDComplex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eae0f4fb8cdd6f070981795d84a3a13b8f" prot="public">
          <name>TpString</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea684370e047c7876af81bf9c61f38a9b1" prot="public">
          <name>TpTable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea38ac683646e55a317821e40b9f73a12c" prot="public">
          <name>TpArrayBool</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eab8a64a77b0c03b28e5a35f9d681b1f53" prot="public">
          <name>TpArrayChar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eab90349fe525c03f0aaf57c3c8111094d" prot="public">
          <name>TpArrayUChar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea0346f64a0f6aef0dc8cbb04c4dd0f22c" prot="public">
          <name>TpArrayShort</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eadc9acf35f198d7b632ca08eb5465a9ad" prot="public">
          <name>TpArrayUShort</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea086f939735da476227a36680bd77c336" prot="public">
          <name>TpArrayInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea1faf766635b681cbf146d9787241c52b" prot="public">
          <name>TpArrayUInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea3815ab3f3a439e032500d6289691f35f" prot="public">
          <name>TpArrayFloat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eaab734a80756d1b31b6ff98ab88445aa4" prot="public">
          <name>TpArrayDouble</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea0c4a76e9bb71a7eafbadb6725315118e" prot="public">
          <name>TpArrayComplex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea1de2f8f18e19b1623bf148e556388ce9" prot="public">
          <name>TpArrayDComplex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eaaaf45136613f301b94b716e1b68dc38e" prot="public">
          <name>TpArrayString</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea98be781f35763031ba7c551ffd12b2d1" prot="public">
          <name>TpRecord</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea276737e35a353890fa1241eec57756d1" prot="public">
          <name>TpOther</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea50fb653b42bfa854650a67cca949042d" prot="public">
          <name>TpQuantity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea3609363c13ca082fce6bc38ce3e5b552" prot="public">
          <name>TpArrayQuantity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220eab5e224392d88368e60d2baa3579e5d3a" prot="public">
          <name>TpInt64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea953833a5af90e428dfe68ecc74e6c016" prot="public">
          <name>TpArrayInt64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a81df62ade83d72ba450271cdc021220ea2fb7306e14c5a31448beafebb7bd183f" prot="public">
          <name>TpNumberOfTypes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.h" line="139" column="1" bodyfile="casa/Utilities/DataType.h" bodystart="139" bodyend="156"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecasacore_1a722a171b0dd4139709b6f63beab79722" prot="public" static="no" strong="no">
        <type></type>
        <name>TabVecTag</name>
        <enumvalue id="namespacecasacore_1a722a171b0dd4139709b6f63beab79722ae905348be2b5e4c793a32922781c334d" prot="public">
          <name>TagScaCol</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecasacore_1a722a171b0dd4139709b6f63beab79722a0e6ea29a923e6d91fa8c93337cc00c09" prot="public">
          <name>TagTemp</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVec.h" line="48" column="1" bodyfile="tables/Tables/TVec.h" bodystart="48" bodyend="53"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" prot="public" static="no">
        <type>bool</type>
        <definition>typedef bool casacore::Bool</definition>
        <argsstring></argsstring>
        <name>Bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="40" column="14" bodyfile="casa/aipstype.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" prot="public" static="no">
        <type>char</type>
        <definition>typedef char casacore::Char</definition>
        <argsstring></argsstring>
        <name>Char</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="44" column="14" bodyfile="casa/aipstype.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char casacore::uChar</definition>
        <argsstring></argsstring>
        <name>uChar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="45" column="23" bodyfile="casa/aipstype.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" prot="public" static="no">
        <type>short</type>
        <definition>typedef short casacore::Short</definition>
        <argsstring></argsstring>
        <name>Short</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="46" column="15" bodyfile="casa/aipstype.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short casacore::uShort</definition>
        <argsstring></argsstring>
        <name>uShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="47" column="24" bodyfile="casa/aipstype.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" prot="public" static="no">
        <type>int</type>
        <definition>typedef int casacore::Int</definition>
        <argsstring></argsstring>
        <name>Int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="48" column="13" bodyfile="casa/aipstype.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int casacore::uInt</definition>
        <argsstring></argsstring>
        <name>uInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="49" column="22" bodyfile="casa/aipstype.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a3cc4166cd269a99ae91967979b7ff953" prot="public" static="no">
        <type>long</type>
        <definition>typedef long casacore::Long</definition>
        <argsstring></argsstring>
        <name>Long</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="50" column="14" bodyfile="casa/aipstype.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a2c44acc8a1ccc720c5d3010bf5125db0" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long casacore::uLong</definition>
        <argsstring></argsstring>
        <name>uLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="51" column="23" bodyfile="casa/aipstype.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" prot="public" static="no">
        <type>float</type>
        <definition>typedef float casacore::Float</definition>
        <argsstring></argsstring>
        <name>Float</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="52" column="15" bodyfile="casa/aipstype.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" prot="public" static="no">
        <type>double</type>
        <definition>typedef double casacore::Double</definition>
        <argsstring></argsstring>
        <name>Double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="53" column="16" bodyfile="casa/aipstype.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1afb6905dc43b864ee27070c0232c1497e" prot="public" static="no">
        <type>long double</type>
        <definition>typedef long double casacore::lDouble</definition>
        <argsstring></argsstring>
        <name>lDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="54" column="21" bodyfile="casa/aipstype.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" prot="public" static="no">
        <type>long long</type>
        <definition>typedef long long casacore::Int64</definition>
        <argsstring></argsstring>
        <name>Int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipsxtype.h" line="36" column="19" bodyfile="casa/aipsxtype.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>typedef unsigned long long casacore::uInt64</definition>
        <argsstring></argsstring>
        <name>uInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipsxtype.h" line="37" column="28" bodyfile="casa/aipsxtype.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a7307be2df571dda5f75890b371c435e8" prot="public" static="no">
        <type>int</type>
        <definition>typedef int casacore::FitsLong</definition>
        <argsstring></argsstring>
        <name>FitsLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipsxtype.h" line="41" column="13" bodyfile="casa/aipsxtype.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1aee1c00a44176a614b010746741ae16a9" prot="public" static="no">
        <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>typedef uInt64 casacore::rownr_t</definition>
        <argsstring></argsstring>
        <name>rownr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipsxtype.h" line="44" column="16" bodyfile="casa/aipsxtype.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ae083715d82601deaf9ad549ddfc57f84" prot="public" static="no">
        <type>bool</type>
        <definition>typedef bool casacore::LogicalArrayElem</definition>
        <argsstring></argsstring>
        <name>LogicalArrayElem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayFwd.h" line="12" column="14" bodyfile="casa/Arrays/ArrayFwd.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" prot="public" static="no">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ae083715d82601deaf9ad549ddfc57f84" kindref="member">LogicalArrayElem</ref> &gt;</type>
        <definition>typedef Array&lt;LogicalArrayElem&gt; casacore::LogicalArray</definition>
        <argsstring></argsstring>
        <name>LogicalArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayFwd.h" line="13" column="15" bodyfile="casa/Arrays/ArrayFwd.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" prot="public" static="no">
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; <ref refid="namespacecasacore_1ae083715d82601deaf9ad549ddfc57f84" kindref="member">LogicalArrayElem</ref> &gt;</type>
        <definition>typedef MaskedArray&lt; LogicalArrayElem &gt; casacore::MaskedLogicalArray</definition>
        <argsstring></argsstring>
        <name>MaskedLogicalArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayFwd.h" line="15" column="21" bodyfile="casa/Arrays/ArrayFwd.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ab8aef732d340435f855d305935d743b8" prot="public" static="no">
        <type><ref refid="classcasacore_1_1Cube" kindref="compound">Cube</ref>&lt; <ref refid="namespacecasacore_1ae083715d82601deaf9ad549ddfc57f84" kindref="member">LogicalArrayElem</ref> &gt;</type>
        <definition>typedef Cube&lt;LogicalArrayElem&gt; casacore::LogicalCube</definition>
        <argsstring></argsstring>
        <name>LogicalCube</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/LogiCube.h" line="72" column="14" bodyfile="casa/Arrays/LogiCube.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a2d05577da87e16702c081b8a078f3162" prot="public" static="no">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="namespacecasacore_1ae083715d82601deaf9ad549ddfc57f84" kindref="member">LogicalArrayElem</ref> &gt;</type>
        <definition>typedef Matrix&lt;LogicalArrayElem&gt; casacore::LogicalMatrix</definition>
        <argsstring></argsstring>
        <name>LogicalMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/LogiMatrix.h" line="72" column="16" bodyfile="casa/Arrays/LogiMatrix.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a1cb9268ee17c898d60ce98188eeb5f0c" prot="public" static="no">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ae083715d82601deaf9ad549ddfc57f84" kindref="member">LogicalArrayElem</ref> &gt;</type>
        <definition>typedef Vector&lt;LogicalArrayElem&gt; casacore::LogicalVector</definition>
        <argsstring></argsstring>
        <name>LogicalVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/LogiVector.h" line="72" column="16" bodyfile="casa/Arrays/LogiVector.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" prot="public" static="no">
        <type>std::complex&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>typedef std::complex&lt;Float&gt; casacore::Complex</definition>
        <argsstring></argsstring>
        <name>Complex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complexfwd.h" line="47" column="23" bodyfile="casa/BasicSL/Complexfwd.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" prot="public" static="no">
        <type>std::complex&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>typedef std::complex&lt;Double&gt; casacore::DComplex</definition>
        <argsstring></argsstring>
        <name>DComplex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complexfwd.h" line="48" column="22" bodyfile="casa/BasicSL/Complexfwd.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1aa74d1fede2e82cc65b56edde1aa76e60" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::allocator&lt; T &gt;</type>
        <definition>using casacore::std11_allocator = typedef std::allocator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>std11_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Allocator.h" line="75" column="1" bodyfile="casa/Containers/Allocator.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a8a0b94d76f2ebc412309eca15b7224d3" prot="public" static="no">
        <type>char *(*</type>
        <definition>typedef char*(* casacore::BucketCacheToLocal) (void *ownerObject, const char *canonical)</definition>
        <argsstring>)(void *ownerObject, const char *canonical)</argsstring>
        <name>BucketCacheToLocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/BucketCache.h" line="87" column="9" bodyfile="casa/IO/BucketCache.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a68e87366fbec9e82d4511f72c520e15b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* casacore::BucketCacheFromLocal) (void *ownerObject, char *canonical, const char *local)</definition>
        <argsstring>)(void *ownerObject, char *canonical, const char *local)</argsstring>
        <name>BucketCacheFromLocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/BucketCache.h" line="88" column="9" bodyfile="casa/IO/BucketCache.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1aa198809aa27ea8372a8884fd9bf31c75" prot="public" static="no">
        <type>char *(*</type>
        <definition>typedef char*(* casacore::BucketCacheAddBuffer) (void *ownerObject)</definition>
        <argsstring>)(void *ownerObject)</argsstring>
        <name>BucketCacheAddBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/BucketCache.h" line="90" column="9" bodyfile="casa/IO/BucketCache.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1afc5377c1e5f2227ab469a843432c617f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* casacore::BucketCacheDeleteBuffer) (void *ownerObject, char *buffer)</definition>
        <argsstring>)(void *ownerObject, char *buffer)</argsstring>
        <name>BucketCacheDeleteBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/BucketCache.h" line="91" column="9" bodyfile="casa/IO/BucketCache.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ad5429fefc00b65ab7ddb394a0e3fa410" prot="public" static="no">
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>typedef Quantum&lt;Double&gt; casacore::Quantity</definition>
        <argsstring></argsstring>
        <name>Quantity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/Quantum.h" line="39" column="17" bodyfile="casa/Quanta/Quantum.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a76017ac62ace773f15aef6b1bfa8d25d" prot="public" static="no">
        <type><ref refid="classcasacore_1_1QVector" kindref="compound">QVector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>typedef QVector&lt;Double&gt; casacore::QVD</definition>
        <argsstring></argsstring>
        <name>QVD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QVector.h" line="37" column="17" bodyfile="casa/Quanta/QVector.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a0c64b46a93ec65f1c851114f90012947" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcValue" kindref="compound">AipsrcValue</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>typedef AipsrcValue&lt;Double&gt; casacore::AipsrcDouble</definition>
        <argsstring></argsstring>
        <name>AipsrcDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="44" column="21" bodyfile="casa/System/Aipsrc.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a41dfc64d9100d63998fe1fa9b87bb38e" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcValue" kindref="compound">AipsrcValue</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt;</type>
        <definition>typedef AipsrcValue&lt;Int&gt; casacore::AipsrcInt</definition>
        <argsstring></argsstring>
        <name>AipsrcInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="45" column="21" bodyfile="casa/System/Aipsrc.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a14e3250b83389fc6e4386f4958d3044d" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcValue" kindref="compound">AipsrcValue</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>typedef AipsrcValue&lt;Bool&gt; casacore::AipsrcBool</definition>
        <argsstring></argsstring>
        <name>AipsrcBool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="46" column="21" bodyfile="casa/System/Aipsrc.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1afdbe876f0c239ab24c113bfd1861d962" prot="public" static="no">
        <type><ref refid="classcasacore_1_1Aipsrc" kindref="compound">Aipsrc</ref></type>
        <definition>typedef Aipsrc casacore::AipsrcString</definition>
        <argsstring></argsstring>
        <name>AipsrcString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="47" column="16" bodyfile="casa/System/Aipsrc.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1aa1b27ac91cc8e396168c350961a0501a" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcVector" kindref="compound">AipsrcVector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>typedef AipsrcVector&lt;Double&gt; casacore::AipsrcVDouble</definition>
        <argsstring></argsstring>
        <name>AipsrcVDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="48" column="22" bodyfile="casa/System/Aipsrc.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a845f2d72f815c821221e4cb010c4b91c" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcVector" kindref="compound">AipsrcVector</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt;</type>
        <definition>typedef AipsrcVector&lt;Int&gt; casacore::AipsrcVInt</definition>
        <argsstring></argsstring>
        <name>AipsrcVInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="49" column="22" bodyfile="casa/System/Aipsrc.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a16f172ecf8f6d3e9748a8173caf66ede" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcVector" kindref="compound">AipsrcVector</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>typedef AipsrcVector&lt;Bool&gt; casacore::AipsrcVBool</definition>
        <argsstring></argsstring>
        <name>AipsrcVBool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="50" column="22" bodyfile="casa/System/Aipsrc.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ae46ab1f62144748ed163f72dd9603232" prot="public" static="no">
        <type><ref refid="classcasacore_1_1AipsrcVector" kindref="compound">AipsrcVector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt;</type>
        <definition>typedef AipsrcVector&lt;String&gt; casacore::AipsrcVString</definition>
        <argsstring></argsstring>
        <name>AipsrcVString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Aipsrc.h" line="51" column="22" bodyfile="casa/System/Aipsrc.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a04ff0beb08513c5321c6ef4fe651856e" prot="public" static="no">
        <type>int</type>
        <definition>typedef int casacore::ObjCompareFunc(const void *, const void *)</definition>
        <argsstring>(const void *, const void *)</argsstring>
        <name>ObjCompareFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Compare.h" line="48" column="13" bodyfile="casa/Utilities/Compare.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ae6361287ea05813d3a244e9904e1e90c" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* casacore::GPT) (int, char *)</definition>
        <argsstring>)(int, char *)</argsstring>
        <name>GPT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/generic.h" line="52" column="9" bodyfile="casa/Utilities/generic.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a20bb8c6afd6ef5f8970f95cea3f4c3eb" prot="public" static="no">
        <type><ref refid="classcasacore_1_1DataManager" kindref="compound">DataManager</ref> *(*</type>
        <definition>typedef DataManager*(* casacore::DataManagerCtor) (const String &amp;dataManagerType, const Record &amp;spec)</definition>
        <argsstring>)(const String &amp;dataManagerType, const Record &amp;spec)</argsstring>
        <name>DataManagerCtor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/DataManager.h" line="69" column="9" bodyfile="tables/DataMan/DataManager.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1a4946b5bb6e3dd06ea36bb6b03f544b88" prot="public" static="no">
        <type><ref refid="classcasacore_1_1TableColumn" kindref="compound">TableColumn</ref></type>
        <definition>typedef TableColumn casacore::ROTableColumn</definition>
        <argsstring></argsstring>
        <name>ROTableColumn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TableColumn.h" line="410" column="21" bodyfile="tables/Tables/TableColumn.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1aa815a14d0f8f37331312c9db29bf31d9" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classcasacore_1_1TableExprNodeRep" kindref="compound">TableExprNodeRep</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;TableExprNodeRep&gt; casacore::TENShPtr</definition>
        <argsstring></argsstring>
        <name>TENShPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNodeRep.h" line="55" column="25" bodyfile="tables/TaQL/ExprNodeRep.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecasacore_1ab04d983c8ee782cdc980e4aea819384c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classcasacore_1_1TableExprNodeSetElemBase" kindref="compound">TableExprNodeSetElemBase</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;TableExprNodeSetElemBase&gt; casacore::TENSEBShPtr</definition>
        <argsstring></argsstring>
        <name>TENSEBShPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNodeSetElem.h" line="42" column="27" bodyfile="tables/TaQL/ExprNodeSetElem.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecasacore_1abedba2c06fdc94b8e34fdc3831f6216c" prot="public" static="no" mutable="no">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::aips_debug_on</definition>
        <argsstring></argsstring>
        <name>aips_debug_on</name>
        <initializer>= <ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aips.cc" line="33" column="6" bodyfile="casa/aips.cc" bodystart="33" bodyend="-1" declfile="casa/aipsdef.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>const Bool casacore::True</definition>
        <argsstring></argsstring>
        <name>True</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="41" column="12" bodyfile="casa/aipstype.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>const Bool casacore::False</definition>
        <argsstring></argsstring>
        <name>False</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/aipstype.h" line="42" column="12" bodyfile="casa/aipstype.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a4a4ca7a9b90c9b989efdfc815f399f9e" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::MINSIZE</definition>
        <argsstring></argsstring>
        <name>MINSIZE</name>
        <initializer>= 31</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Primes.cc" line="34" column="12" bodyfile="casa/BasicMath/Primes.cc" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a701afbc28c4f4fbc614c89c5a4743a7f" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::randomStateTable[][3]</definition>
        <argsstring>[][3]</argsstring>
        <name>randomStateTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Random.cc" line="162" column="12" bodyfile="casa/BasicMath/Random.cc" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a2a055c0c494dcf2927e1437f695062be" prot="public" static="no" mutable="no">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::randomPermutations[RANDOM_PERM_SIZE]</definition>
        <argsstring>[RANDOM_PERM_SIZE]</argsstring>
        <name>randomPermutations</name>
        <initializer>= {
0xffffffff, 0x00000000,  0x00000000,  0x00000000,  
0x0000ffff, 0x00ff0000,  0x00000000,  0xff000000,  
0xff0000ff, 0x0000ff00,  0x00000000,  0x00ff0000,  
0x00ff00ff, 0x00000000,  0xff00ff00,  0x00000000,  

0xffff0000, 0x000000ff,  0x00000000,  0x0000ff00,  
0x00000000, 0x00ff00ff,  0x00000000,  0xff00ff00,  
0xff000000, 0x00000000,  0x000000ff,  0x00ffff00,  
0x00000000, 0x00000000,  0x00000000,  0xffffffff,  

0xff00ff00, 0x00000000,  0x00ff00ff,  0x00000000,  
0x0000ff00, 0x00000000,  0x00ff0000,  0xff0000ff,  
0x00000000, 0x00000000,  0xffffffff,  0x00000000,  
0x00000000, 0x0000ff00,  0xffff0000,  0x000000ff,  

0x00000000, 0xffffffff,  0x00000000,  0x00000000,  
0x00ffff00, 0xff000000,  0x00000000,  0x000000ff,  
0x00000000, 0xff000000,  0x0000ffff,  0x00ff0000,  
0x00000000, 0xff00ff00,  0x00000000,  0x00ff00ff   
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Random.cc" line="197" column="6" bodyfile="casa/BasicMath/Random.cc" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a158a33db3e7aefd1f0dbedd9bf430949" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::seedTable[SEED_TABLE_SIZE]</definition>
        <argsstring>[SEED_TABLE_SIZE]</argsstring>
        <name>seedTable</name>
        <initializer>= {
  0xbdcc47e5, 0x54aea45d, 0xec0df859, 0xda84637b,
  0xc8c6cb4f, 0x35574b01, 0x28260b7d, 0x0d07fdbf,
  0x9faaeeb0, 0x613dd169, 0x5ce2d818, 0x85b9e706,
  0xab2469db, 0xda02b0dc, 0x45c60d6e, 0xffe49d10,
  0x7224fea3, 0xf9684fc9, 0xfc7ee074, 0x326ce92a,
  0x366d13b5, 0x17aaa731, 0xeb83a675, 0x7781cb32,
  0x4ec7c92d, 0x7f187521, 0x2cf346b4, 0xad13310f,
  0xb89cff2b, 0x12164de1, 0xa865168d, 0x32b56cdf
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Random.cc" line="221" column="13" bodyfile="casa/BasicMath/Random.cc" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a54de3a3f6b0ae1a8c2256979b4603c3b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::LC_A</definition>
        <argsstring></argsstring>
        <name>LC_A</name>
        <initializer>= 66049</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Random.cc" line="239" column="19" bodyfile="casa/BasicMath/Random.cc" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a82012a2470067e85420d924db4a4df59" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::LC_C</definition>
        <argsstring></argsstring>
        <name>LC_C</name>
        <initializer>= 3907864577u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Random.cc" line="240" column="19" bodyfile="casa/BasicMath/Random.cc" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aba912095729f2fe5fe90006d657b7d52" prot="public" static="yes" mutable="no">
        <type><ref refid="structcasacore_1_1SourceLocation" kindref="compound">SourceLocation</ref></type>
        <definition>SourceLocation casacore::permanent</definition>
        <argsstring></argsstring>
        <name>permanent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogOrigin.cc" line="229" column="23" bodyfile="casa/Logging/LogOrigin.cc" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a78df098f1bf840340b9d8e835ce83500" prot="public" static="no" mutable="no">
        <type></type>
        <definition>casacore::SIZE_CAN_USHORT</definition>
        <argsstring></argsstring>
        <name>SIZE_CAN_USHORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="198" column="3" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1af89a662d370cc1d12fe1acab9185db95" prot="public" static="no" mutable="no">
        <type></type>
        <definition>casacore::toLocalUShort</definition>
        <argsstring></argsstring>
        <name>toLocalUShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="199" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a2934a2b45786ea0c9ebe96aaa0589e30" prot="public" static="no" mutable="no">
        <type></type>
        <definition>casacore::fromLocalUShort</definition>
        <argsstring></argsstring>
        <name>fromLocalUShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="199" column="15" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a361622e2caeefe940fa589e7cfcbbaf5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>casacore::byteToLocalUShort</definition>
        <argsstring></argsstring>
        <name>byteToLocalUShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="200" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1acfa7a309383d353c60db6c7f408f0852" prot="public" static="no" mutable="no">
        <type></type>
        <definition>casacore::byteFromLocalUShort</definition>
        <argsstring></argsstring>
        <name>byteFromLocalUShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="200" column="19" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a7003b50b3aeddb283225f5e290878e6a" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short casacore::SIZE_CAN_UINT</definition>
        <argsstring></argsstring>
        <name>SIZE_CAN_UINT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="204" column="5" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a061bbd628ea80bb50b7fe8896b22742c" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short casacore::toLocalUInt</definition>
        <argsstring></argsstring>
        <name>toLocalUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="205" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a58a0e7068626f8abc9c3c85a5aaa59de" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short casacore::fromLocalUInt</definition>
        <argsstring></argsstring>
        <name>fromLocalUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="205" column="15" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a1375673efd4972aa385641c8686bf479" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short casacore::byteToLocalUInt</definition>
        <argsstring></argsstring>
        <name>byteToLocalUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="206" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1af216081decfd2e331bfbae75de2550b5" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short casacore::byteFromLocalUInt</definition>
        <argsstring></argsstring>
        <name>byteFromLocalUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="206" column="19" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a482f953ee5ca1a2176377d1a3727f7e6" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::SIZE_CAN_UINT64</definition>
        <argsstring></argsstring>
        <name>SIZE_CAN_UINT64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="210" column="3" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a56820cd9cfb578a5c179e8d5a66273ba" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::toLocalUInt64</definition>
        <argsstring></argsstring>
        <name>toLocalUInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="211" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a470b3da32780613630848f2d49ce9ce0" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::fromLocalUInt64</definition>
        <argsstring></argsstring>
        <name>fromLocalUInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="211" column="15" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aedabf746152f57aa70529a50989eef8e" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::byteToLocalUInt64</definition>
        <argsstring></argsstring>
        <name>byteToLocalUInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="212" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a266daae662bc22f4944cdf636778d20a" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::byteFromLocalUInt64</definition>
        <argsstring></argsstring>
        <name>byteFromLocalUInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="212" column="19" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aa21e513e1ff000552a3db947cc1ea078" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::SIZE_CAN_DOUBLE</definition>
        <argsstring></argsstring>
        <name>SIZE_CAN_DOUBLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="216" column="3" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a1ebecf9dcc711de2db35544e2a939014" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::toLocalDouble</definition>
        <argsstring></argsstring>
        <name>toLocalDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="217" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a3d9f836f4ce1632ccc5bcb3501ee4a04" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::fromLocalDouble</definition>
        <argsstring></argsstring>
        <name>fromLocalDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="217" column="15" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ac1db98b6a79d1450f59ba2480908977c" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::byteToLocalDouble</definition>
        <argsstring></argsstring>
        <name>byteToLocalDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="218" column="1" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a51ac316ab7e93c8e12e8ca9083cd5e4b" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::byteFromLocalDouble</definition>
        <argsstring></argsstring>
        <name>byteFromLocalDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="218" column="19" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aa5a77d3b1a67970824f32fe8d7f7bbdc" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char casacore::fromEBCDIC[256]</definition>
        <argsstring>[256]</argsstring>
        <name>fromEBCDIC</name>
        <initializer>= {
    0  ,1  ,2  ,3  ,0  ,9  ,0  ,127,0  ,0  ,0  ,11,12,13,14,15,
    16 ,17 ,18 ,0  ,0  ,0  ,8  ,0  ,24 ,25 ,0  ,0 ,28,29,30,31,
    0  ,0  ,28 ,0  ,0  ,10 ,23 ,27 ,0  ,0  ,0  ,0 ,0 ,5 ,6 ,7 ,
    0  ,0  ,24 ,0  ,0  ,30 ,0  ,4  ,0  ,0  ,0  ,19,20,21,0 ,26,
    32 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,46,60,40,43,124,
    38 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,33 ,36,42,41,59,94,
    45 ,47 ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,124,44,37,95,62,63,
    0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,96 ,58 ,35,64,39,61,34,
    0  ,97 ,98 ,99 ,100,101,102,103,104,105,0  ,0 ,0 ,0 ,0 ,0 ,
    0  ,106,107,108,109,110,111,112,113,114,0  ,0 ,0 ,0 ,0 ,0 ,
    0  ,126,115,116,117,118,119,120,121,122,0  ,0 ,0 ,0 ,0 ,0 ,
    0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0 ,0 ,0 ,0 ,0 ,
    123,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,0  ,0 ,0 ,0 ,0 ,0 ,
    125,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,0  ,0 ,0 ,0 ,0 ,0 ,
    92 ,0  ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,0  ,0 ,0 ,0 ,0 ,0 ,
    48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,124,0 ,0 ,0 ,0 ,0
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/IBMConversion.cc" line="34" column="13" bodyfile="casa/OS/IBMConversion.cc" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a1ad17784a1788393629651ea545b5803" prot="public" static="yes" mutable="no">
        <type>signed char</type>
        <definition>signed char casacore::toEBCDIC[128]</definition>
        <argsstring>[128]</argsstring>
        <name>toEBCDIC</name>
        <initializer>= {
       0,   1,   2,   3,  55,  45,  46,  47,
      22,   5,  37,  11,  12,  13,  14,  15,
      16,  17,  18,  59,  60,  61,  50,  38,
      24,  25,  63,  39,  28,  29,  30,  31,
      64,  90, 127, 123,  91, 108,  80, 125,
      77,  93,  92,  78, 107,  96,  75,  97,
     -26, -25, -24, -23, -22, -21, -20, -19,
     -18, -17, 122,  94,  76, 126, 110, 111,
     124, -63, -62, -61, -60, -59, -58, -57,
     -56, -55, -47, -46, -45, -44, -43, -42,
     -41, -40, -39, -30, -29, -28, -27, -26,
     -25, -24, -23, -64, -32, -48,  95, 109,
     121,-127,-126,-125,-124,-123,-122,-121,
    -120,-119,-111,-110,-109,-108,-107,-106,
    -105,-104,-103, -94, -93, -92, -91, -90,
     -89, -88, -87, -86,  -6, -48, -95,   7
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/IBMConversion.cc" line="53" column="20" bodyfile="casa/OS/IBMConversion.cc" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a99de4a4f299ce0d1743bca01e4897777" prot="public" static="no" mutable="no">
        <type></type>
        <definition>casacore::SIZE_LECAN_USHORT</definition>
        <argsstring></argsstring>
        <name>SIZE_LECAN_USHORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="198" column="3" bodyfile="casa/OS/LECanonicalConversion.cc" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a231fbaf0f3cef556915f33ccfe9c2571" prot="public" static="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short casacore::SIZE_LECAN_UINT</definition>
        <argsstring></argsstring>
        <name>SIZE_LECAN_UINT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="205" column="5" bodyfile="casa/OS/LECanonicalConversion.cc" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a0f20806fd3509e90f3c82602dcc1eb35" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::SIZE_LECAN_UINT64</definition>
        <argsstring></argsstring>
        <name>SIZE_LECAN_UINT64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="211" column="3" bodyfile="casa/OS/LECanonicalConversion.cc" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a395d798aaa0cca703028683e3c43501d" prot="public" static="no" mutable="no">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::SIZE_LECAN_DOUBLE</definition>
        <argsstring></argsstring>
        <name>SIZE_LECAN_DOUBLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="217" column="3" bodyfile="casa/OS/LECanonicalConversion.cc" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a9827aa404304748c8ece8e216247ccd9" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::pathmax_posix</definition>
        <argsstring></argsstring>
        <name>pathmax_posix</name>
        <initializer>= 255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Path.cc" line="51" column="12" bodyfile="casa/OS/Path.cc" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a7ad0c15493ee24ab5dd78c3f6c849478" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::pathMax</definition>
        <argsstring></argsstring>
        <name>pathMax</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Path.cc" line="59" column="13" bodyfile="casa/OS/Path.cc" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1af0236dba2109de1240f328b04c4c8ef1" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::PATH_MAX_GUESS</definition>
        <argsstring></argsstring>
        <name>PATH_MAX_GUESS</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Path.cc" line="62" column="12" bodyfile="casa/OS/Path.cc" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a35cc422152d364a7c19ea2fec73f3e0c" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::namemax_posix</definition>
        <argsstring></argsstring>
        <name>namemax_posix</name>
        <initializer>= 14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Path.cc" line="70" column="12" bodyfile="casa/OS/Path.cc" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a503d122032b76c395416e30888977d4a" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::nameMax</definition>
        <argsstring></argsstring>
        <name>nameMax</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Path.cc" line="78" column="13" bodyfile="casa/OS/Path.cc" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a5d901a865e944e2ac0bfb5f095224ffa" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::NAME_MAX_GUESS</definition>
        <argsstring></argsstring>
        <name>NAME_MAX_GUESS</name>
        <initializer>= 255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Path.cc" line="81" column="12" bodyfile="casa/OS/Path.cc" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ab530bab9dae725229cff2fcc06cee232" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>const Double casacore::IAU_k</definition>
        <argsstring></argsstring>
        <name>IAU_k</name>
        <initializer>=0.01720209895</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitMap.h" line="71" column="14" bodyfile="casa/Quanta/UnitMap.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ac5e29758873c74df19a9d5b3b51f033d" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::N_FITS</definition>
        <argsstring></argsstring>
        <name>N_FITS</name>
        <initializer>= 19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitMap.h" line="74" column="12" bodyfile="casa/Quanta/UnitMap.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a1e2f37990cca0e84b234ccd9216cbc1f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>const Double casacore::IAU_tauA</definition>
        <argsstring></argsstring>
        <name>IAU_tauA</name>
        <initializer>=499.0047837</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitMap4.cc" line="35" column="21" bodyfile="casa/Quanta/UnitMap4.cc" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a9d011ea2f0b32337cc0ed36ea60ba6fa" prot="public" static="yes" mutable="no">
        <type>class casacore::UnitVal_static_initializer</type>
        <definition>class casacore::UnitVal_static_initializer casacore::unitval_static_initializer</definition>
        <argsstring></argsstring>
        <name>unitval_static_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitVal.h" line="325" column="28"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a7043db4bbd1c18edfc497eb4c1f648f0" prot="public" static="yes" mutable="no">
        <type>class casacore::CasarcCleanup</type>
        <definition>class casacore::CasarcCleanup casacore::local_cleanup_object</definition>
        <argsstring></argsstring>
        <name>local_cleanup_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Casarc.h" line="151" column="26"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a91d6222bf4c9eaf1038476f37910fe17" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>Block&lt;Double&gt; casacore::stderr_min</definition>
        <argsstring></argsstring>
        <name>stderr_min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="47" column="14" bodyfile="casa/System/ProgressMeter.cc" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a57f6ffbed8f821086eb19e01c377a57f" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>Block&lt;Double&gt; casacore::stderr_max</definition>
        <argsstring></argsstring>
        <name>stderr_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="47" column="25" bodyfile="casa/System/ProgressMeter.cc" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a43addb9906d44cf4fbf293ba1f429ad9" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>Block&lt;Double&gt; casacore::stderr_last</definition>
        <argsstring></argsstring>
        <name>stderr_last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="47" column="36" bodyfile="casa/System/ProgressMeter.cc" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a123b917facd9b8a2117979470afb8d2f" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt;</type>
        <definition>Block&lt;String&gt; casacore::stderr_title</definition>
        <argsstring></argsstring>
        <name>stderr_title</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="48" column="14" bodyfile="casa/System/ProgressMeter.cc" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ab2ceb94e0bfb7ce8441cba9af466a059" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt;</type>
        <definition>Block&lt;Int&gt; casacore::stderr_time</definition>
        <argsstring></argsstring>
        <name>stderr_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="49" column="14" bodyfile="casa/System/ProgressMeter.cc" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1abd94dc2478f053b58f502354d7f81e5b" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>Block&lt;Bool&gt; casacore::stderr_startflag</definition>
        <argsstring></argsstring>
        <name>stderr_startflag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="50" column="14" bodyfile="casa/System/ProgressMeter.cc" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aa4b41ba5ab6d508a9842a57654099bc4" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>const uInt casacore::WORDSIZE</definition>
        <argsstring></argsstring>
        <name>WORDSIZE</name>
        <initializer>= sizeof(<ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref>)*8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/BitVector.h" line="41" column="12" bodyfile="casa/Utilities/BitVector.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a2f1c02828aa4033016dd68f77d80582b" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXwhite</definition>
        <argsstring>(&quot;[ \n\t\r\v\f]+&quot;)</argsstring>
        <name>RXwhite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="539" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="304" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="304" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a9c6c8d10ab4a29d563f302dc473c2acc" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXint</definition>
        <argsstring>(&quot;[-+]?[0-9]+&quot;)</argsstring>
        <name>RXint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="540" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="305" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="305" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a9e8cd20395e01781c1cb5956eb8540d1" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXdouble</definition>
        <argsstring>(&quot;[-+]?(([0-9]+\\.[0-9]*)|([0-9]+)|(\\.[0-9]+))([eE][+-]?[0-9]+)?&quot;)</argsstring>
        <name>RXdouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="541" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="306" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="306" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a90cafa74d1fd91b2f669836f047ef92d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXalpha</definition>
        <argsstring>(&quot;[A-Za-z]+&quot;)</argsstring>
        <name>RXalpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="542" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="309" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="309" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ab9f42bf8163d5438a3aac06813102a04" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXlowercase</definition>
        <argsstring>(&quot;[a-z]+&quot;)</argsstring>
        <name>RXlowercase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="543" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="310" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="310" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a2ad58eb0c102dd5a4ed2b9b772e6c371" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXuppercase</definition>
        <argsstring>(&quot;[A-Z]+&quot;)</argsstring>
        <name>RXuppercase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="544" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="311" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="311" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a1a3696b82946af0fce1beface850b8e2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXalphanum</definition>
        <argsstring>(&quot;[0-9A-Za-z]+&quot;)</argsstring>
        <name>RXalphanum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="545" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="312" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="312" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aaa8a27d40b79f20f01a00c8e713d6d06" prot="public" static="no" mutable="no">
        <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref></type>
        <definition>const Regex casacore::RXidentifier</definition>
        <argsstring>(&quot;[A-Za-z_][A-Za-z0-9_]*&quot;)</argsstring>
        <name>RXidentifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="546" column="13" bodyfile="casa/Utilities/Regex.h" bodystart="313" bodyend="-1" declfile="casa/Utilities/Regex.h" declline="313" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1abe7810787a939a92824247ec76befe61" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Record" kindref="compound">Record</ref></type>
        <definition>Record casacore::emptyRecord</definition>
        <argsstring></argsstring>
        <name>emptyRecord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/TiledColumnStMan.cc" line="46" column="15" bodyfile="tables/DataMan/TiledColumnStMan.cc" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1abe7810787a939a92824247ec76befe61" prot="public" static="yes" mutable="no">
        <type><ref refid="classcasacore_1_1Record" kindref="compound">Record</ref></type>
        <definition>Record casacore::emptyRecord</definition>
        <argsstring></argsstring>
        <name>emptyRecord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/TiledShapeStMan.cc" line="45" column="15" bodyfile="tables/DataMan/TiledShapeStMan.cc" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ae7932a5a3adf083ec48be53e6e18d19e" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>const Int casacore::lineSize</definition>
        <argsstring></argsstring>
        <name>lineSize</name>
        <initializer>= 32768</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="56" column="11" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1afa69b13b4fe5d51df76d027ed085a9bc" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>const String casacore::theHyperPrefix(&quot;Hypercolumn_&quot;)</definition>
        <argsstring>(&quot;Hypercolumn_&quot;)</argsstring>
        <name>theHyperPrefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TableDesc.cc" line="44" column="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a200c29808bb12e069e8895da6f1ff83c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::strpRecordGram</definition>
        <argsstring></argsstring>
        <name>strpRecordGram</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.cc" line="75" column="20" bodyfile="tables/TaQL/RecordGram.cc" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a10503341c7afaa04acbac640a1b65fc4" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::posRecordGram</definition>
        <argsstring></argsstring>
        <name>posRecordGram</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.cc" line="76" column="21" bodyfile="tables/TaQL/RecordGram.cc" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aadfa3565287a42d4602e007ace2d1c09" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::strpTableGram</definition>
        <argsstring></argsstring>
        <name>strpTableGram</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="71" column="20" bodyfile="tables/TaQL/TableGram.cc" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ae0438625c22b6c27032d8dd1b249f5fa" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::posTableGram</definition>
        <argsstring></argsstring>
        <name>posTableGram</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="72" column="21" bodyfile="tables/TaQL/TableGram.cc" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a7be136bbadeef8aa57f2d40bf56289c7" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::infoHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>infoHelp</name>
        <initializer>= {
    &quot;Possible <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref>/help commands:&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> table tablename              table information (a la showtableinfo)&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> command(s) [command]         TaQL commands and their syntax&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> expr(essions)                how to form an expression&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> oper(ators)                  available operators&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> sets                         how to specify sets and intervals&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> const(ants)                  how to specify constant scalars and arrays&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> datatypes     (or dtype)     supported data types and their names&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> tableoptions  (or tabopt)    possible options on table creation&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> dminfo                       how to specify datamanager info&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> functions [type] [subtype]   available functions&quot;,
    &quot;       possible types: math, logical, conv(ersion), <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>, string&quot;,
    &quot;                       <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>, reduce, astro, misc, aggr(egate)&quot;,
    &quot;                name of UDF libraries (e.g., <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> functions mscal)&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> meastypes [type]             available measure types&quot;,
    &quot;       possible types: pos(ition), epoch, dir(ection), earthmagnetic (em),&quot;,
    &quot;                       freq(uency), radialvelocity (radvel), doppler&quot;,
    &quot;  <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> units [kind]                 available units and/or prefixes&quot;,
    &quot;       possible kinds: prefix, length, <ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref>, angle, temperature,&quot;,
    &quot;                       current, intensity, molar, mass, solidangle&quot;,
    &quot;       If a unit is given as kind, <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> corresponding units are shown.&quot;,
    &quot;       Note that TaQL can convert between ANGLE and TIME.&quot;,
    &quot;&quot;,
    &quot;A command can be followed by ; and/or by #anycomment (that are ignored).&quot;,
    &quot;See http://casacore.github.io/casacore-notes/199.html for a full&quot;,
    &quot;description of TaQL.&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="56" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a55b334a996667d91a8b89d1f7a1636a8" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::tableHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>tableHelp</name>
        <initializer>= {
    &quot;Usage:   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> table tablename [opt1 opt2 ...]&quot;,
    &quot;    <ref refid="structOptions" kindref="compound">Options</ref>   Default&quot;,
    &quot;         dm      nodm   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> data managers?&quot;,
    &quot;        col       col   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> column descriptions?&quot;,
    &quot;       sort    nosort   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> columns alphabetically?&quot;,
    &quot;        key     nokey   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> table and column keywords?&quot;,
    &quot;     tabkey  notabkey   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> table keywords?&quot;,
    &quot;     colkey  nocolkey   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> column keywords?&quot;,
    &quot;      recur   norecur   <ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> subtables recursively?&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="85" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ad1b8d3b07a9fd68215ec4b666184fd5a" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::commandHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>commandHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="97" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aea9eebdc79eebd802f08893788220766" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::selectHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>selectHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="148" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ac36975e8045a6fd2a4a019846094cb8c" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::calcHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>calcHelp</name>
        <initializer>= {
    &quot; [WITH table_list]&quot;,
    &quot;CALC expression [FROM table_list]&quot;,
    &quot;&quot;,
    &quot;This command evaluates the given expression, which can contain columns from&quot;,
    &quot;the given tables. It is basically the same as&quot;,
    &quot;  SELECT expression [FROM table_list]&quot;,
    &quot;but does not create an output table as SELECT always does.&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="270" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a833cc0c561fe32eed989e15608f4a895" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::updateHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>updateHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="280" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a789ca5a88e83ce7d2bf17a5e11a8b238" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::insertHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>insertHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="321" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a548dc224be091027cc215d8aac324298" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::deleteHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>deleteHelp</name>
        <initializer>= {
    &quot; [WITH table_list]&quot;,
    &quot;DELETE FROM table_list&quot;,
    &quot;  [<ref refid="LogOrigin_8h_1acd4a2dee55f5359c0389baab37c2f468" kindref="member">WHERE</ref> ...] [ORDERBY ...] [LIMIT ...] [OFFSET ...]&quot;,
    &quot;&quot;,
    &quot;table_list&quot;,
    &quot;  Rows matching the selection criteria are removed from the first table&quot;,
    &quot;  in the table_list. More tables can be given to be used in expressions.&quot;,
    &quot;&quot;,
    &quot;<ref refid="LogOrigin_8h_1acd4a2dee55f5359c0389baab37c2f468" kindref="member">WHERE</ref>, ORDERBY, LIMIT, OFFSET&quot;,
    &quot;  Only rows matching these selection criteria are removed.&quot;,
    &quot;  See &apos;help command select&apos; for a brief description of these clauses.&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="356" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ac87a9562c3b192c26f6fb20e63de0800" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::createHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>createHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="370" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aad678454bf948d3308cce3d5c2ae0189" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::alterHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>alterHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="421" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a9fca3008b3f28142ce7daf2427e790c4" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::countHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>countHelp</name>
        <initializer>= {
    &quot; [WITH table_list]&quot;,
    &quot;COUNT [column_list] FROM table_list [<ref refid="LogOrigin_8h_1acd4a2dee55f5359c0389baab37c2f468" kindref="member">WHERE</ref> expression]&quot;,
    &quot;&quot;,
    &quot;After having done the <ref refid="LogOrigin_8h_1acd4a2dee55f5359c0389baab37c2f468" kindref="member">WHERE</ref> selection, it counts the number of rows&quot;,
    &quot;in the first table for each group formed by the columns in the list.&quot;,
    &quot;It creates a table with the columns in the column list and the column&quot;,
    &quot;_COUNT_ containing the number of rows in each group.&quot;,
    &quot;&quot;,
    &quot;  COUNT col1,col2 FROM my.ms <ref refid="LogOrigin_8h_1acd4a2dee55f5359c0389baab37c2f468" kindref="member">WHERE</ref> expression&quot;,
    &quot;is the same as&quot;,
    &quot;  SELECT col1,col2,gcount() as _COUNT_ FROM my.ms&quot;,
    &quot;  <ref refid="LogOrigin_8h_1acd4a2dee55f5359c0389baab37c2f468" kindref="member">WHERE</ref> expression GROUPBY col1,col2&quot;,
    &quot;&quot;,
    &quot;SELECT/GROUPBY is much more powerful, but the COUNT command can still be used.&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="469" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a44cfd178e53845cd975fd83b4a868c37" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::exprHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>exprHelp</name>
        <initializer>= {
    &quot;A TaQL expression can use scalar and/or arrays (as in numpy).&quot;,
    &quot;The following elements can be used:&quot;,
    &quot;  operators         see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> oper(ators)&apos;&quot;,
    &quot;  functions         see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> func(tions)&apos;&quot;,
    &quot;  constants         see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> const(ants)&apos;&quot;,
    &quot;                    (scalar and arrays of various data types)&quot;,
    &quot;  sets/intervals    see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> sets&apos;&quot;,
    &quot;  units             see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> units&apos;&quot;,
    &quot;  columns           see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> table &lt;tablename&gt;&apos;&quot;,
    &quot;  keywords          see &apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> table &lt;tablename&gt; tabkey colkey&apos;&quot;,
    &quot;&quot;,
    &quot;- A unit can be given after each (sub)expression; if needed conversion is done.&quot;,
    &quot;  For example:   (1e9Hz + 1GHz)MHz     results in 2000 MHz&quot;,
    &quot;- Columns and keywords can be taken from <ref refid="namespacecasacore_1a818171d299e1f0091e47d04131f07842" kindref="member">any</ref> table given in a TaQL command&quot;,
    &quot;  by preceding their names with a table shorthand (e.g., t0.DATA)&quot;,
    &quot;- A keyword can be a table keyword or a column keyword (e.g., col::key)&quot;,
    &quot;  Nested keywords can be used (e.g., col::key.subkey.fld)&quot;,
    &quot;- In the HAVING and ORDERBY clause an expression can use a column&quot;,
    &quot;  created in the SELECT clause.&quot;,
    &quot;- Aggregate functions are only possible in the SELECT and HAVING clause.&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="486" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a07c3450d1f5b92406a99b58be5137644" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::operHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>operHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="509" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a85d8d84b909d6c94d933f599e44e8917" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::constHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>constHelp</name>
        <initializer>= {
    &quot;Scalar constants of following data types:&quot;,
    &quot;  bool       TRUE or FALSE (case-insensitive), T or F&quot;,
    &quot;  int        <ref refid="namespacecasacore_1aaf8875c5845d8fee6983509e9e2f5f35" kindref="member">integer</ref>; also hexadecimal like 0xffff&quot;,
    &quot;  double     12.  12e5  3.2e-5  etc.&quot;,
    &quot;             value followed by a unit like 10m or 10.5sec&quot;,
    &quot;             position/<ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> in HMS or DMS like 2h13m44.5 or 30d13m44.4&quot;,
    &quot;               results in double with unit rad&quot;,
    &quot;  complex    add imaginary part like  1+2i  or  3 - 5j&quot;,
    &quot;  string     enclose in single or double quotes; concatenation like &apos;ab&apos;\&quot;cd\&quot;&quot;,
    &quot;  datetime   <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>/<ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> like 3Mar16/12:14:23.3 or 2016-03-02/1:4:23&quot;,
    &quot;               - or space can be used instead of /&quot;,
    &quot;  <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>      p/globpattern/ or f/<ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>/ or m/<ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>/ (same as f/.*regex.*/)&quot;,
    &quot;               used with operator ~ or !~&quot;,
    &quot;               % or @ can also be used as <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref> delimiter&quot;,
    &quot;&quot;,
    &quot;N-dim <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref> of those data types (except <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>) like:&quot;,
    &quot;             [1,2,3] (1-dim)  or  [[1,2,3],[4,5e3,6]] (2-dim)&quot;,
    &quot;          or using function ARRAY&quot;,
    &quot;&quot;,
    &quot;Masked <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref> (<ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref> value <ref refid="namespacecasacore_1a29f3de51f6dc2cd5cf0f7f70c5f50662" kindref="member">means</ref> bad (as in numpy)):&quot;,
    &quot;             <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>[mask]  such as  [1,2,3][[T,F,T]]&quot;,
    &quot;          or using function MARRAY&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="550" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a2f1e4f7aec9c054c5d04a56ccc822214" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::dtypeHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>dtypeHelp</name>
        <initializer>= {
    &quot;Internally TaQL supports the data types bool, int64, double, dcomplex,&quot;,
    &quot;string, <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref> and datetime.&quot;,
    &quot;&apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> constants&apos; shows how to define constants for those types.&quot;,
    &quot;&quot;,
    &quot;There is more choice for the data type of a table column.&quot;,
    &quot;When creating a table (using e.g. the SELECT or CREATE TABLE command), the&quot;,
    &quot;data types of the columns can be defined using one of the following words.&quot;,
    &quot;&quot;,
    &quot;      B          BOOL       BOOLEAN&quot;,
    &quot;      U1         UCHAR      BYTE&quot;,
    &quot;      I2         SHORT      SMALLINT&quot;,
    &quot;      U2   UI2   USHORT     USMALLINT&quot;,
    &quot;      I4         INT        INTEGER&quot;,
    &quot;      U4   UI4   UINT       UINTEGER&quot;,
    &quot;      I8         LONG       BIGINT&quot;,
    &quot;      R4   FLT   FLOAT&quot;,
    &quot;      R8   DBL   DOUBLE&quot;,
    &quot;      C4   FC    FCOMPLEX   COMPLEX&quot;,
    &quot;      C8   DC    DCOMPLEX&quot;,
    &quot;      S          STRING&quot;,
    &quot;      EPOCH&quot;,
    &quot;&quot;,
    &quot;EPOCH can be used for a <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref> value. It uses a column with data type&quot;,
    &quot;double and sets the column keywords defining the Measure type MEpoch.&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="575" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a99588ef395190de38aea83768749f6c5" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::taboptHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>taboptHelp</name>
        <initializer>= {
    &quot;One or more of the following key=value options can be used to specify&quot;,
    &quot;how a table has to be created. If multiple options are given, they have&quot;,
    &quot;to be enclosed in <ref refid="namespacecasacore_1a8dd1bae2626176b371eb553595306774" kindref="member">square</ref> brackets separated by commas.&quot;,
    &quot;&quot;,
    &quot;  TYPE=&apos;value&apos; specifies the table type.&quot;,
    &quot;    PLAIN   = make a persistent table, thus a true copy of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref>&quot;,
    &quot;              selected rows/columns.&quot;,
    &quot;    SCRATCH = as plain, but only as a temporary table.&quot;,
    &quot;    MEMORY  = as plain, but keep everything in memory.&quot;,
    &quot;&quot;,
    &quot;  ENDIAN=&apos;value&apos; specifies the endianness.&quot;,
    &quot;    BIG    = big endian&quot;,
    &quot;    LITTLE = little endian&quot;,
    &quot;    LOCAL  = native endianness of the machine being used&quot;,
    &quot;    AIPSRC = as defined in the .casarc file (usually defaults to LOCAL)&quot;,
    &quot;  If ENDIAN is not given, it defaults to AIPSRC.&quot;,
    &quot;&quot;,
    &quot;  STORAGE=&apos;value&apos; specifies the storage type.&quot;,
    &quot;    SEPFILE   = store as separate files (the old Casacore table format)&quot;,
    &quot;    MULTIFILE = combine <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> storage manager files into a single file&quot;,
    &quot;    MULTIHDF5 = as MULTIFILE, but use HDF5 instead of a regular file&quot;,
    &quot;    DEFAULT   = use SEPFILE (might change in a future Casacore version)&quot;,
    &quot;    AIPSRC    = as defined in the .casarc file (usually defaults to DEFAULT)&quot;,
    &quot;  If STORAGE is not given, it defaults to AIPSRC.&quot;,
    &quot;&quot;,
    &quot;  BLOCKSIZE=n   the blocksize (in bytes) to use for MULTIFILE or MULTIHDF5&quot;,
    &quot;&quot;,
    &quot;  OVERWRITE=T|F overwrite an existing table? Default is T&quot;
      }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="602" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1adbe204040d8d82e327bcb9c5836de2f1" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::dminfoHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>dminfoHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="633" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a3b2cd79c491ffbe2c76270c21b8924ba" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::setHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>setHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="668" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a969c0eef78b77e40cb9b59f6020cc519" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::allFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>allFuncHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="703" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1ae27a6afed7c7f7d6edbf01bf6879b36d" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::mathFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>mathFuncHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="752" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a122591d0297b450994638b350bfb92c4" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::convFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>convFuncHelp</name>
        <initializer>= {
    &quot;Conversion functions&quot;,
    &quot;&quot;,
    &quot;  string HMS       (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref> RAD)    convert angles to e.g. 12h34m56.789&quot;,
    &quot;  string DMS       (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref> RAD)    convert angles to e.g. 12d34m56.789&quot;,
    &quot;  string HDMS      (realarray)   convert angles alternately to HMS and DMS&quot;,
    &quot;  string STR       (string, int WIDTH)    make string WIDTH long&quot;,
    &quot;  string STR       (numeric, )    make string WIDTH long&quot;,
    &quot;  string STR       (string, int WIDTH)    make string WIDTH long&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="786" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aba4d734ebcf1b8ac3e95014daf29d341" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::logicalFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>logicalFuncHelp</name>
        <initializer>= {
    &quot;Logical functions&quot;,
    &quot;&quot;,
    &quot;  bool    NEAR      (numeric, numeric, double tol)    relative <ref refid="namespacecasacore_1a0ef2489b302c373f7780762742c11b57" kindref="member">near</ref>&quot;,
    &quot;  bool    NEARABS   (numeric, numeric, double tol)    absolute <ref refid="namespacecasacore_1a0ef2489b302c373f7780762742c11b57" kindref="member">near</ref>&quot;,
    &quot;&quot;,
    &quot;  bool    ISNAN     (numeric val)       is value Not-a-Number?&quot;,
    &quot;  bool    ISINF     (numeric val)       is value infinite?&quot;,
    &quot;  bool    ISFINITE  (numeric val)       is value finite?&quot;,
    &quot;  bool    ISNULL    (anytype)           is <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref> a null <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>?&quot;,
    &quot;  bool    ISDEFINED (anytype)           contains row a value?&quot;,
    &quot;  bool  t.ISCOLUMN  (string)            does keyword exist in table?&quot;,
    &quot;  bool  t.ISKEYWORD (string)            does keyword exist in table?&quot;,
    &quot;&quot;,
    &quot;  numeric MIN (numeric, numeric)&quot;,
    &quot;  numeric MAX (numeric, numeric)&quot;,
    &quot;  anytype IIF (bool cond, arg1, arg2)   arg1 if cond is <ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref>, else arg2&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="797" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a865a359358b2dbafc4b04752811be7ea" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::dateTimeFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>dateTimeFuncHelp</name>
        <initializer>= {
    &quot;Date/<ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> functions&quot;,
    &quot;Functions taking a <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>, use current UTC <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>/<ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> if not given&quot;,
    &quot;&quot;,
    &quot;  <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref> DATETIME  (string)       convert string to <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>&quot;,
    &quot;  <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref> MJDTODATE (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>)         convert MJD to <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>&quot;,
    &quot;  double   MJD       (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     convert <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref> to MJD&quot;,
    &quot;  <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref> DATE      (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     get <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>, thus remove <ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> part&quot;,
    &quot;  double   TIME      (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     get <ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> (in rad), thus remove <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref> part&quot;,
    &quot;  int      YEAR      (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     get <ref refid="namespacecasacore_1a8507e45215715fb2aa7cf6bdb1464d2d" kindref="member">year</ref>&quot;,
    &quot;  int      MONTH     (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     get <ref refid="namespacecasacore_1a7b9b48e7df1c10cfea12ea417bef6fa0" kindref="member">month</ref> (1..12)&quot;,
    &quot;  int      DAY       (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     get <ref refid="namespacecasacore_1a6e2030dac1c9272a856814cfe4a42f49" kindref="member">day</ref> (1..31)&quot;,
    &quot;  int      WEEK      (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)     get <ref refid="namespacecasacore_1ac0768565c40c5ff3732c839dac8d766c" kindref="member">week</ref> number (0..53)&quot;,
    &quot;  int      WEEKDAY   (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)   aka DOW     <ref refid="namespacecasacore_1a5cd1b93bed6d1463f1b866be9c590caa" kindref="member">weekday</ref> (1=Monday .. 7=Sunday)&quot;,
    &quot;  string   CDATETIME (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)   aka CTOD    YYYY/MM/DD/HH:MM:SS.SSS&quot;,
    &quot;  string   CDATE     (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)               DD-MMM-YYYY&quot;,
    &quot;  string   CTIME     (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)               HH:MM:SS.SSS&quot;,
    &quot;  string   CMONTH    (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)               Jan..Dec&quot;,
    &quot;  string   CWEEKDAY  (<ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>)   aka CDOW    Mon..Sun&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="816" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a1a66407c57ffc2815604c9fe34dd748a" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::stringFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>stringFuncHelp</name>
        <initializer>= {
    &quot;String functions&quot;,
    &quot;&quot;,
    &quot;  int    LEN        (string)      aka STRLENGTH&quot;,
    &quot;  string UPCASE     (string)      aka UPPER&quot;,
    &quot;  string DOWNCASE   (string)      aka LOWER&quot;,
    &quot;  string CAPITALIZE (string)&quot;,
    &quot;  string SREVERSE   (string)      <ref refid="namespacecasacore_1a45060e4beb2fe456f77156166ad71f48" kindref="member">reverse</ref> the string   (aka REVERSESTRING)&quot;,
    &quot;  string TRIM       (string)      remove leading/trailing whitespace&quot;,
    &quot;  string LTRIM      (string)      remove leading whitespace&quot;,
    &quot;  string RTRIM      (string)      remove trailing whitespace&quot;,
    &quot;  string SUBSTR     (string, int START, int N)    START&lt;0 <ref refid="namespacecasacore_1a29f3de51f6dc2cd5cf0f7f70c5f50662" kindref="member">means</ref> from the end&quot;,
    &quot;  string REPLACE    (string SRC, string TOREPLACE[, string REPLACEMENT])&quot;,
    &quot;  string REPLACE    (string SRC, <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>  TOREPLACE[, string REPLACEMENT])&quot;,
    &quot;&quot;,
    &quot;  <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>  REGEX      (string)      make <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref> from regular expression string&quot;,
    &quot;  <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>  PATTERN    (string)      make <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref> from glob <ref refid="namespacecasacore_1a0d2a955b56ada3d73024058ac50b350f" kindref="member">pattern</ref> string&quot;,
    &quot;  <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref>  SQLPATTERN (string)      make <ref refid="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" kindref="member">regex</ref> from SQL-style <ref refid="namespacecasacore_1a0d2a955b56ada3d73024058ac50b350f" kindref="member">pattern</ref> string&quot;,
    &quot;&quot;,
    &quot;&apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> func conversion&apos;  for functions converting values to string&quot;,
    &quot;&apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> func <ref refid="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" kindref="member">datetime</ref>&apos;    for functions converting <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>/<ref refid="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" kindref="member">time</ref> to string&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="837" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a18771210a2bb0bf514d0909481c5103a" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::arrayFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>arrayFuncHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="860" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aae791e90bbe70155867d2d5f666c7c2e" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::reduceFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>reduceFuncHelp</name>
        <initializer>= {
    &quot;Array reduce functions (use unmasked elements only)&quot;,
    &quot; XXX        (<ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>)               reduces to a scalar&quot;,
    &quot; XXXS       (<ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>, reduceAxes)   reduces to a (N-M)-dim <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>&quot;,
    &quot; RUNNINGXXX (<ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>, windowSize)   calculates XXX in sliding window&quot;,
    &quot; BOXEDXXX   (<ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>, boxSize)      calculates XXX for each box&quot;,
    &quot;&quot;,
    &quot;XXX can be one of the following functions:&quot;,
    &quot;  bool    ANY      (bool)      is <ref refid="namespacecasacore_1a818171d299e1f0091e47d04131f07842" kindref="member">any</ref> element true?&quot;,
    &quot;  bool    ALL      (bool)      are <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> elements true?&quot;,
    &quot;  int     NTRUE    (bool)      number of true elements&quot;,
    &quot;  int     NFALSE   (bool)      number of false elements&quot;,
    &quot;  numeric SUM      (numeric)   <ref refid="namespacecasacore_1afad53c5e77f928df50b95f3f8441b71d" kindref="member">sum</ref> of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> elements&quot;,
    &quot;  numeric SUMSQR   (numeric)   <ref refid="namespacecasacore_1afad53c5e77f928df50b95f3f8441b71d" kindref="member">sum</ref> of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> squared elements   aka SUMSQUARE&quot;,
    &quot;  numeric PRODUCT  (numeric)   <ref refid="namespacecasacore_1a822cd8c7c28fee1811751a6f5e06464a" kindref="member">product</ref> of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> elements&quot;,
    &quot;  <ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>    MIN      (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>)      minimum of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> elements&quot;,
    &quot;  <ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>    MAX      (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>)      maximum of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> elements&quot;,
    &quot;  numeric MEAN     (numeric)   <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> of <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> elements          aka AVG&quot;,
    &quot;  double  VARIANCE (numeric)   population <ref refid="namespacecasacore_1afff21c193856c2f80da90f58266d5812" kindref="member">variance</ref>              complex <ref refid="namespacecasacore_1afff21c193856c2f80da90f58266d5812" kindref="member">variance</ref>&quot;,
    &quot;  double  SAMPLEVARIANCE(numeric)  sample <ref refid="namespacecasacore_1afff21c193856c2f80da90f58266d5812" kindref="member">variance</ref>              uses absolute value&quot;,
    &quot;  double  STDDEV   (numeric)   population standard deviation    (is <ref refid="namespacecasacore_1afad53c5e77f928df50b95f3f8441b71d" kindref="member">sum</ref> of <ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref> and&quot;,
    &quot;  double  SAMPLESTDDEV(numeric)    sample standard deviation     imaginary <ref refid="namespacecasacore_1abc952721ffff76b018b41e0857d91f64" kindref="member">variances</ref>)&quot;,
    &quot;  double  AVDEV    (numeric)   average deviation&quot;,
    &quot;  double  RMS      (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>)      <ref refid="namespacecasacore_1a0670d90b865a0c7417fe50f7d6e2ca43" kindref="member">root</ref>-<ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref>-<ref refid="namespacecasacore_1a8dd1bae2626176b371eb553595306774" kindref="member">square</ref>&quot;,
    &quot;  double  MEDIAN   (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>)      <ref refid="namespacecasacore_1ad57252595606334077e1a08fe225d1be" kindref="member">median</ref> (the middle element)&quot;,
    &quot;  double  FRACTILE (<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>, fraction)   element at given fraction&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="892" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a7da4bb26c2b20436196020e566ed6679" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::astroFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>astroFuncHelp</name>
        <initializer>= {
    &quot;Astronomical functions&quot;,
    &quot;&quot;,
    &quot;  double ANGDIST    (arg1,arg2)     aka ANGULARDISTANCE&quot;,
    &quot;    angular distance (in rad) between corrersponding positions in arg1 and arg2&quot;,
    &quot;    arg1 and arg2 must be arrays containing ra/dec or lon/lat pairs&quot;,
    &quot;  double ANGDISTX   (arg1,arg2)     aka ANGULARDISTANCEX&quot;,
    &quot;    same as ANGDIST, but between <ref refid="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" kindref="member">all</ref> positions in arg1 and arg2&quot;,
    &quot;  double NORMANGLE  (arg1)&quot;,
    &quot;    normalize an angle between -pi and pi radians&quot;,
    &quot;  bool   ANYCONE    (source, <ref refid="namespacecasacore_1a277fcc3d779b6b27e28f8ad002bcf8fe" kindref="member">cones</ref>)&quot;,
    &quot;    <ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref> if source in at least one of the <ref refid="namespacecasacore_1a277fcc3d779b6b27e28f8ad002bcf8fe" kindref="member">cones</ref>&quot;,
    &quot;    synonym for operator INCONE&quot;,
    &quot;  bool   ANYCONE    (source, conepos, radii)&quot;,
    &quot;    same as above, but cone centers and radii are given separately&quot;,
    &quot;    each radius is applied to each cone&quot;,
    &quot;  int    FINDCONE   (sources, <ref refid="namespacecasacore_1a277fcc3d779b6b27e28f8ad002bcf8fe" kindref="member">cones</ref>)&quot;,
    &quot;    index of the first cone containing a source&quot;,
    &quot;    if a single source is given, the result is a scalar, otherwise an <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref>&quot;,
    &quot;  int    FINDCONE   (sources, conepos, radii)&quot;,
    &quot;    same as above, but cone centers and radii are given separately&quot;,
    &quot;    each radius is applied to each cone&quot;,
    &quot;  bool   CONES      (sources, <ref refid="namespacecasacore_1a277fcc3d779b6b27e28f8ad002bcf8fe" kindref="member">cones</ref>)&quot;,
    &quot;    2-dim bool <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref> telling for each source if in each cone&quot;,
    &quot;  bool   CONES      (sources, conepos, radii)&quot;,
    &quot;    3-dim bool <ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">array</ref> telling for each source if in each cone and radius&quot;,
    &quot;&quot;,
    &quot;&apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> func meas&apos;   for measures functions converting between reference frames&quot;,
    &quot;&apos;<ref refid="lsmf_8cc_1a318b6b20037a5f5584e4b249f4af4fb6" kindref="member">show</ref> func mscal&apos;  for mscal functions handling measures in MeasurementSets&quot;,
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="920" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a35bf559ff260191c57fd11cf1e5ab830" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::miscFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>miscFuncHelp</name>
        <initializer>= {
    &quot;Miscellaneous functions&quot;,
    &quot;&quot;,
    &quot;  int ROWNR()   aka ROWNUMBER    return row number in current table&quot;,
    &quot;  int ROWID()                    return row number in input table&quot;,
    &quot;      MSID(column)               use column if existing, otherwise ROWID()&quot;,
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="951" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1aebcf5fe4136b5b69e0cb6cf98bc87bc6" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::aggrFuncHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>aggrFuncHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="959" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a19ee1041aaf91c7c694fb07f91915a11" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::positionHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>positionHelp</name>
        <initializer>= {
      &quot;Position types:&quot;,
      &quot;    ITRF&quot;,
      &quot;    WGS84&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="995" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1add250166bf311de46cacc4ee83316587" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::epochHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>epochHelp</name>
        <initializer>= {
      &quot;Epoch types:&quot;,
      &quot;    LAST           Local Apparent Sidereal <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    LMST           Local Mean Sidereal <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    GMST1, GMST    Greenwich Mean ST1&quot;,
      &quot;    GAST           Greenwich Apparent ST&quot;,
      &quot;    UT1, UT        Universal <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    UT2            Universal <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    UTC            Coordinated Universal <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    TAI, IAT       International Atomic <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    TDT, TT, ET    Terrestrial Dynamical <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    TCG            Geocentric Coordinate <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    TDB            Barycentric Dynamical <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;,
      &quot;    TCB            Barycentric Coordinate <ref refid="classcasacore_1_1Time" kindref="compound">Time</ref>&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="1001" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="1001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a73c50971293d9d8c119a260d060b112a" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::directionHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>directionHelp</name>
        <initializer>= {
    &quot;Direction types:&quot;,
    &quot;    J2000       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator and equinox at J2000.0 (FK5)&quot;,
    &quot;    JNAT        geocentric natural frame&quot;,
    &quot;    JMEAN       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator and equinox at frame epoch&quot;,
    &quot;    JTRUE       true equator and equinox at frame epoch&quot;,
    &quot;    APP         apparent geocentric position&quot;,
    &quot;    B1950       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> epoch and ecliptic at B1950.0&quot;,
    &quot;    B1950_VLA   <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> epoch(1979.9)) and ecliptic at B1950.0&quot;,
    &quot;    BMEAN       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator and equinox at frame epoch&quot;,
    &quot;    BTRUE       true equator and equinox at frame epoch&quot;,
    &quot;    HADEC       topocentric hourangle and declination&quot;,
    &quot;    AZEL        topocentric Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELNE      topocentric Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELSW      topocentric Azimuth and Elevation (S through W)&quot;,
    &quot;    AZELGEO     geodetic Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELNEGEO   geodetic Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELSWGEO   geodetic Azimuth and Elevation (S through W)&quot;,
    &quot;    ECLIPTIC    ecliptic for J2000 equator and equinox&quot;,
    &quot;    MECLIPTIC   ecliptic for <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator of <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>&quot;,
    &quot;    TECLIPTIC   ecliptic for true equator of <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>&quot;,
    &quot;    GALACTIC    galactic coordinates&quot;,
    &quot;    SUPERGAL    supergalactic coordinates&quot;,
    &quot;    ITRF        coordinates wrt ITRF Earth frame&quot;,
    &quot;    TOPO        apparent topocentric position&quot;,
    &quot;    ICRS        International Celestial Reference System&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="1017" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a67507324c3c8ff5c3722b60ae8be6fe2" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::earthMagneticHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>earthMagneticHelp</name>
        <initializer>= {
    &quot;EarthMagnetic types:&quot;,
    &quot;    IGRF        IGRF model&quot;,
    &quot;    J2000       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator and equinox at J2000.0 (FK5)&quot;,
    &quot;    JNAT        geocentric natural frame&quot;,
    &quot;    JMEAN       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator and equinox at frame epoch&quot;,
    &quot;    JTRUE       true equator and equinox at frame epoch&quot;,
    &quot;    APP         apparent geocentric position&quot;,
    &quot;    B1950       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> epoch and ecliptic at B1950.0&quot;,
    &quot;    B1950_VLA   <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> epoch(1979.9)) and ecliptic at B1950.0&quot;,
    &quot;    BMEAN       <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator and equinox at frame epoch&quot;,
    &quot;    BTRUE       true equator and equinox at frame epoch&quot;,
    &quot;    HADEC       topocentric hourangle and declination&quot;,
    &quot;    AZEL        topocentric Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELNE      topocentric Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELSW      topocentric Azimuth and Elevation (S through W)&quot;,
    &quot;    AZELGEO     geodetic Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELNEGEO   geodetic Azimuth and Elevation (N through E)&quot;,
    &quot;    AZELSWGEO   geodetic Azimuth and Elevation (S through W)&quot;,
    &quot;    ECLIPTIC    ecliptic for J2000 equator and equinox&quot;,
    &quot;    MECLIPTIC   ecliptic for <ref refid="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" kindref="member">mean</ref> equator of <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>&quot;,
    &quot;    TECLIPTIC   ecliptic for true equator of <ref refid="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" kindref="member">date</ref>&quot;,
    &quot;    GALACTIC    galactic coordinates&quot;,
    &quot;    SUPERGAL    supergalactic coordinates&quot;,
    &quot;    ITRF        coordinates wrt ITRF Earth frame&quot;,
    &quot;    TOPO        apparent topocentric position&quot;,
    &quot;    ICRS        International Celestial Reference System&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="1045" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a9f5799c9ece4e83eda91e8dbb20a094a" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::frequencyHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>frequencyHelp</name>
        <initializer>= {
    &quot;Frequency types&quot;,
    &quot;    REST     Rest frequency&quot;,
    &quot;    LSRD     Local Standard of Rest (J2000) - dynamical definition (IAU, [9,12,7] km/s in galactic coordinates)&quot;,
    &quot;    LSRK     LSR as kinematical (radio) definition - 20.0 km/s in direction ra,dec = [270,+30] deg (B1900.0)&quot;,
    &quot;    BARY     Barycentric (J2000)&quot;,
    &quot;    GEO      Geocentric&quot;,
    &quot;    TOPO     Topocentric&quot;,
    &quot;    GALACTO  Galacto centric (with rotation of 220 km/s in direction l,b = [90,0] deg&quot;,
    &quot;    LGROUP   Local group velocity -- 308km/s towards l,b = [105,-7] deg (F. Ghigo)&quot;,
    &quot;    CMB      CMB velocity -- 369.5km/s towards l,b = [264.4, 48.4] deg (F. Ghigo)&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="1074" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1a46076b96b4d8d55015c75f3aafffcf86" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::radialVelocityHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>radialVelocityHelp</name>
        <initializer>= {
    &quot;RadialVelocity types&quot;,
    &quot;    LSRD     Local Standard of Rest (J2000) - dynamical definition (IAU, [9,12,7] km/s in galactic coordinates)&quot;,
    &quot;    LSRK     LSR as kinematical (radio) definition - 20.0 km/s in direction ra,dec = [270,+30] deg (B1900.0)&quot;,
    &quot;    BARY     Barycentric (J2000)&quot;,
    &quot;    GEO      Geocentric&quot;,
    &quot;    TOPO     Topocentric&quot;,
    &quot;    GALACTO  Galacto centric (with rotation of 220 km/s in direction l,b = [90,0] deg&quot;,
    &quot;    LGROUP   Local group velocity -- 308km/s towards l,b = [105,-7] deg (F. Ghigo)&quot;,
    &quot;    CMB      CMB velocity -- 369.5km/s towards l,b = [264.4, 48.4] deg (F. Ghigo)&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="1087" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecasacore_1acb65759361a0c18df061b171da0c2888" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* casacore::dopplerHelp[]</definition>
        <argsstring>[]</argsstring>
        <name>dopplerHelp</name>
        <initializer>= {
    &quot;Doppler types (with F = f/f0, the frequency ratio)&quot;,
    &quot;    Z, OPTICAL      -1 + 1/F&quot;,
    &quot;    RATIO           F&quot;,
    &quot;    RADIO           1  - F&quot;,
    &quot;    BETA, TRUE      (1 - F**2)/(1 + F**2)&quot;,
    &quot;    RELATIVISTIC = BETA (= v/c)&quot;,
    &quot;    GAMMA           (1 + F**2)/2F&quot;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="1099" column="14" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="1099" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::swap</definition>
        <argsstring>(Array&lt; T &gt; &amp;first, Array&lt; T &gt; &amp;second)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array.h" line="987" column="6" bodyfile="casa/Arrays/Array.h" bodystart="987" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a414295a87e246c5d12e01b693f646ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t casacore::ArrayVolume</definition>
        <argsstring>(size_t Ndim, const ssize_t *Shape)</argsstring>
        <name>ArrayVolume</name>
        <param>
          <type>size_t</type>
          <declname>Ndim</declname>
        </param>
        <param>
          <type>const ssize_t *</type>
          <declname>Shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2.cc" line="34" column="8" bodyfile="casa/Arrays/Array2.cc" bodystart="34" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3501006de6fc6e42edf21a051c36a588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t casacore::ArrayIndexOffset</definition>
        <argsstring>(size_t Ndim, const ssize_t *Shape, const ssize_t *Origin, const ssize_t *Inc, const IPosition &amp;Index)</argsstring>
        <name>ArrayIndexOffset</name>
        <param>
          <type>size_t</type>
          <declname>Ndim</declname>
        </param>
        <param>
          <type>const ssize_t *</type>
          <declname>Shape</declname>
        </param>
        <param>
          <type>const ssize_t *</type>
          <declname>Origin</declname>
        </param>
        <param>
          <type>const ssize_t *</type>
          <declname>Inc</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2.cc" line="55" column="8" bodyfile="casa/Arrays/Array2.cc" bodystart="55" bodyend="72" declfile="casa/Arrays/ArrayBase.h" declline="311" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5b5526fce2164da3625e5666d56614f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t casacore::ArrayIndexOffset</definition>
        <argsstring>(size_t Ndim, const ssize_t *Shape, const ssize_t *Inc, const IPosition &amp;Index)</argsstring>
        <name>ArrayIndexOffset</name>
        <param>
          <type>size_t</type>
          <declname>Ndim</declname>
        </param>
        <param>
          <type>const ssize_t *</type>
          <declname>Shape</declname>
        </param>
        <param>
          <type>const ssize_t *</type>
          <declname>Inc</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2.cc" line="74" column="8" bodyfile="casa/Arrays/Array2.cc" bodystart="74" bodyend="90" declfile="casa/Arrays/ArrayBase.h" declline="314" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a09440658171992c2310da72f8efb6ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>Array&lt; std::complex&lt; float &gt; &gt; casacore::conj</definition>
        <argsstring>(const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="37" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="37" bodyend="40" declfile="casa/Arrays/ArrayMath.h" declline="871" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab66cfb0083b112783d5003e37c45a0a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>Array&lt; std::complex&lt; double &gt; &gt; casacore::conj</definition>
        <argsstring>(const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="42" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="42" bodyend="45" declfile="casa/Arrays/ArrayMath.h" declline="872" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af40818c42d4fe499cb16aaa6a8e95e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>Matrix&lt; std::complex&lt; float &gt; &gt; casacore::conj</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="47" column="8" bodyfile="casa/Arrays/Array2Math.cc" bodystart="47" bodyend="50" declfile="casa/Arrays/ArrayMath.h" declline="878" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9805899ec4cfd4cfe4d19e6139818af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>Matrix&lt; std::complex&lt; double &gt; &gt; casacore::conj</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="52" column="8" bodyfile="casa/Arrays/Array2Math.cc" bodystart="52" bodyend="55" declfile="casa/Arrays/ArrayMath.h" declline="879" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a59a94a1c8e61ea9a81a8eee4ec9a166b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::conj</definition>
        <argsstring>(Array&lt; std::complex&lt; float &gt;&gt; &amp;rarray, const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>conj</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="57" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="57" bodyend="61" declfile="casa/Arrays/ArrayMath.h" declline="874" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7ed6ce042b8c0be7d016f8d842d64e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::conj</definition>
        <argsstring>(Array&lt; std::complex&lt; double &gt;&gt; &amp;rarray, const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>conj</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="63" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="63" bodyend="67" declfile="casa/Arrays/ArrayMath.h" declline="875" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::real</definition>
        <argsstring>(Array&lt; float &gt; &amp;rarray, const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>real</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="69" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="69" bodyend="74" declfile="casa/Arrays/ArrayMath.h" declline="907" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a21301ec362c29980ac48638914363192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::real</definition>
        <argsstring>(Array&lt; double &gt; &amp;rarray, const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>real</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="76" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="76" bodyend="80" declfile="casa/Arrays/ArrayMath.h" declline="908" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::imag</definition>
        <argsstring>(Array&lt; float &gt; &amp;rarray, const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>imag</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="82" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="82" bodyend="86" declfile="casa/Arrays/ArrayMath.h" declline="917" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a96547cdf805c4036cc828aedde05cdba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::imag</definition>
        <argsstring>(Array&lt; double &gt; &amp;rarray, const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>imag</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="88" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="88" bodyend="92" declfile="casa/Arrays/ArrayMath.h" declline="918" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5d59d997b8c2ed3c5d5946253838fb76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::amplitude</definition>
        <argsstring>(Array&lt; float &gt; &amp;rarray, const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>amplitude</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="94" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="94" bodyend="98" declfile="casa/Arrays/ArrayMath.h" declline="929" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada53a7f1471789d918fac60b6e57c3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::amplitude</definition>
        <argsstring>(Array&lt; double &gt; &amp;rarray, const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>amplitude</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="100" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="100" bodyend="104" declfile="casa/Arrays/ArrayMath.h" declline="930" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac7bb4adb33f4467734cf44ff661d07f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::phase</definition>
        <argsstring>(Array&lt; float &gt; &amp;rarray, const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>phase</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="106" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="106" bodyend="110" declfile="casa/Arrays/ArrayMath.h" declline="941" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd06a385c4a84fab2f7d9b9e01a50da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::phase</definition>
        <argsstring>(Array&lt; double &gt; &amp;rarray, const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>phase</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="112" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="112" bodyend="116" declfile="casa/Arrays/ArrayMath.h" declline="942" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaf9d70c716f3ef7936972b4e54f18ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt;</type>
        <definition>Array&lt; float &gt; casacore::real</definition>
        <argsstring>(const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="118" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="118" bodyend="123" declfile="casa/Arrays/ArrayMath.h" declline="904" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3175a657991930eb67e74570638593d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt;</type>
        <definition>Array&lt; double &gt; casacore::real</definition>
        <argsstring>(const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="124" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="124" bodyend="129" declfile="casa/Arrays/ArrayMath.h" declline="905" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8e853fa38463ab6ad74cdbcb5e0f64b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt;</type>
        <definition>Array&lt; float &gt; casacore::imag</definition>
        <argsstring>(const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="132" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="132" bodyend="137" declfile="casa/Arrays/ArrayMath.h" declline="914" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a86b3f0fca65658826fea98f1205bb7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt;</type>
        <definition>Array&lt; double &gt; casacore::imag</definition>
        <argsstring>(const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="138" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="138" bodyend="143" declfile="casa/Arrays/ArrayMath.h" declline="915" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a589835e4aaa2cb5c75b9f575629637f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt;</type>
        <definition>Array&lt; float &gt; casacore::amplitude</definition>
        <argsstring>(const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>amplitude</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="145" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="145" bodyend="150" declfile="casa/Arrays/ArrayMath.h" declline="926" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c06ea4e2044f0830148ef3312ac2664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt;</type>
        <definition>Array&lt; double &gt; casacore::amplitude</definition>
        <argsstring>(const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>amplitude</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="151" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="151" bodyend="156" declfile="casa/Arrays/ArrayMath.h" declline="927" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a40f113a5daeb73bbb0d1c1dfba83bf23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt;</type>
        <definition>Array&lt; float &gt; casacore::phase</definition>
        <argsstring>(const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>phase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="158" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="158" bodyend="163" declfile="casa/Arrays/ArrayMath.h" declline="938" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8424b1d7bd73f9c5d058d69df97802d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt;</type>
        <definition>Array&lt; double &gt; casacore::phase</definition>
        <argsstring>(const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>phase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="165" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="165" bodyend="170" declfile="casa/Arrays/ArrayMath.h" declline="939" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a39dc90e701415ce7080218767eadf6e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::ComplexToReal</definition>
        <argsstring>(Array&lt; float &gt; &amp;rarray, const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>ComplexToReal</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="175" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="175" bodyend="195" declfile="casa/Arrays/ArrayMath.h" declline="953" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeaf03ebaac3ee4a01406be8f7207de29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::ComplexToReal</definition>
        <argsstring>(Array&lt; double &gt; &amp;rarray, const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>ComplexToReal</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="200" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="200" bodyend="220" declfile="casa/Arrays/ArrayMath.h" declline="954" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aefc975b7ff148abad52134b53b875fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt;</type>
        <definition>Array&lt; float &gt; casacore::ComplexToReal</definition>
        <argsstring>(const Array&lt; std::complex&lt; float &gt;&gt; &amp;carray)</argsstring>
        <name>ComplexToReal</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="222" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="222" bodyend="229" declfile="casa/Arrays/ArrayMath.h" declline="949" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a38811baad4e1f9f15be25ebc89a18c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt;</type>
        <definition>Array&lt; double &gt; casacore::ComplexToReal</definition>
        <argsstring>(const Array&lt; std::complex&lt; double &gt;&gt; &amp;carray)</argsstring>
        <name>ComplexToReal</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="231" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="231" bodyend="238" declfile="casa/Arrays/ArrayMath.h" declline="950" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a755f42d3f8abf7139b317f09efd56504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::RealToComplex</definition>
        <argsstring>(Array&lt; std::complex&lt; float &gt;&gt; &amp;carray, const Array&lt; float &gt; &amp;rarray)</argsstring>
        <name>RealToComplex</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="243" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="243" bodyend="262" declfile="casa/Arrays/ArrayMath.h" declline="965" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae9b7d1017b135beabe1944326df345bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::RealToComplex</definition>
        <argsstring>(Array&lt; std::complex&lt; double &gt;&gt; &amp;carray, const Array&lt; double &gt; &amp;rarray)</argsstring>
        <name>RealToComplex</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="267" column="6" bodyfile="casa/Arrays/Array2Math.cc" bodystart="267" bodyend="286" declfile="casa/Arrays/ArrayMath.h" declline="966" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a973db0fd96a703c7fd58f1193d9b51b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>Array&lt; std::complex&lt; float &gt; &gt; casacore::RealToComplex</definition>
        <argsstring>(const Array&lt; float &gt; &amp;rarray)</argsstring>
        <name>RealToComplex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; float &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="292" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="292" bodyend="303" declfile="casa/Arrays/ArrayMath.h" declline="961" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6b01f66c8d12f5e0de800da12816a9b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>Array&lt; std::complex&lt; double &gt; &gt; casacore::RealToComplex</definition>
        <argsstring>(const Array&lt; double &gt; &amp;rarray)</argsstring>
        <name>RealToComplex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; double &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="308" column="7" bodyfile="casa/Arrays/Array2Math.cc" bodystart="308" bodyend="319" declfile="casa/Arrays/ArrayMath.h" declline="962" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aec92b27d699e142ac0207ae4ddfa2b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::checkExpandArray</definition>
        <argsstring>(IPosition &amp;mult, IPosition &amp;inshp, const IPosition &amp;inShape, const IPosition &amp;outShape, const IPosition &amp;alternate)</argsstring>
        <name>checkExpandArray</name>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>mult</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>inshp</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>inShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>outShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>alternate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Array2Math.cc" line="322" column="11" bodyfile="casa/Arrays/Array2Math.cc" bodystart="322" bodyend="352" declfile="casa/Arrays/ArrayMath.h" declline="1069" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa2adeec4bfede54bea79c0b6818e9ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::throwArrayShapes</definition>
        <argsstring>(const IPosition &amp;shape1, const IPosition &amp;shape2, const char *name)</argsstring>
        <name>throwArrayShapes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape1</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayBase.cc" line="856" column="6" bodyfile="casa/Arrays/ArrayBase.cc" bodystart="856" bodyend="863" declfile="casa/Arrays/ArrayBase.h" declline="320" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c999e43db5b22b41204275d1445ad42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t casacore::ArrayVolume</definition>
        <argsstring>(size_t Ndim, const int *Shape)</argsstring>
        <name>ArrayVolume</name>
        <param>
          <type>size_t</type>
          <declname>Ndim</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>Shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayBase.h" line="303" column="8" declfile="casa/Arrays/ArrayBase.h" declline="303" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a221aa22fedb69065075aac31bb563011" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::checkArrayShapes</definition>
        <argsstring>(const ArrayBase &amp;left, const ArrayBase &amp;right, const char *name)</argsstring>
        <name>checkArrayShapes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayBase" kindref="compound">ArrayBase</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayBase" kindref="compound">ArrayBase</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayBase.h" line="323" column="13" bodyfile="casa/Arrays/ArrayBase.h" bodystart="323" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3eed23ef831172b316c251e642aa200d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::arrayCompareAll</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right, CompareOperator op)</argsstring>
        <name>arrayCompareAll</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="116" column="6" declfile="casa/Arrays/ArrayLogical.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafdc9596ddc802383fb9373b280a2d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::arrayCompareAll</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, T right, CompareOperator op)</argsstring>
        <name>arrayCompareAll</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="119" column="6" declfile="casa/Arrays/ArrayLogical.h" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6df3c4dee176ff9a545edd5be325a4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::arrayCompareAll</definition>
        <argsstring>(T left, const Array&lt; T &gt; &amp;right, CompareOperator op)</argsstring>
        <name>arrayCompareAll</name>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="122" column="6" declfile="casa/Arrays/ArrayLogical.h" declline="122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afdf1c7fb776a8f2de76f262672417f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::arrayCompareAny</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right, CompareOperator op)</argsstring>
        <name>arrayCompareAny</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="129" column="6" declfile="casa/Arrays/ArrayLogical.h" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae4f9708c39cc9cfd3d54a66174212a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::arrayCompareAny</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, T right, CompareOperator op)</argsstring>
        <name>arrayCompareAny</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="132" column="6" declfile="casa/Arrays/ArrayLogical.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adf6acc533a91763d754a871d889c728a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::arrayCompareAny</definition>
        <argsstring>(T left, const Array&lt; T &gt; &amp;right, CompareOperator op)</argsstring>
        <name>arrayCompareAny</name>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="135" column="6" declfile="casa/Arrays/ArrayLogical.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a50fe4259b365e199c5d7e93d4e943dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="155" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="155" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a099eb52f8cf5c686fefab5268b17381a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="156" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="156" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2b7af79b7affd02f7ee2ee499f3845d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="157" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="157" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aecd9f7f6f7dceba714c29e16403de5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="158" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="158" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4746c15ecaf632bb08fe90cfaaf26120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="159" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="159" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa60dfadf59f58fb94f2d379752c1f5cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="160" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="160" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a988786a7b9f346e8ce756d90b8948af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNear</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r, double tol)</argsstring>
        <name>allNear</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="161" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="161" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac809d43af35496c425fde598affd1959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNearAbs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r, double tol)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="163" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="163" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a98487b6dc732daceab9a349ea3c57616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="168" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="168" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad2a894c953cf2303af6b15512c2be959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="169" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="169" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c18b36d0e24bbba673a2f3ef471cd91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="185" column="12" declfile="casa/Arrays/ArrayLogical.h" declline="185" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5729c5a9418b3fa6744286df1d998dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&lt;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="187" column="12" declfile="casa/Arrays/ArrayLogical.h" declline="187" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a831240364fb86d354c40b1964d297e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="189" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="189" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9d66d856b81ec9ba871f28e7f48df3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&gt;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="191" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="191" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abe8be169cb5d6e9c54c8c0fff301fa67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator==</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="193" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="193" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1519fc595ba8497118ee6d67ca6fa9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator!=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="195" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="195" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0ef2489b302c373f7780762742c11b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::near</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r, double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="198" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="198" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a541672c0365ea093e63238bc34b4e175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::nearAbs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r, double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="200" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="200" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a98873dbcfe3e996173b6601bcefd7be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="205" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="205" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afd1d851107f25933a3946826b113be06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator||</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="206" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="206" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aac115c00e8833aef2731a4a4b1dffd56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator!</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="215" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="215" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af23f08e4b03f481f9c3de50acd0dcb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="224" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="224" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a119da0f9434c56ad2564b712ba6ee95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="225" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="225" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2c86fefaffb27472dc82a76babc87c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="226" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="226" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a860d00e4ead9e79f7e4843b67990e34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="227" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="227" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2571af1b3246411cc4f5321330f250cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="228" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="228" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a322352be05b43b012d532d64e520c966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="229" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="229" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abf55623f61abdcf74ef0fa961326dcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="230" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="230" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a90451dba77eeccd15180ed499a556c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="231" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="231" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad5e65666bfcd8510e41e5a0a71f80ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="232" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="232" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab7fe5b2cdc5dc1a009202e4f95520f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="233" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="233" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a44b6c4c04186584d2656eceadcbaaa78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="234" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="234" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac877ffdd2ee877b3d10162be698807b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="235" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="235" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a21f81edf6555d045af4dfd47209d12aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNear</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val, double tol)</argsstring>
        <name>allNear</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="236" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="236" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0b9c67961a13a93e51578f9f860307fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNear</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array, double tol)</argsstring>
        <name>allNear</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="237" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="237" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8a54e7977c7657abf5e2a764a81ce1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNearAbs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val, double tol)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="238" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="238" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5fdbb21d1308709376d982644b639ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNearAbs</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array, double tol)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="240" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="240" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc63245d8ddbb9599dd68bccd1c076f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="245" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="245" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a54ca85d4618386fa851e47f40d634985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allAND</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="246" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="246" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa85627d6069b799bee5e45d886fc1494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="247" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="247" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5ab34056daa39bbd19a7841d56a5d22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>allOR</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="248" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="248" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a601dd2449c1fe8a454e47c7a8c76ff32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allSame</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>allSame</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="255" column="17" bodyfile="casa/Arrays/ArrayLogical.h" bodystart="255" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa8d87be7488c375c34801759b4572d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::isNaN</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array)</argsstring>
        <name>isNaN</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="261" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="261" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae1e1681db7bbaebc650644ee3b06ee5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::isInf</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array)</argsstring>
        <name>isInf</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="262" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="262" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a894ca9758536e0fbadbb8c7d600873fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::isFinite</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="263" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="263" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aef146fddfcf9f2bc6ae95d9950d45844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="276" column="12" declfile="casa/Arrays/ArrayLogical.h" declline="276" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac2305499ad18a6cd31e0ce4e8cfc55a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="277" column="12" declfile="casa/Arrays/ArrayLogical.h" declline="277" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad0104e7c893a454b5c08ccbeef8e044d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&lt;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="278" column="12" declfile="casa/Arrays/ArrayLogical.h" declline="278" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab28699882d5df5fd78b72bf0a36fac2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&lt;</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="279" column="12" declfile="casa/Arrays/ArrayLogical.h" declline="279" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afde369b355f2cc83fefc3bd9fb832fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="280" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="280" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a513855ea5a8b7f05ba1b5f51750ae30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="281" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="281" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aca866ad72a6f74eb38814cbc4539dab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&gt;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="282" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="282" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a66523196ec4e7fd4cb9ff66951f76a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&gt;</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="283" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="283" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c3705823b996b3d270116f14b6deb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator==</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="284" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="284" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a99bebea1a5b50372ee4d1d21cb0dd64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator==</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="285" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="285" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aac8197267cd584a79845a6fa66568572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator!=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="286" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="286" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a78f4a00b8d87b65c9afc7cd8bb74fa29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator!=</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="287" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="287" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a84d709315bca64107b7245c9cbb62ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::near</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val, double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="288" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="288" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0375ddb85dfb58a6c338ad47dd12cdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::near</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array, double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="290" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="290" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6b073983f6b1b3d7162609d1db5fead5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::nearAbs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val, double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="292" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="292" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1676dd193a461d18eacf2def58b068e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::nearAbs</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array, double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="294" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="294" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a23ce7980914a8b381683be850ee05432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="299" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="299" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a89df8a6b42302eaf83c7c7863e1a0e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="300" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="300" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6252656c3cfbf84c9de38aa678b4094a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator||</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="301" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="301" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3a82be28af4d2547933091a2835f0b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::operator||</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator||</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="302" column="25" declfile="casa/Arrays/ArrayLogical.h" declline="302" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a06de047b097c3995360ee60b946a6370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="324" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="324" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada58a71990665efeca3f70a476c068ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="325" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="325" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae21a8aead69c05aa09c8aec5f0110dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="326" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="326" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7d0743b7b840655d395553eb8a87040b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="327" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="327" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adb520cdef40f68d13471e19839c3b189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="328" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="328" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6586c8f2f0a0c5807758f12f59b1489d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="329" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="329" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac486fb98d1d2d9540502328a36f93d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNear</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r, double tol)</argsstring>
        <name>anyNear</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="330" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="330" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4ef47ea51662d4280939518ef3de79c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNearAbs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r, double tol)</argsstring>
        <name>anyNearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="332" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="332" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3a9439aeec814179033f11e6a95da8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="337" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="337" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2200c8fd92a8f47f966b85b839fd149b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="338" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="338" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a387ea5fca773c8120b06426690d7a6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="351" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="351" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af5838a8bed8dca292f2470d2a7275867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="352" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="352" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a09d1ca333578ed8af3309f111bf94f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="353" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="353" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4e44dce80095a815b26190384c23b9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="354" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="354" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acf99aeab6db1ce3f43101a0f6d65155e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="355" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="355" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2747a33e9d259a9f6fb3efed2ea99d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="356" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="356" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adb54deb53fdd6d59c908de1733311954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="357" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="357" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aecfebae5c973eec23b07e0b70ece137e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="358" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="358" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a86ac79cde5168913a6af3670adf10174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="359" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="359" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada4d7c4c72b16ff98c7773c44e47415d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="360" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="360" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aee6c931ae25d851122960a1641bc2940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="361" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="361" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1494503cd18008ab4dda54ec5d783410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="362" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="362" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7667a91ae01cabf6250cfb802c9cc374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNear</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val, double tol)</argsstring>
        <name>anyNear</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="363" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="363" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2f1be7b0c1af88a0cac59f4b8c29180d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNear</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array, double tol)</argsstring>
        <name>anyNear</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="364" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="364" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac97a6b18ad76bc6972c8d65ffd41573d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNearAbs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val, double tol)</argsstring>
        <name>anyNearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="365" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="365" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43f9100ee86c1a9146c67a93d879c065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNearAbs</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array, double tol)</argsstring>
        <name>anyNearAbs</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="367" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="367" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a764e51a3cf76699fa2af95cfd7a86e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="372" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="372" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a666ebc644032a8d1384931f25d56425d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="373" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="373" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aabc900e9f00c015d3bd523ebe4a6b047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="374" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="374" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c5c4edc1210def0deb26a38d0c2384f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const T &amp;val, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="375" column="17" declfile="casa/Arrays/ArrayLogical.h" declline="375" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad2318c981fce29348555ed3742d3283f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::allTrue</definition>
        <argsstring>(const Array&lt; bool &gt; &amp;array)</argsstring>
        <name>allTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="382" column="13" bodyfile="casa/Arrays/ArrayLogical.h" bodystart="382" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aecb8b46e617c13afb4f949f45fd1f9bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::anyTrue</definition>
        <argsstring>(const Array&lt; bool &gt; &amp;array)</argsstring>
        <name>anyTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="386" column="13" bodyfile="casa/Arrays/ArrayLogical.h" bodystart="386" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6e6b3b8e0de17f76831f0837486ecfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt;</type>
        <definition>Array&lt;bool&gt; casacore::partialAllTrue</definition>
        <argsstring>(const Array&lt; bool &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialAllTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="390" column="7" declfile="casa/Arrays/ArrayLogical.h" declline="390" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9b4946910b758882e0316d4148afa343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt;</type>
        <definition>Array&lt;bool&gt; casacore::partialAnyTrue</definition>
        <argsstring>(const Array&lt; bool &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialAnyTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="392" column="7" declfile="casa/Arrays/ArrayLogical.h" declline="392" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a254954549bcc53ae0725d2462d3bcc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t casacore::nfalse</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array)</argsstring>
        <name>nfalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="402" column="19" declfile="casa/Arrays/ArrayLogical.h" declline="402" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8333ced97ef0e5f3b5991b6a7aac6fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t casacore::ntrue</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array)</argsstring>
        <name>ntrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="403" column="19" bodyfile="casa/Arrays/ArrayLogical.h" bodystart="403" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3ca5be362dcec0951a99f83d2475c9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; size_t &gt;</type>
        <definition>Array&lt;size_t&gt; casacore::partialNTrue</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialNTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="416" column="18" declfile="casa/Arrays/ArrayLogical.h" declline="416" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3d89aa7104ce9e71d760bc3c705f6e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; size_t &gt;</type>
        <definition>Array&lt;size_t&gt; casacore::partialNFalse</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialNFalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayLogical.h" line="418" column="18" declfile="casa/Arrays/ArrayLogical.h" declline="418" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab8de8813efc7fafc37494f42e3949707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename _OutputIterator</type>
          </param>
          <param>
            <type>typename _BinaryOperation</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::myltransform</definition>
        <argsstring>(_InputIterator1 __first1, _InputIterator1 __last1, _OutputIterator __result, T left, _BinaryOperation __binary_op)</argsstring>
        <name>myltransform</name>
        <param>
          <type>_InputIterator1</type>
          <declname>__first1</declname>
        </param>
        <param>
          <type>_InputIterator1</type>
          <declname>__last1</declname>
        </param>
        <param>
          <type>_OutputIterator</type>
          <declname>__result</declname>
        </param>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>_BinaryOperation</type>
          <declname>__binary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="144" column="5" bodyfile="casa/Arrays/ArrayMath.h" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa50c3695c265c11a6b99e4d67ef2451a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename _OutputIterator</type>
          </param>
          <param>
            <type>typename _BinaryOperation</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::myrtransform</definition>
        <argsstring>(_InputIterator1 __first1, _InputIterator1 __last1, _OutputIterator __result, T right, _BinaryOperation __binary_op)</argsstring>
        <name>myrtransform</name>
        <param>
          <type>_InputIterator1</type>
          <declname>__first1</declname>
        </param>
        <param>
          <type>_InputIterator1</type>
          <declname>__last1</declname>
        </param>
        <param>
          <type>_OutputIterator</type>
          <declname>__result</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>_BinaryOperation</type>
          <declname>__binary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="155" column="5" bodyfile="casa/Arrays/ArrayMath.h" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a39a8e1fe468f4e12f29c258ce442e590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename _BinaryOperation</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::myiptransform</definition>
        <argsstring>(_InputIterator1 __first1, _InputIterator1 __last1, T right, _BinaryOperation __binary_op)</argsstring>
        <name>myiptransform</name>
        <param>
          <type>_InputIterator1</type>
          <declname>__first1</declname>
        </param>
        <param>
          <type>_InputIterator1</type>
          <declname>__last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>_BinaryOperation</type>
          <declname>__binary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="166" column="5" bodyfile="casa/Arrays/ArrayMath.h" bodystart="166" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1fe6385c96aba9ce97452c9426ff791" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayContTransform</definition>
        <argsstring>(const Array&lt; L &gt; &amp;left, const Array&lt; R &gt; &amp;right, Array&lt; RES &gt; &amp;result, BinaryOperator op)</argsstring>
        <name>arrayContTransform</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="184" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="184" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab5157a3b977dbdcfbb66d125ef3c2f4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayContTransform</definition>
        <argsstring>(const Array&lt; L &gt; &amp;left, R right, Array&lt; RES &gt; &amp;result, BinaryOperator op)</argsstring>
        <name>arrayContTransform</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>R</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="200" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="200" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae74c0811d5f407f937fd0c6704906a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayContTransform</definition>
        <argsstring>(L left, const Array&lt; R &gt; &amp;right, Array&lt; RES &gt; &amp;result, BinaryOperator op)</argsstring>
        <name>arrayContTransform</name>
        <param>
          <type>L</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="220" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="220" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc1da6f5ca8d53127a6df95bb74f47e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename UnaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayContTransform</definition>
        <argsstring>(const Array&lt; T &gt; &amp;arr, Array&lt; RES &gt; &amp;result, UnaryOperator op)</argsstring>
        <name>arrayContTransform</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>UnaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="240" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="240" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac6370aad428352329b7e4c04b3aa1b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransform</definition>
        <argsstring>(const Array&lt; L &gt; &amp;left, const Array&lt; R &gt; &amp;right, Array&lt; RES &gt; &amp;result, BinaryOperator op)</argsstring>
        <name>arrayTransform</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="254" column="6" declfile="casa/Arrays/ArrayMath.h" declline="254" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4989ca2b0ca88bf4f351c1a23298a538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransform</definition>
        <argsstring>(const Array&lt; L &gt; &amp;left, R right, Array&lt; RES &gt; &amp;result, BinaryOperator op)</argsstring>
        <name>arrayTransform</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>R</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="260" column="6" declfile="casa/Arrays/ArrayMath.h" declline="260" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9c862cd08fb6c4e7097b198a0d16492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransform</definition>
        <argsstring>(L left, const Array&lt; R &gt; &amp;right, Array&lt; RES &gt; &amp;result, BinaryOperator op)</argsstring>
        <name>arrayTransform</name>
        <param>
          <type>L</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="266" column="6" declfile="casa/Arrays/ArrayMath.h" declline="266" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1ba5e9841b772589c284891e22f2e301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
          <param>
            <type>typename UnaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransform</definition>
        <argsstring>(const Array&lt; T &gt; &amp;arr, Array&lt; RES &gt; &amp;result, UnaryOperator op)</argsstring>
        <name>arrayTransform</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>UnaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="272" column="6" declfile="casa/Arrays/ArrayMath.h" declline="272" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5a7c54a9ff3080948b23e4297d501af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::arrayTransformResult</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right, BinaryOperator op)</argsstring>
        <name>arrayTransformResult</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="278" column="7" declfile="casa/Arrays/ArrayMath.h" declline="278" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc6290780a75b3c14fd96db02f912c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::arrayTransformResult</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, T right, BinaryOperator op)</argsstring>
        <name>arrayTransformResult</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="284" column="7" declfile="casa/Arrays/ArrayMath.h" declline="284" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae50d102a60d9f964de35b8ed11c4b21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::arrayTransformResult</definition>
        <argsstring>(T left, const Array&lt; T &gt; &amp;right, BinaryOperator op)</argsstring>
        <name>arrayTransformResult</name>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="289" column="7" declfile="casa/Arrays/ArrayMath.h" declline="289" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae51de0c9eff85420edeb089f73fc21b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename UnaryOperator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::arrayTransformResult</definition>
        <argsstring>(const Array&lt; T &gt; &amp;arr, UnaryOperator op)</argsstring>
        <name>arrayTransformResult</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>UnaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="294" column="7" declfile="casa/Arrays/ArrayMath.h" declline="294" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a63ed384aa4a331fc4c794c819d43c5bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransformInPlace</definition>
        <argsstring>(Array&lt; L &gt; &amp;left, const Array&lt; R &gt; &amp;right, BinaryOperator op)</argsstring>
        <name>arrayTransformInPlace</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="299" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8ef7adc0d976efbbba15c9a4a8409053" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransformInPlace</definition>
        <argsstring>(Array&lt; L &gt; &amp;left, R right, BinaryOperator op)</argsstring>
        <name>arrayTransformInPlace</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>R</type>
          <declname>right</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="312" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="312" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68661be5b765c992f7e2c8aa0c7b9a77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename UnaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::arrayTransformInPlace</definition>
        <argsstring>(Array&lt; T &gt; &amp;arr, UnaryOperator op)</argsstring>
        <name>arrayTransformInPlace</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>UnaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="327" column="13" bodyfile="casa/Arrays/ArrayMath.h" bodystart="327" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a78e5693798ffcf54f1cf2b51144a8e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator+=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="341" column="17" declfile="casa/Arrays/ArrayMath.h" declline="341" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed680cec855916518b6aa16d0bbf582a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator-=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="342" column="17" declfile="casa/Arrays/ArrayMath.h" declline="342" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af72a6bde8158d919bdb9fa2b0612ae7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator*=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="343" column="17" bodyfile="casa/Arrays/ArrayMath.h" bodystart="343" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8b98aea2655717afa30bdef84144ea17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator/=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="349" column="17" bodyfile="casa/Arrays/ArrayMath.h" bodystart="349" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa83429e21d7f78212be4cf7b16edde29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator%=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator%=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="354" column="17" declfile="casa/Arrays/ArrayMath.h" declline="354" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6ceee15c7d47670e6d59b8ec5fe27069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator&amp;=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="355" column="17" declfile="casa/Arrays/ArrayMath.h" declline="355" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afaedfe2866d7bcf7fc8059e1e2ba97d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator|=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="356" column="17" declfile="casa/Arrays/ArrayMath.h" declline="356" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0c9b2bfea5e1ef185f30e2172538885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator^=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator^=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="357" column="17" declfile="casa/Arrays/ArrayMath.h" declline="357" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a80e1d11aebb41c7353b31dc686b38508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator+=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="364" column="17" declfile="casa/Arrays/ArrayMath.h" declline="364" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed1eef851ef67136da728b94b22940ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator-=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="365" column="17" declfile="casa/Arrays/ArrayMath.h" declline="365" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a19ef7188925b616ba18178ad52ae1239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator*=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="366" column="17" bodyfile="casa/Arrays/ArrayMath.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8119167a40b0a8c3cb930ac31eabbcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator/=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="370" column="17" bodyfile="casa/Arrays/ArrayMath.h" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acb784038ae5cae5c08769717c53cbc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator%=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator%=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="374" column="17" declfile="casa/Arrays/ArrayMath.h" declline="374" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac3b8d8fe1943bde9f76457eb2331329c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator&amp;=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="375" column="17" declfile="casa/Arrays/ArrayMath.h" declline="375" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada12acbb3f1b59634168771fefbed2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator|=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="376" column="17" declfile="casa/Arrays/ArrayMath.h" declline="376" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4209111377b03efc69b4f85e252a7550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator^=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator^=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="377" column="17" declfile="casa/Arrays/ArrayMath.h" declline="377" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c347d253db89862271fd45923f14deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="383" column="18" declfile="casa/Arrays/ArrayMath.h" declline="383" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9044e7974e90d100edba415580387aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="384" column="18" declfile="casa/Arrays/ArrayMath.h" declline="384" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0b8db4282474a1393a4a9919169a6ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator~</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>operator~</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="385" column="18" declfile="casa/Arrays/ArrayMath.h" declline="385" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3940e409558972ea293d1455864aee8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="392" column="9" declfile="casa/Arrays/ArrayMath.h" declline="392" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7108969a5d5d3b1638d9f44bfb075025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="394" column="9" declfile="casa/Arrays/ArrayMath.h" declline="394" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae1a129565dcdea85049e92a9a81917f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="396" column="9" bodyfile="casa/Arrays/ArrayMath.h" bodystart="396" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af58d26bfeb3b089cd8d46e88271bd770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="402" column="9" declfile="casa/Arrays/ArrayMath.h" declline="402" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a553b1cd0cb66d88d7f092e388c1e6ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator%</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="404" column="9" declfile="casa/Arrays/ArrayMath.h" declline="404" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adea7f4526910ec217740a7483519f203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator|</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="406" column="9" declfile="casa/Arrays/ArrayMath.h" declline="406" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8ee56bb6b6c367588e36f7abc26a0c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator&amp;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="408" column="9" declfile="casa/Arrays/ArrayMath.h" declline="408" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1b24715c5e93c47ece83c059ca7f5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator^</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="410" column="9" declfile="casa/Arrays/ArrayMath.h" declline="410" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1affaca52c4fc30320033fcc83f5b4aebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="418" column="11" declfile="casa/Arrays/ArrayMath.h" declline="418" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2047edb3d36596d9227bc1c99d54145a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="420" column="11" declfile="casa/Arrays/ArrayMath.h" declline="420" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a63c6551b7f464f1ab1b2d0b965ea833f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="422" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac72701f8ec701837b195c66dfe5cf846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="427" column="11" declfile="casa/Arrays/ArrayMath.h" declline="427" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f01f3a8c517c816938867a44979293e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator%</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="429" column="11" declfile="casa/Arrays/ArrayMath.h" declline="429" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2c314aa8b17a2896614bc3e4e0d18c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator|</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="431" column="11" declfile="casa/Arrays/ArrayMath.h" declline="431" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafcbd847147f15be08fb7ac5b78c22ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator&amp;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="433" column="11" declfile="casa/Arrays/ArrayMath.h" declline="433" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae55dc8c5a43c8ae0475d4dd142faabae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator^</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="435" column="11" declfile="casa/Arrays/ArrayMath.h" declline="435" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a81e049b538d99f4948e2eabefa5676c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="443" column="11" declfile="casa/Arrays/ArrayMath.h" declline="443" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d7adaccd706de87a93dd241d58d503b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="445" column="11" declfile="casa/Arrays/ArrayMath.h" declline="445" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1263c0b727fbe11bbe0459c9794a5847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="447" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a869f162cf021830badc9eb740714f7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="453" column="11" declfile="casa/Arrays/ArrayMath.h" declline="453" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6212903f7e359bc0293a0145e1cb594c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator%</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="455" column="11" declfile="casa/Arrays/ArrayMath.h" declline="455" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3edae59521bd0a7b4316dce2388aea8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator|</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="457" column="11" declfile="casa/Arrays/ArrayMath.h" declline="457" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3b646df42edc5196c1f4d4cef54d3f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator&amp;</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="459" column="11" declfile="casa/Arrays/ArrayMath.h" declline="459" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4e773c4e0dd7dddae9a83674837c8f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::operator^</definition>
        <argsstring>(const T &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="461" column="11" declfile="casa/Arrays/ArrayMath.h" declline="461" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6cf4822d52f4f4bf6d4447e28588df9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::cos</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="468" column="18" declfile="casa/Arrays/ArrayMath.h" declline="468" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af05c479d0c61f5cce136a1add3239ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::cosh</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="469" column="18" declfile="casa/Arrays/ArrayMath.h" declline="469" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1dbb4935d3112011f371b90a74fb778b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::exp</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="470" column="18" declfile="casa/Arrays/ArrayMath.h" declline="470" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a166a5aef3b512cfe046a53c0cccea66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::log</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="471" column="18" declfile="casa/Arrays/ArrayMath.h" declline="471" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a097e1482666f4cae0ed3723b38d2b962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::log10</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="472" column="18" declfile="casa/Arrays/ArrayMath.h" declline="472" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0d7878bae9acd24b749588b60076192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::pow</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="473" column="18" declfile="casa/Arrays/ArrayMath.h" declline="473" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a97d5df977f28b32168affeb4f4f2cc1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::pow</definition>
        <argsstring>(const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="474" column="18" declfile="casa/Arrays/ArrayMath.h" declline="474" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab8f02e2526cd44ba901328c3300d80bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::sin</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="475" column="18" declfile="casa/Arrays/ArrayMath.h" declline="475" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a856949335979234f858c010c8ad094f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::sinh</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="476" column="18" declfile="casa/Arrays/ArrayMath.h" declline="476" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7007a6f0ac4c37df2376110ec50f65d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::sqrt</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="477" column="18" declfile="casa/Arrays/ArrayMath.h" declline="477" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a883a7c7a3b6e3089d3fec6884b9a0169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::acos</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="485" column="18" declfile="casa/Arrays/ArrayMath.h" declline="485" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa85ad2d994ef87c7ec7b69b7501005a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::asin</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="486" column="18" declfile="casa/Arrays/ArrayMath.h" declline="486" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acb507568f902a2e56c3fb00d9168f132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::atan</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="487" column="18" declfile="casa/Arrays/ArrayMath.h" declline="487" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a23d78719331d233b520cf2f126090907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const Array&lt; T &gt; &amp;y, const Array&lt; T &gt; &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="488" column="18" declfile="casa/Arrays/ArrayMath.h" declline="488" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af51de58398218159305092c3366ba1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const T &amp;y, const Array&lt; T &gt; &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="489" column="18" declfile="casa/Arrays/ArrayMath.h" declline="489" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afdecacbaa87fa5c5ebcc57f903a0527e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const Array&lt; T &gt; &amp;y, const T &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="490" column="18" declfile="casa/Arrays/ArrayMath.h" declline="490" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0049baefdbf0bc81fbc671ece098bef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::ceil</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="491" column="18" declfile="casa/Arrays/ArrayMath.h" declline="491" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4861fb104ff2017605fb4cfd8cb2313c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt; T &gt; casacore::fabs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="492" column="18" declfile="casa/Arrays/ArrayMath.h" declline="492" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::abs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="493" column="18" declfile="casa/Arrays/ArrayMath.h" declline="493" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa1012d41fa360fd916f47e006d8fb93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::floor</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="494" column="18" declfile="casa/Arrays/ArrayMath.h" declline="494" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a67990756d20d8ff98761f1fbee43bc74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::round</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="495" column="18" declfile="casa/Arrays/ArrayMath.h" declline="495" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae82ac80df2a19d0fe9a726e930d4fc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::sign</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="496" column="18" declfile="casa/Arrays/ArrayMath.h" declline="496" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a567c268477381245c46030a94e36d5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="497" column="18" declfile="casa/Arrays/ArrayMath.h" declline="497" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae2db0e66839ea786a8d67914a3fb36d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>fmod</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="498" column="18" declfile="casa/Arrays/ArrayMath.h" declline="498" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a15343d9e99ac1c12e0053f2c82278337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="499" column="18" declfile="casa/Arrays/ArrayMath.h" declline="499" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa8996fa30743686e0548ca0f34b1831f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::floormod</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>floormod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="500" column="18" declfile="casa/Arrays/ArrayMath.h" declline="500" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aad24fc532c0eaca30c79a95b09a82987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::floormod</definition>
        <argsstring>(const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>floormod</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="501" column="18" declfile="casa/Arrays/ArrayMath.h" declline="501" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab5995cb1274c2188dd539e911f77e445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::floormod</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>floormod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="502" column="18" declfile="casa/Arrays/ArrayMath.h" declline="502" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a50d60aec1fe15d8920f778535b65b9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::pow</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="503" column="18" declfile="casa/Arrays/ArrayMath.h" declline="503" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7687a4c489a7dbdf2cede45c64b62d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::pow</definition>
        <argsstring>(const Array&lt; std::complex&lt; T &gt;&gt; &amp;a, const T &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="504" column="18" declfile="casa/Arrays/ArrayMath.h" declline="504" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7b78719cc5bfa9004cffbc01c1b15c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::tan</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="505" column="18" declfile="casa/Arrays/ArrayMath.h" declline="505" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1bdb140575705764d71d159383054517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::tanh</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="506" column="18" declfile="casa/Arrays/ArrayMath.h" declline="506" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af5161092e03732ed77aca918465d4269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMax</definition>
        <argsstring>(ScalarType &amp;minVal, ScalarType &amp;maxVal, IPosition &amp;minPos, IPosition &amp;maxPos, const Array&lt; ScalarType &gt; &amp;array)</argsstring>
        <name>minMax</name>
        <param>
          <type>ScalarType &amp;</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>ScalarType &amp;</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>minPos</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>maxPos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; ScalarType &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="515" column="6" declfile="casa/Arrays/ArrayMath.h" declline="515" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a530f25880013ea6d01837ceece6fcb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMax</definition>
        <argsstring>(ScalarType &amp;minVal, ScalarType &amp;maxVal, IPosition &amp;minPos, IPosition &amp;maxPos, const Array&lt; ScalarType &gt; &amp;array, const Array&lt; bool &gt; &amp;mask, bool valid=true)</argsstring>
        <name>minMax</name>
        <param>
          <type>ScalarType &amp;</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>ScalarType &amp;</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>minPos</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>maxPos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; ScalarType &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; bool &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>valid</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="521" column="6" declfile="casa/Arrays/ArrayMath.h" declline="521" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a992dbd916a83fcf607ef65785fd6af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMaxMasked</definition>
        <argsstring>(ScalarType &amp;minVal, ScalarType &amp;maxVal, IPosition &amp;minPos, IPosition &amp;maxPos, const Array&lt; ScalarType &gt; &amp;array, const Array&lt; ScalarType &gt; &amp;weight)</argsstring>
        <name>minMaxMasked</name>
        <param>
          <type>ScalarType &amp;</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>ScalarType &amp;</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>minPos</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>maxPos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; ScalarType &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; ScalarType &gt; &amp;</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="526" column="6" declfile="casa/Arrays/ArrayMath.h" declline="526" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afb9d2ed09fe96798110e43fda9b6ed4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMax</definition>
        <argsstring>(T &amp;min, T &amp;max, const Array&lt; T &gt; &amp;a)</argsstring>
        <name>minMax</name>
        <param>
          <type>T &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="538" column="17" declfile="casa/Arrays/ArrayMath.h" declline="538" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::min</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="542" column="15" declfile="casa/Arrays/ArrayMath.h" declline="542" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::max</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="545" column="15" declfile="casa/Arrays/ArrayMath.h" declline="545" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1d030028403f6f67501a5760e4d0fbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::max</definition>
        <argsstring>(Array&lt; T &gt; &amp;result, const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="549" column="17" declfile="casa/Arrays/ArrayMath.h" declline="549" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaae562ee8a019635ec697f0951f91696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::min</definition>
        <argsstring>(Array&lt; T &gt; &amp;result, const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="553" column="17" declfile="casa/Arrays/ArrayMath.h" declline="553" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6b32a4162e7c08f84ff76549e91939e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::max</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="557" column="18" declfile="casa/Arrays/ArrayMath.h" declline="557" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a44e04d6f715fefb94058db1441793f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt; T &gt; casacore::max</definition>
        <argsstring>(const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="579" column="25" bodyfile="casa/Arrays/ArrayMath.h" bodystart="579" bodyend="580" declfile="casa/Arrays/ArrayMath.h" declline="558" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a08cde059c3dd7ae842bd7f461d1276d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::min</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="561" column="18" declfile="casa/Arrays/ArrayMath.h" declline="561" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1605902cdab1dc91e71d5c878e3f444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::max</definition>
        <argsstring>(Array&lt; T &gt; &amp;result, const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="565" column="17" declfile="casa/Arrays/ArrayMath.h" declline="565" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c559a6d6f8815e2cb0bc69cc0b81cd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::max</definition>
        <argsstring>(Array&lt; T &gt; &amp;result, const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="567" column="24" bodyfile="casa/Arrays/ArrayMath.h" bodystart="567" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7a57c26a181f1ae545454c760f949c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::min</definition>
        <argsstring>(Array&lt; T &gt; &amp;result, const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="572" column="17" declfile="casa/Arrays/ArrayMath.h" declline="572" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2709ba9552c289f5e354ca2594d25dae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::min</definition>
        <argsstring>(Array&lt; T &gt; &amp;result, const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="574" column="24" bodyfile="casa/Arrays/ArrayMath.h" bodystart="574" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af6166eb04d1177e2266bb58ad10b91e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::max</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="578" column="18" declfile="casa/Arrays/ArrayMath.h" declline="578" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7d9b6715b31266714ca79f5e64001b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::min</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const T &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="582" column="18" declfile="casa/Arrays/ArrayMath.h" declline="582" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8bf2fdaecd1bb643b6c5bad4370dff6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::min</definition>
        <argsstring>(const T &amp;a, const Array&lt; T &gt; &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="583" column="25" bodyfile="casa/Arrays/ArrayMath.h" bodystart="583" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acaf3ba5102d576e6bf4679639d0340da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(Array&lt; T &gt; &amp;a, T start, T inc)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="591" column="17" declfile="casa/Arrays/ArrayMath.h" declline="591" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afdbcba3377bdc0432621d1e5fecbd80d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(Array&lt; T &gt; &amp;a)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="596" column="24" bodyfile="casa/Arrays/ArrayMath.h" bodystart="596" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3ea4d8980f28ba68f2c5d953d47e9654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(Array&lt; T &gt; &amp;a, T start)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="602" column="24" bodyfile="casa/Arrays/ArrayMath.h" bodystart="602" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afb93ac8cd5501e7ae61e22bc29c8f2bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; casacore::indgen</definition>
        <argsstring>(size_t length, T start, T inc)</argsstring>
        <name>indgen</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="607" column="26" bodyfile="casa/Arrays/ArrayMath.h" bodystart="607" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afad53c5e77f928df50b95f3f8441b71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sum</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="616" column="14" declfile="casa/Arrays/ArrayMath.h" declline="616" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a25a4b5ee631d402707994827ba290aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sumsqr</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>sumsqr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="619" column="14" declfile="casa/Arrays/ArrayMath.h" declline="619" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a822cd8c7c28fee1811751a6f5e06464a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::product</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="623" column="14" declfile="casa/Arrays/ArrayMath.h" declline="623" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e26b614348e1bd5bb067d8f136257cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::mean</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="628" column="14" declfile="casa/Arrays/ArrayMath.h" declline="628" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afff21c193856c2f80da90f58266d5812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::variance</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="637" column="14" declfile="casa/Arrays/ArrayMath.h" declline="637" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8785fd5c98a3d1d4c4c687000a2dbab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pvariance</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, size_t ddof=0)</argsstring>
        <name>pvariance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="638" column="14" declfile="casa/Arrays/ArrayMath.h" declline="638" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7f5888c73212903d5e8d48fd98ab5dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::variance</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="640" column="14" declfile="casa/Arrays/ArrayMath.h" declline="640" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2877b1fbe0be8e87b29b6d2dadaf336c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pvariance</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, T mean, size_t ddof=0)</argsstring>
        <name>pvariance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="641" column="14" declfile="casa/Arrays/ArrayMath.h" declline="641" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abad84c655c6d6ed132da25c735092bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::stddev</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="644" column="14" declfile="casa/Arrays/ArrayMath.h" declline="644" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab43611bc0c962a172845bee66e8979b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pstddev</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, size_t ddof=0)</argsstring>
        <name>pstddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="645" column="14" declfile="casa/Arrays/ArrayMath.h" declline="645" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8f09460cc49a8403afe893c4c396bdb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::stddev</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="646" column="14" declfile="casa/Arrays/ArrayMath.h" declline="646" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad21afdee865717b622057ff0c805e358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pstddev</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, T mean, size_t ddof=0)</argsstring>
        <name>pstddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="647" column="14" declfile="casa/Arrays/ArrayMath.h" declline="647" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a25e2afe37dad480fe2a7d44272759010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::avdev</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="652" column="14" declfile="casa/Arrays/ArrayMath.h" declline="652" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afc034de4a2c721f1a7f06f5b1677c921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::avdev</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="657" column="14" declfile="casa/Arrays/ArrayMath.h" declline="657" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8da3f53b6419752b499f98dc2a59f0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::rms</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>rms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="661" column="14" declfile="casa/Arrays/ArrayMath.h" declline="661" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad57252595606334077e1a08fe225d1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, std::vector&lt; T &gt; &amp;scratch, bool sorted, bool takeEvenMean, bool inPlace=false)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>scratch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="683" column="14" declfile="casa/Arrays/ArrayMath.h" declline="683" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada682fd0d9d5c4d2f9c0cd8bacb48e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted, bool takeEvenMean, bool inPlace=false)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="686" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="686" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a42153efd315acf077dd2e1906b6ab354" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="689" column="21" bodyfile="casa/Arrays/ArrayMath.h" bodystart="689" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab735095d02dfb4545e49e0e650d536ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="691" column="21" bodyfile="casa/Arrays/ArrayMath.h" bodystart="691" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a02d0f144c7fbaf82c9a997bce9473375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::medianInPlace</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted=false)</argsstring>
        <name>medianInPlace</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="694" column="21" bodyfile="casa/Arrays/ArrayMath.h" bodystart="694" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaa1c1843798bcae8f9d8c497c91547ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfm</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, std::vector&lt; T &gt; &amp;tmp, bool sorted, bool takeEvenMean, bool inPlace=false)</argsstring>
        <name>madfm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="702" column="14" declfile="casa/Arrays/ArrayMath.h" declline="702" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab2dac88c147afc3a5525e8113f3ae6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfm</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted, bool takeEvenMean, bool inPlace=false)</argsstring>
        <name>madfm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="705" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="705" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a54a6eeb0f95122c2735fb6e3ce5623c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfm</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted)</argsstring>
        <name>madfm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="708" column="21" bodyfile="casa/Arrays/ArrayMath.h" bodystart="708" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7fe605afad4df53796bcd4250fb43b6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfm</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a)</argsstring>
        <name>madfm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="710" column="21" bodyfile="casa/Arrays/ArrayMath.h" bodystart="710" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa5b84a76b1c81cd45a6fe74012d7efde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfmInPlace</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted=false)</argsstring>
        <name>madfmInPlace</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="713" column="21" bodyfile="casa/Arrays/ArrayMath.h" bodystart="713" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a695e648296e4c20d26b9fd23f9b29edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::fractile</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, std::vector&lt; T &gt; &amp;tmp, float fraction, bool sorted=false, bool inPlace=false)</argsstring>
        <name>fractile</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="725" column="14" declfile="casa/Arrays/ArrayMath.h" declline="725" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3afa369e27f055ea073cdd4451c6c0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::fractile</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, float fraction, bool sorted=false, bool inPlace=false)</argsstring>
        <name>fractile</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="728" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="728" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aee6d970adc35cad07a4b710a9126ee4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::interFractileRange</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, std::vector&lt; T &gt; &amp;tmp, float fraction, bool sorted=false, bool inPlace=false)</argsstring>
        <name>interFractileRange</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="736" column="14" declfile="casa/Arrays/ArrayMath.h" declline="736" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a25bfa921644fe2630ee7cacb28b513ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::interFractileRange</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, float fraction, bool sorted=false, bool inPlace=false)</argsstring>
        <name>interFractileRange</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="740" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="740" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a03d63f09d1910d7739620dd8a292dfdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::interHexileRange</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, std::vector&lt; T &gt; &amp;tmp, bool sorted=false, bool inPlace=false)</argsstring>
        <name>interHexileRange</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="753" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="753" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a30fcf8adb5618fe0b52243106908fc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::interHexileRange</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted=false, bool inPlace=false)</argsstring>
        <name>interHexileRange</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="757" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="757" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a15c3c8965572dbe3c1f471fb61a21e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::interQuartileRange</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, std::vector&lt; T &gt; &amp;tmp, bool sorted=false, bool inPlace=false)</argsstring>
        <name>interQuartileRange</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="767" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="767" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaa1e886890d888b72bf998613fd53abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::interQuartileRange</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, bool sorted=false, bool inPlace=false)</argsstring>
        <name>interQuartileRange</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="771" column="14" bodyfile="casa/Arrays/ArrayMath.h" bodystart="771" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a60e75f1adc321cfb40a7fc737bd426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator*=</definition>
        <argsstring>(Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="781" column="6" bodyfile="casa/Arrays/ArrayMath.h" bodystart="781" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acfdca9a527d5e3a91749abe8a38ae95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator*=</definition>
        <argsstring>(Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="789" column="6" bodyfile="casa/Arrays/ArrayMath.h" bodystart="789" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae70e0d557fb45ba6e416b359cbe54089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator/=</definition>
        <argsstring>(Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="796" column="6" bodyfile="casa/Arrays/ArrayMath.h" bodystart="796" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad8471e1977affeef959c255d94d3d80f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator/=</definition>
        <argsstring>(Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="804" column="6" bodyfile="casa/Arrays/ArrayMath.h" bodystart="804" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abe975e3efa7696171e552507c29018ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="811" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="811" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a75c5859c623d638c76ca6d90e612f7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="821" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="821" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a12b4f86a75d7cd9722dc7802a681be7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::operator*</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="830" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="830" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa35a52d4a19d34c7f07ccbca7bad2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="840" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="840" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad07036c09c62b021570d7dc875390540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; std::complex&lt; T &gt;&gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="850" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="850" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6f0ba5d5670aec3b240dd090fdd99c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::operator/</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="859" column="7" bodyfile="casa/Arrays/ArrayMath.h" bodystart="859" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aee32b64bc73ddf7eb84ed907f362063a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::makeComplex</definition>
        <argsstring>(const Array&lt; T &gt; &amp;real, const Array&lt; T &gt; &amp;imag)</argsstring>
        <name>makeComplex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>imag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="887" column="7" declfile="casa/Arrays/ArrayMath.h" declline="887" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9b857f2373cfd27861d0796bc5968017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::makeComplex</definition>
        <argsstring>(const T &amp;real, const Array&lt; T &gt; &amp;imag)</argsstring>
        <name>makeComplex</name>
        <param>
          <type>const T &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>imag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="889" column="7" declfile="casa/Arrays/ArrayMath.h" declline="889" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ebfd966967ba96baf6f5d7f605b7f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::makeComplex</definition>
        <argsstring>(const Array&lt; T &gt; &amp;real, const T &amp;imag)</argsstring>
        <name>makeComplex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>imag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="891" column="7" declfile="casa/Arrays/ArrayMath.h" declline="891" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1214f985cfed3a9b29a03f7b8c43949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::setReal</definition>
        <argsstring>(Array&lt; C &gt; &amp;carray, const Array&lt; R &gt; &amp;rarray)</argsstring>
        <name>setReal</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; C &gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="896" column="6" declfile="casa/Arrays/ArrayMath.h" declline="896" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a89a7d05ffb9bc5615b7423ad28905896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::setImag</definition>
        <argsstring>(Array&lt; C &gt; &amp;carray, const Array&lt; R &gt; &amp;rarray)</argsstring>
        <name>setImag</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; C &gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>rarray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="900" column="6" declfile="casa/Arrays/ArrayMath.h" declline="900" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad8ca0eb12ed3caaab3c02dceab1b364b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::convertArray</definition>
        <argsstring>(Array&lt; T &gt; &amp;to, const Array&lt; U &gt; &amp;from)</argsstring>
        <name>convertArray</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; U &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="974" column="6" declfile="casa/Arrays/ArrayMath.h" declline="974" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8dd1bae2626176b371eb553595306774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::square</definition>
        <argsstring>(const Array&lt; T &gt; &amp;val)</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="977" column="18" declfile="casa/Arrays/ArrayMath.h" declline="977" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a880a718291aeeca211379c695e7e563b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::cube</definition>
        <argsstring>(const Array&lt; T &gt; &amp;val)</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="980" column="18" declfile="casa/Arrays/ArrayMath.h" declline="980" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e7e0f10b06ff1965b74f5c9de33a99b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* casacore::expandRecursive</definition>
        <argsstring>(int axis, const IPosition &amp;shp, const IPosition &amp;mult, const IPosition &amp;inSteps, const T *in, T *out, const IPosition &amp;alternate)</argsstring>
        <name>expandRecursive</name>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shp</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>mult</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>inSteps</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>alternate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="984" column="3" bodyfile="casa/Arrays/ArrayMath.h" bodystart="984" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a56444694c1d2f2deae06085c9d7292a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::expandArray</definition>
        <argsstring>(Array&lt; T &gt; &amp;out, const Array&lt; T &gt; &amp;in, const IPosition &amp;alternate=IPosition())</argsstring>
        <name>expandArray</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>alternate</declname>
          <defval><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayMath.h" line="1042" column="6" bodyfile="casa/Arrays/ArrayMath.h" bodystart="1042" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6bb4f13c11e4bdca246a4a059ad672ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::rightExpandableToLeft</definition>
        <argsstring>(const IPosition &amp;leftShape, const IPosition &amp;rightShape)</argsstring>
        <name>rightExpandableToLeft</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>leftShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>rightShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayOpsDiffShapes.cc" line="31" column="6" bodyfile="casa/Arrays/ArrayOpsDiffShapes.cc" bodystart="31" bodyend="40" declfile="casa/Arrays/ArrayOpsDiffShapes.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a28c1af0c8b188c731b29b1b5577c18f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref></type>
        <definition>LogicalArray casacore::reformedMask</definition>
        <argsstring>(const Array&lt; T &gt; &amp;data, const T truthvalue, const IPosition &amp;desiredform)</argsstring>
        <name>reformedMask</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>truthvalue</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>desiredform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayOpsDiffShapes.h" line="85" column="14" declfile="casa/Arrays/ArrayOpsDiffShapes.h" declline="85" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab7d6b68f54a53029168c8673fb6591c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::binOpExpandInPlace</definition>
        <argsstring>(Array&lt; L &gt; &amp;left, const Array&lt; R &gt; &amp;right, BinaryOperator op)</argsstring>
        <name>binOpExpandInPlace</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; L &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; R &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayOpsDiffShapes.h" line="106" column="6" declfile="casa/Arrays/ArrayOpsDiffShapes.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8100023770f40f4844e89f0d8eb5d369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::fillBoxedShape</definition>
        <argsstring>(const IPosition &amp;shape, const IPosition &amp;boxSize, IPosition &amp;fullBoxSize, IPosition &amp;resultShape)</argsstring>
        <name>fillBoxedShape</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>fullBoxSize</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>resultShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.cc" line="30" column="8" bodyfile="casa/Arrays/ArrayPartMath.cc" bodystart="30" bodyend="50" declfile="casa/Arrays/ArrayPartMath.h" declline="412" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abca1edfb8b3ec513c6bb9535af930ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::fillSlidingShape</definition>
        <argsstring>(const IPosition &amp;shape, const IPosition &amp;halfBoxSize, IPosition &amp;boxEnd, IPosition &amp;resultShape)</argsstring>
        <name>fillSlidingShape</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxEnd</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>resultShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.cc" line="52" column="8" bodyfile="casa/Arrays/ArrayPartMath.cc" bodystart="52" bodyend="77" declfile="casa/Arrays/ArrayPartMath.h" declline="416" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a59d4e8ffaccd67ad90a90e550348565f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialSums</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialSums</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="106" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="106" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad4da5d4476c4265128d33e1f5296f8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialSumSqrs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialSumSqrs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="108" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="108" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43477116e7b3316ad91df19af323ec6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialProducts</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialProducts</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="110" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="110" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3852065625d1bb3e92d4e1bae5f9839e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialMins</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialMins</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="112" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="112" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab656197b2980755cf6bcaffc3f943908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialMaxs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialMaxs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="114" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="114" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9a25dd502496e5e84744bab403b36fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialMeans</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialMeans</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="116" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="116" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa90aa86acf802b6444516757393d774e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialVariances</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, size_t ddof=1)</argsstring>
        <name>partialVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="119" column="14" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9c220540d0f3038aa3fcec8a8c11feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialVariances</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, const Array&lt; T &gt; &amp;means)</argsstring>
        <name>partialVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>means</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="125" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="125" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a113f14f0627d314fed5d2dd1a4843358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialVariances</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, const Array&lt; T &gt; &amp;means, size_t ddof)</argsstring>
        <name>partialVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="127" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="127" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a06122505d9599637a961ecfad42fb9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>Array&lt;std::complex&lt;T&gt; &gt; casacore::partialVariances</definition>
        <argsstring>(const Array&lt; std::complex&lt; T &gt;&gt; &amp;array, const IPosition &amp;collapseAxes, const Array&lt; std::complex&lt; T &gt;&gt; &amp;means, size_t ddof)</argsstring>
        <name>partialVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="129" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="129" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a703d1f4a43d6d6f09c8904b36c8b4a6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialStddevs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, size_t ddof=1)</argsstring>
        <name>partialStddevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="133" column="25" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="133" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a959c9ce1ae4de8a6f5573e02ff5bee5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialStddevs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, const Array&lt; T &gt; &amp;means, size_t ddof=1)</argsstring>
        <name>partialStddevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>means</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="140" column="25" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a06340b8ac7403f02ee0f8612db004562" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialAvdevs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialAvdevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="147" column="25" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a179820f3f68f9f0de188fd36b02729a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialAvdevs</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, const Array&lt; T &gt; &amp;means)</argsstring>
        <name>partialAvdevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>means</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="153" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="153" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3864eef67a8ac420ea512cacef609730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialRmss</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialRmss</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="156" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="156" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9c3c55569baef42d6ea27e23e73df2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialMedians</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, bool takeEvenMean=false, bool inPlace=false)</argsstring>
        <name>partialMedians</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="158" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="158" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a374be3abcb8aa620ba182ed9c8abd558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialMadfms</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, bool takeEvenMean=false, bool inPlace=false)</argsstring>
        <name>partialMadfms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="162" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="162" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a7a3a0815609e0a901e340d5bd2f263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialFractiles</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, float fraction, bool inPlace=false)</argsstring>
        <name>partialFractiles</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="166" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="166" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9613d7841402fa379cab58cf03523789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialInterFractileRanges</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, float fraction, bool inPlace=false)</argsstring>
        <name>partialInterFractileRanges</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="170" column="18" declfile="casa/Arrays/ArrayPartMath.h" declline="170" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab090529df2b5391daaf6daa3a55d06f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialInterHexileRanges</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, bool inPlace=false)</argsstring>
        <name>partialInterHexileRanges</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="174" column="18" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7f06c0bb3fc47d9df59237b86563e00f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialInterQuartileRanges</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;collapseAxes, bool inPlace=false)</argsstring>
        <name>partialInterQuartileRanges</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inPlace</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="178" column="18" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafaaeaa9229e59c79df9f6f14c1368f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::partialArrayMath</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, const ArrayFunctorBase&lt; T &gt; &amp;funcObj)</argsstring>
        <name>partialArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayFunctorBase" kindref="compound">ArrayFunctorBase</ref>&lt; T &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="324" column="16" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="324" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1add8ff27470061b855bf84384405fcba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::partialArrayMath</definition>
        <argsstring>(Array&lt; RES &gt; &amp;res, const Array&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, const ArrayFunctorBase&lt; T, RES &gt; &amp;funcObj)</argsstring>
        <name>partialArrayMath</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayFunctorBase" kindref="compound">ArrayFunctorBase</ref>&lt; T, RES &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="333" column="8" declfile="casa/Arrays/ArrayPartMath.h" declline="333" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1335a6716b25695947206004c60bc474" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::boxedArrayMath</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const IPosition &amp;boxSize, const ArrayFunctorBase&lt; T &gt; &amp;funcObj)</argsstring>
        <name>boxedArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayFunctorBase" kindref="compound">ArrayFunctorBase</ref>&lt; T &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="352" column="16" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="352" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a735bbbb69a6447dd33d7dabfcdbb1cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::boxedArrayMath</definition>
        <argsstring>(Array&lt; RES &gt; &amp;, const Array&lt; T &gt; &amp;array, const IPosition &amp;boxSize, const ArrayFunctorBase&lt; T, RES &gt; &amp;funcObj)</argsstring>
        <name>boxedArrayMath</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayFunctorBase" kindref="compound">ArrayFunctorBase</ref>&lt; T, RES &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="361" column="8" declfile="casa/Arrays/ArrayPartMath.h" declline="361" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc6ce770530759b0c98f8c351533199f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::slidingArrayMath</definition>
        <argsstring>(const Array&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, const ArrayFunctorBase&lt; T &gt; &amp;funcObj, bool fillEdge=true)</argsstring>
        <name>slidingArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayFunctorBase" kindref="compound">ArrayFunctorBase</ref>&lt; T &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fillEdge</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="391" column="16" bodyfile="casa/Arrays/ArrayPartMath.h" bodystart="391" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd405ae327e4e8b28aea4631d0b59a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::slidingArrayMath</definition>
        <argsstring>(Array&lt; RES &gt; &amp;res, const Array&lt; T &gt; &amp;array, const IPosition &amp;halfBoxSize, const ArrayFunctorBase&lt; T, RES &gt; &amp;funcObj, bool fillEdge=true)</argsstring>
        <name>slidingArrayMath</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; RES &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ArrayFunctorBase" kindref="compound">ArrayFunctorBase</ref>&lt; T, RES &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fillEdge</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayPartMath.h" line="401" column="8" declfile="casa/Arrays/ArrayPartMath.h" declline="401" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a08cdb492fb27dc0681d28cbc2f188c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Array&lt; T &gt; &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="17" column="1" declfile="casa/Arrays/ArrayStr.h" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acbc351090b0c8ef765aa71eb92970d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;s, Array&lt; T &gt; &amp;x)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="59" column="14" declfile="casa/Arrays/ArrayStr.h" declline="59" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab4b0b9db3c436e10b1c133dd70d8c4fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::read</definition>
        <argsstring>(std::istream &amp;s, Array&lt; T &gt; &amp;x, const IPosition *ip=0, bool it=false)</argsstring>
        <name>read</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> *</type>
          <declname>ip</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>it</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="62" column="6" declfile="casa/Arrays/ArrayStr.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a054b11a79c96424a599df44244a36afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::readArrayBlock</definition>
        <argsstring>(std::istream &amp;s, bool &amp;trans, IPosition &amp;p, std::vector&lt; T &gt; &amp;x, const IPosition *ip=0, bool it=false)</argsstring>
        <name>readArrayBlock</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>trans</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> *</type>
          <declname>ip</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>it</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="79" column="17" declfile="casa/Arrays/ArrayStr.h" declline="79" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1064af7dcaa247581334eb88353c9de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::readAsciiMatrix</definition>
        <argsstring>(Matrix&lt; T &gt; &amp;mat, const char *fileName)</argsstring>
        <name>readAsciiMatrix</name>
        <param>
          <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="134" column="6" declfile="casa/Arrays/ArrayStr.h" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa91a289fdbd17f32f57a174564ffbb72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::writeAsciiMatrix</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;mat, const char *fileName)</argsstring>
        <name>writeAsciiMatrix</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="137" column="6" declfile="casa/Arrays/ArrayStr.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7dca4cd157d0dcbdf6f665bb905f0369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string casacore::to_string</definition>
        <argsstring>(const Array&lt; T &gt; array)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayStr.h" line="141" column="13" declfile="casa/Arrays/ArrayStr.h" declline="141" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6883fc1b9dde4ed52a8880336f5ab8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt; std::string &gt; casacore::strToVector</definition>
        <argsstring>(const std::string &amp;string, char delim=&apos;,&apos;)</argsstring>
        <name>strToVector</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
          <defval>&apos;,&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil2.cc" line="37" column="8" bodyfile="casa/Arrays/ArrayUtil2.cc" bodystart="37" bodyend="55" declfile="casa/Arrays/ArrayUtil.h" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc75fd816b75f5919f16452dd6b0e297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt; std::string &gt; casacore::strToVector</definition>
        <argsstring>(const std::string &amp;string, const std::regex &amp;delim)</argsstring>
        <name>strToVector</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::regex &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil2.cc" line="57" column="8" bodyfile="casa/Arrays/ArrayUtil2.cc" bodystart="57" bodyend="75" declfile="casa/Arrays/ArrayUtil.h" declline="98" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8f2ab095d200a4dc9b3f3267bbe2059e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::concatenateArray</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>concatenateArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil.h" line="166" column="7" declfile="casa/Arrays/ArrayUtil.h" declline="166" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a52775c5bffb8e8b40f09c48511990c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t casacore::partialFuncHelper</definition>
        <argsstring>(int &amp;nelemCont, IPosition &amp;resultShape, IPosition &amp;incr, const IPosition &amp;sourceShape, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialFuncHelper</name>
        <param>
          <type>int &amp;</type>
          <declname>nelemCont</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>resultShape</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>incr</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>sourceShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil2.cc" line="77" column="8" bodyfile="casa/Arrays/ArrayUtil2.cc" bodystart="77" bodyend="123" declfile="casa/Arrays/ArrayUtil.h" declline="182" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2a952e787c4fde898d6a14041d8f70f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::reverseArray</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;reversedAxes, bool alwaysCopy=true)</argsstring>
        <name>reverseArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>reversedAxes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysCopy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil.h" line="216" column="7" declfile="casa/Arrays/ArrayUtil.h" declline="216" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4162bf0d29fd5d602fece12234f56fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::reverseArray</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, size_t axis, bool alwaysCopy=true)</argsstring>
        <name>reverseArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysCopy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil.h" line="220" column="7" declfile="casa/Arrays/ArrayUtil.h" declline="220" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a77472c20c840bf1c6164b1d829494829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::reorderArray</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array, const IPosition &amp;newAxisOrder, bool alwaysCopy=true)</argsstring>
        <name>reorderArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>newAxisOrder</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysCopy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil.h" line="267" column="7" declfile="casa/Arrays/ArrayUtil.h" declline="267" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a14f913bdfbb2cd5b4b8eeabb64e935cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t casacore::reorderArrayHelper</definition>
        <argsstring>(IPosition &amp;newShape, IPosition &amp;incr, const IPosition &amp;shape, const IPosition &amp;newAxisOrder)</argsstring>
        <name>reorderArrayHelper</name>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>newShape</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>incr</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>newAxisOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/ArrayUtil2.cc" line="125" column="8" bodyfile="casa/Arrays/ArrayUtil2.cc" bodystart="125" bodyend="162" declfile="casa/Arrays/ArrayUtil.h" declline="293" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a626c3d220e3da0c29eb04dfc3dc94304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator+</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="565" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="565" bodyend="575" declfile="casa/Arrays/IPosition.h" declline="459" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9b34fc5d596cd34eaf12d62f403e172a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator-</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="580" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="580" bodyend="590" declfile="casa/Arrays/IPosition.h" declline="460" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af798b4cc944d8dd458fbbab3b76ad6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator*</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="595" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="595" bodyend="605" declfile="casa/Arrays/IPosition.h" declline="461" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc2c93c1a4ae579784e181e194b01cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator/</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="610" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="610" bodyend="620" declfile="casa/Arrays/IPosition.h" declline="462" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a04e11450cc1e5e72382ac55ae4eb3b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator+</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="622" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="622" bodyend="627" declfile="casa/Arrays/IPosition.h" declline="467" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4459b6d10817c902c5fc61c06e02007e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator-</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="629" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="629" bodyend="634" declfile="casa/Arrays/IPosition.h" declline="468" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a65dcb5ef720a44c18924cac72ea8acc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator*</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="636" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="636" bodyend="641" declfile="casa/Arrays/IPosition.h" declline="469" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a688e5c52a16d8e490e6e6876e323c3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator/</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="643" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="643" bodyend="648" declfile="casa/Arrays/IPosition.h" declline="470" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a34bdd6789d13dd2e2af48d3bb195b24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator+</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="650" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="650" bodyend="656" declfile="casa/Arrays/IPosition.h" declline="474" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa4f08cbca313e473e44d244ac40b8358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator-</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="658" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="658" bodyend="664" declfile="casa/Arrays/IPosition.h" declline="475" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a615409ac922de57d1f103405e4c9f441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator*</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="666" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="666" bodyend="672" declfile="casa/Arrays/IPosition.h" declline="476" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2295dd8156ab381a11e3514f61ed8a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::operator/</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="674" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="674" bodyend="680" declfile="casa/Arrays/IPosition.h" declline="477" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4b76087fcc36b94d9f4d3e07d51d455f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::max</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="682" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="682" bodyend="698" declfile="casa/Arrays/IPosition.h" declline="482" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a6cbbaf8c82dbb87c1e7e41e2158c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::min</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="703" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="703" bodyend="719" declfile="casa/Arrays/IPosition.h" declline="483" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1accfbbba30c9d5eadeefd9161a1550139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator==</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="746" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="746" bodyend="764" declfile="casa/Arrays/IPosition.h" declline="495" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa53056d8d80a868e2002e9aae712e6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator!=</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="769" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="769" bodyend="788" declfile="casa/Arrays/IPosition.h" declline="496" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a81dce5b91e28f5709238fff7ee0ec7e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&lt;</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="793" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="793" bodyend="811" declfile="casa/Arrays/IPosition.h" declline="497" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aef587164bada095d26f02d8657c53507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&lt;=</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="816" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="816" bodyend="834" declfile="casa/Arrays/IPosition.h" declline="498" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae0a81be59b1d756840f2aea86e1f86a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&gt;</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="839" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="839" bodyend="857" declfile="casa/Arrays/IPosition.h" declline="499" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a954225611feac3fb450caaec9ebb6258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&gt;=</definition>
        <argsstring>(const IPosition &amp;left, const IPosition &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="862" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="862" bodyend="880" declfile="casa/Arrays/IPosition.h" declline="500" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a14e4d2e83114f6ce4d9ea3503309095b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator==</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="882" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="882" bodyend="895" declfile="casa/Arrays/IPosition.h" declline="504" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a181671c4f5b16f8be05241e75b756b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator!=</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="897" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="897" bodyend="910" declfile="casa/Arrays/IPosition.h" declline="505" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4b87943c8e1162fcee51cb60786c743a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&lt;</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="912" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="912" bodyend="925" declfile="casa/Arrays/IPosition.h" declline="506" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac19641919339ca8ac7fb835adb824dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&lt;=</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="927" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="927" bodyend="940" declfile="casa/Arrays/IPosition.h" declline="507" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc17c5662b2bd63005f6b8493c91f527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&gt;</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="942" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="942" bodyend="955" declfile="casa/Arrays/IPosition.h" declline="508" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad0951fa4612840cf3e9cec426594490b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&gt;=</definition>
        <argsstring>(const IPosition &amp;left, ssize_t val)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="957" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="957" bodyend="970" declfile="casa/Arrays/IPosition.h" declline="509" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af9299ccbf164b67ade8c980d2d568ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator==</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="972" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="972" bodyend="985" declfile="casa/Arrays/IPosition.h" declline="513" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a95c3fe0b074d5637bea9c7fa1956ca3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator!=</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="987" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="987" bodyend="1000" declfile="casa/Arrays/IPosition.h" declline="514" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af47ca468f0208b27b2042dc8c5bf0c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&lt;</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1002" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="1002" bodyend="1015" declfile="casa/Arrays/IPosition.h" declline="515" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adbb61d6e6874d0fbb9ce7c56af0d5cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&lt;=</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1017" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="1017" bodyend="1030" declfile="casa/Arrays/IPosition.h" declline="516" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0d7d7819c57c93f9dd79ed8a18e32a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&gt;</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1032" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="1032" bodyend="1045" declfile="casa/Arrays/IPosition.h" declline="517" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aac432676fa344527c8bd443ef216ecbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::operator&gt;=</definition>
        <argsstring>(ssize_t val, const IPosition &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>ssize_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1047" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="1047" bodyend="1060" declfile="casa/Arrays/IPosition.h" declline="518" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9738457a8fff0095897ec10ac5af87ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string casacore::to_string</definition>
        <argsstring>(const IPosition &amp;ip)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1062" column="13" bodyfile="casa/Arrays/IPosition.cc" bodystart="1062" bodyend="1067" declfile="casa/Arrays/IPosition.h" declline="552" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4e93fccbe9b9625f5df913f3e949494e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IPosition &amp;ip)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1074" column="1" bodyfile="casa/Arrays/IPosition.cc" bodystart="1074" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7635e40182bbb2952bcff0b1c910f4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref></type>
        <definition>IPosition casacore::toIPositionInArray</definition>
        <argsstring>(long long offset, const IPosition &amp;shape)</argsstring>
        <name>toIPositionInArray</name>
        <param>
          <type>long long</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1098" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="1098" bodyend="1118" declfile="casa/Arrays/IPosition.h" declline="536" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4c37e6b00a4eb92fd7f1942440524cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long casacore::toOffsetInArray</definition>
        <argsstring>(const IPosition &amp;iposition, const IPosition &amp;shape)</argsstring>
        <name>toOffsetInArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>iposition</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1120" column="11" bodyfile="casa/Arrays/IPosition.cc" bodystart="1120" bodyend="1146" declfile="casa/Arrays/IPosition.h" declline="539" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0306dbfa71b4ad1729afa79ad3afd81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::isInsideArray</definition>
        <argsstring>(long long offset, const IPosition &amp;shape)</argsstring>
        <name>isInsideArray</name>
        <param>
          <type>long long</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1149" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="1149" bodyend="1152" declfile="casa/Arrays/IPosition.h" declline="547" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af10d9649cd570825b1a08a720378466a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool casacore::isInsideArray</definition>
        <argsstring>(const IPosition &amp;iposition, const IPosition &amp;shape)</argsstring>
        <name>isInsideArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>iposition</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/IPosition.cc" line="1155" column="6" bodyfile="casa/Arrays/IPosition.cc" bodystart="1155" bodyend="1178" declfile="casa/Arrays/IPosition.h" declline="548" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aabbb7df17f2909f0a4790b70ef41ba88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const MaskedArray&lt; T &gt; &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrIO.h" line="88" column="1" declfile="casa/Arrays/MaskArrIO.h" declline="88" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af5a90168d6abf8d82d57cc78789cfc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string casacore::to_string</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrIO.h" line="93" column="13" declfile="casa/Arrays/MaskArrIO.h" declline="93" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4cad0494a112af7b2b224683898ea14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="136" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="136" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1d60740fc1173c1c706337541c831b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="137" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="137" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac41156be12cf5820a566bcfcbe42f984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="138" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="138" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2b46fa710c4aa82220a255b46cae4c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="139" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="139" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a96435af49866b285a5346533df28b651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="140" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="140" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a853aef40351b6b9156a7acb640f8e626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="141" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="141" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a241b173d4615a5ee51d402855404abed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="145" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="145" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a06cc05883b200a58a01b96697def35aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>allOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="146" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="146" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae04d5f930b27ab2c2c2565203ed0d00d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="149" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="149" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afab6d17dbfe497e1551917890ba7411f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="150" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="150" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4f25bffc146254a20c3c3871c71ec2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="151" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="151" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c06611d18f58c32482f78dbe209c161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="152" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="152" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afe2a064f66afe81cc9402a381ee1d389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="153" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="153" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a48461ceb34ccd8addf122ea356e61464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="154" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="154" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1add50b2a2fc32aafc1870633ce9964216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="158" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="158" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aebebc989a146e369c54142217be982c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="159" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="159" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a95626fd1b6059d33757a42a7fcca95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="163" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a74f79f414b5b30737e2d4878924f40d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="165" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="165" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f92f8a81019618241a2cebcf0f25c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="167" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="167" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae79c3a4b0cbd6f894e6a98cc1b2f289f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="169" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="169" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6a0f78f76e5861197ae1872b9f89d6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="171" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="171" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af304891c194f446703eb10322e1039eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="173" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="173" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9497ecd904bb9d08530282b4f0b7f596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="178" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="178" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a03063f65efe7d1f9943b0059dbed8614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>allOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="180" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="180" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a753d8095c23f6b9a1c0adbbe8fcc471d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="198" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="198" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3afeac765a9d87f9d6772059df84f436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="200" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="200" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a55be66020a0cda4d0283367fe291eca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="202" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="202" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a49fdee1988c23e640f3dddd06d63bfc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="204" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="204" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51135161ee64440558465470991ad48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator==</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="206" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="206" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9a94d86ff8ebec0e8b4ff8bb61fc48b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator!=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="208" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="208" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c8139880f83ead35fdcf17b4a1d225c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="213" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="213" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd940b31c6cea672a6c4b2e51ef8263e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator||</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="215" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="215" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af3f1a0ac767e17ade3c37222b9a4f9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="219" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="219" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9b6cbf50cc1491f9bbdb2a79813ab4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="221" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="221" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a566b5c74faecf67861c590c94dca3640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="223" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="223" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac45ec0a3a7cd83d3fc8b635f4b1e47bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="225" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="225" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae872336d6bf964a07d2d66b6d3c47e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator==</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="227" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="227" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a774f6a6dbad75d182c48e7ac6ec7c301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator!=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="229" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="229" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af05a82441e236daf47c93c9baf6c33b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="234" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="234" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6a641187423c95e376a9d03d17f9c5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator||</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="236" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="236" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a63b0a7b9a708ae7425588c8b4e46d6a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="240" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="240" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae30d27fa37ec69e35715ed1bdf483db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="243" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="243" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e5a4af180899b28532e3c06e4ff8d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="246" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="246" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab766cd79744b05a1617d9ebf07afd834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="249" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="249" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a218ccd0233040b945a095921d075ebe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator==</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="252" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="252" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acf9ac4e050abab39e11d5b46a8ebc817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator!=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="255" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="255" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1dc707a71930cc63f43f32be817385da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="261" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="261" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a87c4ed67c12762f3e78fe5038a6c53d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator||</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="264" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="264" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a188074483178dbb90d7b615a9903a81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator!</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;marray)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>marray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="275" column="20" declfile="casa/Arrays/MaskArrLogi.h" declline="275" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a59e0033602e2859bb2e5a36d6913b6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="288" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="288" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adde987a4ef2c884635c48bd4522b59bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLE</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="289" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="289" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab758a059ad76a4e138a881b9d29be499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="290" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="290" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a086dace202d42b7c67033da7fe4080ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allLT</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="291" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="291" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a58ef16917f3c3cfa97298d0506073c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="292" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="292" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7934b429f2978599847a53397c79a331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGE</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="293" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="293" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af49ad05def5fb29de515ac9af829a003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="294" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="294" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a677d4a54d59b9cf70d648fde90d9171d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allGT</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="295" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="295" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f42389997b4d504737ab52a6ca81998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="296" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="296" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1bba1bf10bd61027ae9bf516426d714d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allEQ</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="297" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="297" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0f7285ba513dc3f763b4cbe60961851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="298" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="298" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a39c197e1388455ee46138cfb4c86fd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNE</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="299" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="299" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa76f5e0284a0d075c7a9037580680376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="303" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="303" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4f6cbd2c1cddae63085fd3939ff5d66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allAND</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allAND</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="304" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="304" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46598d4f7dfaded0ac687dbeb0ff0daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>allOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="305" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="305" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a925c435736d32cfd79f1aa746ab44535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allOR</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>allOR</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="306" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="306" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c2eef092b728a521318e78ed7e010f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="319" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="319" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1ba4e5e62c988a7a2a272a012b96a021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;=</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="321" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="321" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3945a09ba19f7b31a7504b42e6a37ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="323" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="323" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5eb6c0af2a8eeb962cdda2fe194aa672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&lt;</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="325" column="3" declfile="casa/Arrays/MaskArrLogi.h" declline="325" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae8517408de8643c16bbdf614604872e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="327" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="327" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa6862662f4e44e5f6643daef97574cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;=</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="329" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="329" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae4d100055ea6538ee13f7a0c9a5c7aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="331" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="331" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a074622a30c9cb7d829a8d4ca8fc91637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&gt;</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="333" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="333" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab092f4ac19bd02ddc0a3ab2c74725803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator==</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="335" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="335" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0e8c8926f6bcc204aa463f84f3d4ebe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator==</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="337" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="337" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafefffca216e39fc3a00cf5a08d14387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator!=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="339" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="339" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a56282cbaed4b1aeadb7e93b6a8e78047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator!=</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="341" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="341" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9b20d45d8c92722b186a4c62fa17722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="346" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="346" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a04a5e55366352afe33a627682364e82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator&amp;&amp;</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="348" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="348" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6078991b2ff86a51b1f7f3d0706c23bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator||</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="350" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="350" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab9d45442a1d87f007b3f776c93b03ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a2fcefc5b8c886fc497db5f36299cac4c" kindref="member">MaskedLogicalArray</ref></type>
        <definition>MaskedLogicalArray casacore::operator||</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>operator||</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="352" column="22" declfile="casa/Arrays/MaskArrLogi.h" declline="352" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa82f6af3aef43e96e01ec876fa1b8a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="377" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="377" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d178ce00bed0d42d4eb5a6146057f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="378" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="378" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae0021d377969c20687c7c1e56e1ec6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="379" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="379" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6a4c566f72733af349357c7895e487ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="380" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="380" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a848ebd7574157137f168af309b159201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="381" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="381" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a41d348e16185c15fd643691fb0b05ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="382" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="382" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a484c6576e53fb5867c0c3f5fcc6f7e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="386" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="386" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a303ea89d3bbcf286f96633668b781377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const Array&lt; T &gt; &amp;r)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="387" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="387" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a912a6cdba2cfa44797d907b1e0193123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="391" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="391" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4c8a6a89d95c91d2a24bf045b91e5ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="392" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="392" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a18ad9d3d079005ca73172e7d28187347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="393" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="393" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a54b230df00ab83b278bd9e2f65e424bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="394" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="394" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab827f8ab65e4d5cb1a8d1d4255a0f568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="395" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="395" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4633959aae48a63f240e67f89eeadd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="396" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="396" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0c190532e4e6255c210898cea09d43e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="400" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="400" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab3d15a5a87f3ad8276a2d1352b8f0750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const Array&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="401" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="401" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8b1a51c319e92dddfda6f215ee8353d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="406" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="406" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab5fa2f63a79a7972cb7817e17be1c181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="408" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="408" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9a257b9f1f06cd06817753433e203392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="410" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="410" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a237444d8f4853346e8e1326cdd0a855c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="412" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="412" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5507071f3a733d5cb499f091699c9819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="414" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="414" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af8dffdff257572ffe0429202568c529b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="416" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="416" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46b0fb3992ec2f73f8af65119319e0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="421" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="421" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1cbd6155a84dad6355ff9a732f22e489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;l, const MaskedArray&lt; T &gt; &amp;r)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="423" column="8" declfile="casa/Arrays/MaskArrLogi.h" declline="423" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a007e8ffa312ef5004ba1f2130a1acb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="441" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="441" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a700e2bc980520a1ba15d81c85e7eabe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLE</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="442" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="442" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8c9aee841baefdf91430631cfbfadb5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="443" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="443" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a31553e1c0a1194d396f39508ec7f0722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyLT</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="444" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="444" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aba6a065d4aab9782e9bafb7609911fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="445" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="445" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab1f9bfb5d81caa7c50612bcae54dbf7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGE</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="446" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="446" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5778d5c8f1f194f3a0e27a8b483ff3a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="447" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="447" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab2cdeccda0e01296622b85c5b11e8a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyGT</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="448" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="448" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a747c9628eaadda36ca52e0315cd5b3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="449" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="449" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5826aacf5f9bd5e8b411129682e424e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyEQ</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="450" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="450" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9fe6c07b460fc1bb8f133757dcbe410b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="451" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="451" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7e898c114b2df5d3860143d61367977e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyNE</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="452" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="452" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a97f2c7db1589017b97cb37e749554e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="456" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="456" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5200d9c2f216e4c8171b6bc7d79eefcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyAND</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyAND</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="457" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="457" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab1f680d74b9ca208b3ff1ef837b0e9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const T &amp;val)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="458" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="458" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a609a1bd8f096bb0d26f105c870526ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::anyOR</definition>
        <argsstring>(const T &amp;val, const MaskedArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyOR</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrLogi.h" line="459" column="17" declfile="casa/Arrays/MaskArrLogi.h" declline="459" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac09921057728a57eed07d287fbf5f073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator+=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="117" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="117" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aac2f0125a18aba62561f06e2767254a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator-=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="118" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="118" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8079c2826c27055c1bb68aad44c2fbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator*=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="119" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="119" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a66c0c6c0fb4bdc6b6a1c6f8034a90a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator/=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="120" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="120" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a98859fbefbe5ce43521320a0d33fc9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        <definition>Array&lt;T&gt;&amp; casacore::operator+=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="121" column="19" declfile="casa/Arrays/MaskArrMath.h" declline="121" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6e6b95044885c5d46a93bca6886e7a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        <definition>Array&lt;T&gt;&amp; casacore::operator-=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="122" column="19" declfile="casa/Arrays/MaskArrMath.h" declline="122" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0fa403304f7e4722a72ec2580e55341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        <definition>Array&lt;T&gt;&amp; casacore::operator*=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="123" column="19" declfile="casa/Arrays/MaskArrMath.h" declline="123" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a15e431036cc61e606aaee0bd6d1f29f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        <definition>Array&lt;T&gt;&amp; casacore::operator/=</definition>
        <argsstring>(Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="124" column="19" declfile="casa/Arrays/MaskArrMath.h" declline="124" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a563e23a345d017292dcc06413e969d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator+=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="125" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="125" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae2f7c276374e47bce8e63c09537b158c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator-=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="126" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="126" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1ed4849f525c4eb82cfb7479006a907f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator*=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="127" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="127" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5a4937eeab3297bbb95a0caf766d0633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator/=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="128" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="128" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a041067323b408f6651b3cc0a6e885389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator/=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; S &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; S &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="129" column="32" declfile="casa/Arrays/MaskArrMath.h" declline="129" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aff21fa7148445bb25213e7250e565248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator+=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="136" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="136" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a870a0d9b5d836cfcbbc03b167bf2c84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator-=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="137" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="137" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adafac1f9ece03dc913ba4de10e1f6f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator*=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="138" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="138" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6a69d7d8ad0f06cedc95134b104f6596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
        <definition>const MaskedArray&lt;T&gt;&amp; casacore::operator/=</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="139" column="31" declfile="casa/Arrays/MaskArrMath.h" declline="139" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a318576eae62ccb29fe4e678a9958b5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="145" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="145" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f9a41dade89d1d1a59f06ddd3fc97ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="146" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="146" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1863a079e23babb05bd6ba981ebd37a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="157" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="157" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a81c53e43175b7a5e6c1433b5324ef2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="158" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="158" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4faf47c6c0d4bd72874293ce87cd4b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="159" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="159" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a931c66e70493ee3bf78cf89cc9736e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="160" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="160" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a354fad9064821c358db0ad1bb6ee3887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="161" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="161" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abaa702b82411344a4ace137b9f6da4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="162" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="162" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7432a3b0c244ad428fa1f7d8350db989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="163" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="163" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afc608a38f413cdf1df3bbd1cde7bc538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="164" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="164" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a56b4b6546f0460d4468a95d0256e164d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="165" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="165" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a56f5249d4962ab37555703cc47f88c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="166" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="166" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a93ac65a3191429e1af8d502db470f929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="167" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="167" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afc2fda3c4fd1151386a41dcfdd30fbe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="168" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="168" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac8700400ec66275fdb0bfa3a9849732c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="175" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="175" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7890ca2e37b39013808d80827595be6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="176" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="176" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43e796cb4397c08463d0ec8700df4adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="177" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="177" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a933f7c76b61e7bec0c28f84c422818cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="178" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="178" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a47da551ab7a8f322f35cc9d627d02915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>MaskedArray&lt; std::complex&lt; float &gt; &gt; casacore::operator*</definition>
        <argsstring>(const MaskedArray&lt; std::complex&lt; float &gt;&gt; &amp;left, const float &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath2.cc" line="31" column="13" bodyfile="casa/Arrays/MaskArrMath2.cc" bodystart="31" bodyend="50" declfile="casa/Arrays/MaskArrMath.h" declline="179" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af260cb3b9ce6d2eb7d169cc04c660a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="186" column="25" declfile="casa/Arrays/MaskArrMath.h" declline="186" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a800d763925868965cc335781793d2704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="187" column="25" declfile="casa/Arrays/MaskArrMath.h" declline="187" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5a7dee8a21ae37f3815ffe9af23b981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="188" column="25" declfile="casa/Arrays/MaskArrMath.h" declline="188" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a87819dc815d2c5603902ab8e5616ee78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="189" column="25" declfile="casa/Arrays/MaskArrMath.h" declline="189" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abf29d5491fd77c6bb58d560d7e10c763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>MaskedArray&lt; std::complex&lt; float &gt; &gt; casacore::operator*</definition>
        <argsstring>(const float &amp;left, const MaskedArray&lt; std::complex&lt; float &gt;&gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath2.cc" line="52" column="13" bodyfile="casa/Arrays/MaskArrMath2.cc" bodystart="52" bodyend="56" declfile="casa/Arrays/MaskArrMath.h" declline="190" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afec6c0729ae2f1483ad7a3bd8d45f960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::sin</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="198" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="198" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a659942e0417f41b54374b7e3e9bf2925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::cos</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="199" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="199" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a356c086bcb9948d534a3c235e1568b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::tan</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="200" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="200" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a09bf5b57f7a2a5479f4c4783677f747b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::asin</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="201" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="201" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aef0a8023e4f3130b4fabb51c12641d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::acos</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="202" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="202" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3d6c9e116dfafe7284c3a6f84d5d8903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::atan</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="203" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="203" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7a6e65818fb49e10d315c63428c77058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::sinh</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="204" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="204" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a87e3fdae389c5243246367919151d7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::cosh</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="205" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="205" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace9e9b8ec6f4b430e94066faa23fdf7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::tanh</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="206" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="206" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa7b9517ba35391914891b4405fcc358a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::exp</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="207" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="207" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa6fdf8f8bed14a3c612617ccd0805bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::log</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="208" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="208" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae501d3bd91aa148ad56badd19c62eb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::log10</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="209" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="209" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c163fe463587009104ec6300576ca6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::sqrt</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="210" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="210" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0442dcbcc9745781ce10240ebfe517e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::abs</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="211" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="211" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0dd45b533ac6505f54596f139ed2cbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::fabs</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="212" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="212" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3b73abfd503db220a160df450cb73710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::ceil</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="213" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="213" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a40b546db82e92bd7a72cacd0c2ebebd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::floor</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="214" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="214" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa83ae44e0856b02e18aa95e759c2d2cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="225" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="225" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a325b5a13907b8e2333a1c7b5ef119a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="226" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c985a040a7dad3b3192ec48d0b8a897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="227" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="227" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4a40d4c2959362664757b10266860b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="228" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="228" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab8e9526f2726e5c2c20b6c8bd8f727d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="229" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="229" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a276c7c21348393a75a114717c208a85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="230" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="230" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a825eb27b595c5d5a7c38a61c2b0993fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="231" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="231" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a71fa6e53de680ad55802d34b24e19565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="232" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="232" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae53327e1f09b5eb717f4eaca14d712fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="233" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="233" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0502ed4e6272335ebfef2c5be6198bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="234" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="234" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a905030d74e95840522bfee7e435d2fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; U &gt; &amp;right)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; U &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="235" column="26" declfile="casa/Arrays/MaskArrMath.h" declline="235" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9b09dec7c324b7203cce875fcec5d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; U &gt; &amp;right)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; U &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="236" column="26" declfile="casa/Arrays/MaskArrMath.h" declline="236" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a244d2801369713c250807d1139f76ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; U &gt; &amp;right)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; U &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="237" column="26" declfile="casa/Arrays/MaskArrMath.h" declline="237" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f377af9d701191b7ed0853764b60acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const double &amp;right)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="238" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="238" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa946aef83c81dc7cef9a8eb55e81b334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::real</definition>
        <argsstring>(const MaskedArray&lt; std::complex&lt; T &gt;&gt; &amp;carray)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="244" column="13" bodyfile="casa/Arrays/MaskArrMath.h" bodystart="244" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad8e1cac98740ae6338d6e8e36689fbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::imag</definition>
        <argsstring>(const MaskedArray&lt; std::complex&lt; T &gt;&gt; &amp;carray)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>carray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="250" column="14" bodyfile="casa/Arrays/MaskArrMath.h" bodystart="250" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa8ed12003f3daa722ede11bc84c34e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMax</definition>
        <argsstring>(T &amp;minVal, T &amp;maxVal, IPosition &amp;minPos, IPosition &amp;maxPos, const MaskedArray&lt; T &gt; &amp;marray)</argsstring>
        <name>minMax</name>
        <param>
          <type>T &amp;</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>minPos</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>maxPos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>marray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="263" column="17" declfile="casa/Arrays/MaskArrMath.h" declline="263" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae806e439e2d37711a97ddd10eac98437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMax</definition>
        <argsstring>(T &amp;minVal, T &amp;maxVal, const MaskedArray&lt; T &gt; &amp;marray)</argsstring>
        <name>minMax</name>
        <param>
          <type>T &amp;</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>marray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="264" column="17" declfile="casa/Arrays/MaskArrMath.h" declline="264" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a183e025c56feabfbbe18d4e7d362fda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::min</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="272" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="272" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adf0b76804b972efbda8cb71ebd01ee8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="284" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="284" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acf79f8f110116c08aaed206fb3b1fed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="285" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="285" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a183ba1efb6c1514c5b72640e273254ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="286" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="286" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab6b142f01436ad21d3aa175466769e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="287" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="287" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c958892c138598d77eace00e32418f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="288" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="288" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a83ab41bd3c2e4d6fdb18f60914a449a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::min</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;result, const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="299" column="17" declfile="casa/Arrays/MaskArrMath.h" declline="299" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa14feffcd9f70b16e11e81869a7aa5b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::max</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="303" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="303" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab4ae4eab1aa02c1c7f88d63f1a22cbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="315" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="315" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d1843a6f5716178b20c494e1e48d163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const Array&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="316" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="316" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a455343df26ef3e77bf4e6cf15158eea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="317" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="317" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a626396a57ec9211ab4c14e8b5d7dd058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const T &amp;left, const MaskedArray&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="318" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="318" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a22345a1dfa7dfb9dfa18db9665df33f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="319" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="319" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3e4f85fd2e2fd0851bd6c1505b4e9769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::max</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;result, const Array&lt; T &gt; &amp;left, const Array&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="330" column="17" declfile="casa/Arrays/MaskArrMath.h" declline="330" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5b124a37356abca019e26c0b3f2684e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(MaskedArray&lt; T &gt; &amp;a, T start, T inc)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="337" column="17" declfile="casa/Arrays/MaskArrMath.h" declline="337" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a276b79472bfd9476f53f2cd956ab7764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="344" column="18" declfile="casa/Arrays/MaskArrMath.h" declline="344" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aabd51603ccf28356a82f650367beafbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(MaskedArray&lt; T &gt; &amp;a, T start)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="351" column="18" declfile="casa/Arrays/MaskArrMath.h" declline="351" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4f3ad7c5eb1bb9a4053f899cc1f7cd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sum</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="359" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="359" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5a1bcbf9e61458cc685d035dfe37a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sumsquares</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>sumsquares</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="363" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="363" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6922bd75089b95ab0b0b76c24009dbb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::product</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="368" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="368" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6d38f9c7abf029cb1fa7eaae5035d397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::mean</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="373" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="373" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a229975f73f4c736e5a217f5891ffe00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::variance</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="383" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="383" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa0d4211d4947fdb8746874ac7afe5db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pvariance</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, size_t ddof=0)</argsstring>
        <name>pvariance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="384" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="384" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aea0dc7e6227207509e5032eaf8474b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::variance</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="386" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="386" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a150183e098e1c7882d0236f4a309627a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pvariance</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, T mean, size_t ddof=0)</argsstring>
        <name>pvariance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="387" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="387" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a19488a7db7794d9f532029d8bb2ca5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::stddev</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="390" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="390" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6e2e6d76130b49dde3509d4834a804a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pstddev</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, size_t ddof=0)</argsstring>
        <name>pstddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="391" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="391" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a02eeea025e0c02b96ef81089ecb744d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::stddev</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="392" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="392" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a90b7a0a4321380c61be45962a941de05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::pstddev</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, T mean, size_t ddof=0)</argsstring>
        <name>pstddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ddof</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="393" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="393" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7b2bd29a2ef2fb186e486838f9dc55fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::avdev</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="398" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="398" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb50a1e893fc8389cc08f4f4b2d0cdb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::avdev</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="404" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="404" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a789843f9fe37f1b8f5bc0d9f8f8ea120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::rms</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a)</argsstring>
        <name>rms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="408" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="408" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af9d122b595c1681abcb4727d0397ffcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, bool sorted=false)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="423" column="21" bodyfile="casa/Arrays/MaskArrMath.h" bodystart="423" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1b82df5117bbbc1c7847c00fa96fefd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, bool sorted, bool takeEvenMean)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="425" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="425" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a24684e1986fcbf5d67eee20cc7ba86d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfm</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, bool sorted=false)</argsstring>
        <name>madfm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="432" column="21" bodyfile="casa/Arrays/MaskArrMath.h" bodystart="432" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad62b9ac305a9c0c05c093e705d9d7704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::madfm</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;a, bool sorted, bool takeEvenMean)</argsstring>
        <name>madfm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>takeEvenMean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="434" column="14" declfile="casa/Arrays/MaskArrMath.h" declline="434" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7e5dbe89dd7da60245b129e0fe8298ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::square</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;val)</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="440" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="440" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a232ff1132da3b4044d498c1bceaa14bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::cube</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;val)</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="443" column="24" declfile="casa/Arrays/MaskArrMath.h" declline="443" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a66057af4e7daf1300402e985acd699f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename FuncType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt;</type>
        <definition>MaskedArray&lt;T&gt; casacore::boxedArrayMath</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const IPosition &amp;boxSize, const FuncType &amp;funcObj)</argsstring>
        <name>boxedArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type>const FuncType &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="520" column="13" declfile="casa/Arrays/MaskArrMath.h" declline="520" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab94679daed3950472e771c537ed6166f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename FuncType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt;T&gt; casacore::slidingArrayMath</definition>
        <argsstring>(const MaskedArray&lt; T &gt; &amp;array, const IPosition &amp;halfBoxSize, const FuncType &amp;funcObj, bool fillEdge=true)</argsstring>
        <name>slidingArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type>const FuncType &amp;</type>
          <declname>funcObj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fillEdge</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskArrMath.h" line="549" column="7" declfile="casa/Arrays/MaskArrMath.h" declline="549" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a879dbd49d03b3d71abbc81f6917fdac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TLL</type>
          </param>
          <param>
            <type>typename TRR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::conform2</definition>
        <argsstring>(const MaskedArray&lt; TLL &gt; &amp;left, const Array&lt; TRR &gt; &amp;right)</argsstring>
        <name>conform2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; TLL &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; TRR &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskedArray.h" line="729" column="8" declfile="casa/Arrays/MaskedArray.h" declline="729" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8b4714c218747b98f360b2dfd90f24bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TLL</type>
          </param>
          <param>
            <type>typename TRR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::conform2</definition>
        <argsstring>(const Array&lt; TLL &gt; &amp;left, const MaskedArray&lt; TRR &gt; &amp;right)</argsstring>
        <name>conform2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; TLL &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; TRR &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskedArray.h" line="731" column="8" declfile="casa/Arrays/MaskedArray.h" declline="731" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0affd2d5a6e410dfdeb89026ff0aaa39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TLL</type>
          </param>
          <param>
            <type>typename TRR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::conform2</definition>
        <argsstring>(const MaskedArray&lt; TLL &gt; &amp;left, const MaskedArray&lt; TRR &gt; &amp;right)</argsstring>
        <name>conform2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; TLL &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MaskedArray" kindref="compound">MaskedArray</ref>&lt; TRR &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MaskedArray.h" line="733" column="8" declfile="casa/Arrays/MaskedArray.h" declline="733" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeb12c1f2c541b80d2259240f5b449298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; double &gt;</type>
        <definition>Matrix&lt; double &gt; casacore::Rot3D</definition>
        <argsstring>(int axis, double angle)</argsstring>
        <name>Rot3D</name>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="37" column="10" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="37" bodyend="54" declfile="casa/Arrays/MatrixMath.h" declline="136" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8526e15c1dd55071b94bf2dd58b10b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; float &gt;</type>
        <definition>Matrix&lt; float &gt; casacore::Rot3D</definition>
        <argsstring>(int axis, float angle)</argsstring>
        <name>Rot3D</name>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="56" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="56" bodyend="64" declfile="casa/Arrays/MatrixMath.h" declline="137" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7200d40653c614a3408a1ae3d42b55a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; float &gt;</type>
        <definition>std::complex&lt; float &gt; casacore::innerProduct</definition>
        <argsstring>(const Vector&lt; std::complex&lt; float &gt;&gt; &amp;A, const Vector&lt; std::complex&lt; float &gt;&gt; &amp;B)</argsstring>
        <name>innerProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="71" column="14" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="71" bodyend="79" declfile="casa/Arrays/MatrixMath.h" declline="53" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a97b60542a677955bf644230c8ad93753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>Matrix&lt;std::complex&lt;float&gt; &gt; casacore::conjugate</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A)</argsstring>
        <name>conjugate</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="81" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a241f7ab18188c1364735a1ac8e7b4aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>Matrix&lt; std::complex&lt; float &gt; &gt; casacore::adjoint</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A)</argsstring>
        <name>adjoint</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="86" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="86" bodyend="89" declfile="casa/Arrays/MatrixMath.h" declline="152" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a92abf11b54600b0fc20afd41a00254d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; casacore::innerProduct</definition>
        <argsstring>(const Vector&lt; std::complex&lt; double &gt;&gt; &amp;A, const Vector&lt; std::complex&lt; double &gt;&gt; &amp;B)</argsstring>
        <name>innerProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="94" column="14" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="94" bodyend="103" declfile="casa/Arrays/MatrixMath.h" declline="54" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e26b33db881ccaa026d9cd107b40fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>Matrix&lt;std::complex&lt;double&gt; &gt; casacore::conjugate</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>conjugate</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="106" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4e587f5245d2dd448e3b5d5cd7a57117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>Matrix&lt; std::complex&lt; double &gt; &gt; casacore::adjoint</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>adjoint</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="111" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="111" bodyend="114" declfile="casa/Arrays/MatrixMath.h" declline="153" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4acbf7a5e2230a66c26a42f6ce15e711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::norm</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;A)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="117" column="5" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="117" bodyend="120" declfile="casa/Arrays/MatrixMath.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac083a5be280579202b913b99c9e8f10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float casacore::norm</definition>
        <argsstring>(const Vector&lt; float &gt; &amp;A)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; float &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="123" column="7" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="123" bodyend="126" declfile="casa/Arrays/MatrixMath.h" declline="61" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a560c1acc13aa46e8bbe85551516f0971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::norm</definition>
        <argsstring>(const Vector&lt; double &gt; &amp;A)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="129" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="129" bodyend="132" declfile="casa/Arrays/MatrixMath.h" declline="62" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e7e6fe3d6e1bd0555d70b13effe033e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float casacore::norm</definition>
        <argsstring>(const Vector&lt; std::complex&lt; float &gt;&gt; &amp;A)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="135" column="7" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="135" bodyend="138" declfile="casa/Arrays/MatrixMath.h" declline="63" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0d34f5c9b1b91ecf7ee79d3f83bfef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::norm</definition>
        <argsstring>(const Vector&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="141" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="141" bodyend="144" declfile="casa/Arrays/MatrixMath.h" declline="64" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeac913dae1538fb540ddca6c338988e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::normI</definition>
        <argsstring>(const Matrix&lt; int &gt; &amp;A)</argsstring>
        <name>normI</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; int &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="147" column="5" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="147" bodyend="160" declfile="casa/Arrays/MatrixMath.h" declline="109" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc2a25569b8c4ce7fa2e8e2b493cd7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float casacore::normI</definition>
        <argsstring>(const Matrix&lt; float &gt; &amp;A)</argsstring>
        <name>normI</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; float &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="163" column="7" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="163" bodyend="176" declfile="casa/Arrays/MatrixMath.h" declline="110" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb1516a0e58ea150a58c46d0c2eb1a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::normI</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;A)</argsstring>
        <name>normI</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="179" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="179" bodyend="192" declfile="casa/Arrays/MatrixMath.h" declline="111" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adf7a8c30f8814fcefc7f91dcf63a25de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float casacore::normI</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A)</argsstring>
        <name>normI</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="195" column="7" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="195" bodyend="208" declfile="casa/Arrays/MatrixMath.h" declline="112" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7eb720abfb1071f842f6c1f8f7bde42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::normI</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>normI</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="211" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="211" bodyend="224" declfile="casa/Arrays/MatrixMath.h" declline="113" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1b313ff0a671b7394d950544f3a90020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::norm1</definition>
        <argsstring>(const Matrix&lt; int &gt; &amp;A)</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; int &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="227" column="5" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="227" bodyend="240" declfile="casa/Arrays/MatrixMath.h" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a96858a36d9101b5d080f1bd3c782e321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float casacore::norm1</definition>
        <argsstring>(const Matrix&lt; float &gt; &amp;A)</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; float &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="243" column="7" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="243" bodyend="256" declfile="casa/Arrays/MatrixMath.h" declline="121" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc91a566604db089782557bb266948f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::norm1</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;A)</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="259" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="259" bodyend="272" declfile="casa/Arrays/MatrixMath.h" declline="122" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a973c0e0907e1183f12ac54dbc66a40dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float casacore::norm1</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A)</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="275" column="7" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="275" bodyend="288" declfile="casa/Arrays/MatrixMath.h" declline="123" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a98c3920988475e9894088192497c0a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::norm1</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>norm1</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="291" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="291" bodyend="304" declfile="casa/Arrays/MatrixMath.h" declline="124" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7031f9df11e1c0fe0ca286c96ff951e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; float &gt;</type>
        <definition>Matrix&lt; float &gt; casacore::rproduct</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A, const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;B)</argsstring>
        <name>rproduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="306" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="306" bodyend="318" declfile="casa/Arrays/MatrixMath.h" declline="174" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a58eab5658534c185c4b7ca9c8342068f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; float &gt;</type>
        <definition>Vector&lt; float &gt; casacore::rproduct</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A, const Vector&lt; std::complex&lt; float &gt;&gt; &amp;x)</argsstring>
        <name>rproduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="320" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="320" bodyend="331" declfile="casa/Arrays/MatrixMath.h" declline="169" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a11f1fe99f4255fea481f2677c47f838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; std::complex&lt; float &gt; &gt;</type>
        <definition>Vector&lt; std::complex&lt; float &gt; &gt; casacore::product</definition>
        <argsstring>(const Matrix&lt; std::complex&lt; float &gt;&gt; &amp;A, const Vector&lt; float &gt; &amp;x)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; std::complex&lt; float &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="333" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="333" bodyend="344" declfile="casa/Arrays/MatrixMath.h" declline="164" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac68f6d70c164854c6f6b1344fbb71c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; int &gt;</type>
        <definition>Matrix&lt; int &gt; casacore::adjoint</definition>
        <argsstring>(const Matrix&lt; int &gt; &amp;A)</argsstring>
        <name>adjoint</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; int &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="346" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="346" bodyend="347" declfile="casa/Arrays/MatrixMath.h" declline="157" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab729d7ad1a4eef66b58261ef6ecc06d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; float &gt;</type>
        <definition>Matrix&lt; float &gt; casacore::adjoint</definition>
        <argsstring>(const Matrix&lt; float &gt; &amp;A)</argsstring>
        <name>adjoint</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; float &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="348" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="348" bodyend="349" declfile="casa/Arrays/MatrixMath.h" declline="158" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab90e9149cd30caed9804b0bbc97132a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; double &gt;</type>
        <definition>Matrix&lt; double &gt; casacore::adjoint</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;A)</argsstring>
        <name>adjoint</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Matrix2Math.cc" line="350" column="8" bodyfile="casa/Arrays/Matrix2Math.cc" bodystart="350" bodyend="351" declfile="casa/Arrays/MatrixMath.h" declline="159" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0ca76e2eb1833c6a56cb23c3b427fbb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::innerProduct</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;x, const Vector&lt; T &gt; &amp;y)</argsstring>
        <name>innerProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="52" column="15" declfile="casa/Arrays/MatrixMath.h" declline="52" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a624fedded09c1d32af7f42d9e1b99ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; casacore::crossProduct</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;x, const Vector&lt; T &gt; &amp;y)</argsstring>
        <name>crossProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="71" column="11" declfile="casa/Arrays/MatrixMath.h" declline="71" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4245403041f807df01d3a1c597f21409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::crossProduct2D</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;x, const Vector&lt; T &gt; &amp;y)</argsstring>
        <name>crossProduct2D</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="74" column="15" declfile="casa/Arrays/MatrixMath.h" declline="74" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a19789dd79b6c829004a1a2b94523082e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; casacore::product</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;x, const Matrix&lt; T &gt; &amp;yT)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>yT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="81" column="11" declfile="casa/Arrays/MatrixMath.h" declline="81" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a67336e359f080bd8a07b3b3af6c2b8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; casacore::product</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;A, const Vector&lt; T &gt; &amp;x)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="87" column="11" declfile="casa/Arrays/MatrixMath.h" declline="87" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a27d2ff54057b57f7c60163ac846a9650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; casacore::directProduct</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;x, const Vector&lt; T &gt; &amp;y)</argsstring>
        <name>directProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="96" column="11" declfile="casa/Arrays/MatrixMath.h" declline="96" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9c356e893832e3c03979e5c8314eecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; casacore::product</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;A, const Matrix&lt; T &gt; &amp;B)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="103" column="11" declfile="casa/Arrays/MatrixMath.h" declline="103" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af63f726e0b8e245242c7dd50ecf1cc6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; casacore::transpose</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;A)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="130" column="20" declfile="casa/Arrays/MatrixMath.h" declline="130" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace203dd582ab98eb16580b6ddac291a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; casacore::Rot3D</definition>
        <argsstring>(int axis, T angle)</argsstring>
        <name>Rot3D</name>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>T</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="135" column="20" declfile="casa/Arrays/MatrixMath.h" declline="135" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d956c244b14e307a25dfa972e7b413a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; casacore::directProduct</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;A, const Matrix&lt; T &gt; &amp;B)</argsstring>
        <name>directProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/MatrixMath.h" line="147" column="11" declfile="casa/Arrays/MatrixMath.h" declline="147" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad99d510c8f15e615239a0408368cd1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::copy_n_with_stride</definition>
        <argsstring>(const T *from, std::size_t n, T *to, std::size_t toStride, std::size_t fromStride)</argsstring>
        <name>copy_n_with_stride</name>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Memory.h" line="9" column="6" bodyfile="casa/Arrays/Memory.h" bodystart="9" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c8ecdc33e2779f30de0299af9705e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::move_n_with_stride</definition>
        <argsstring>(T *from, std::size_t n, T *to, std::size_t toStride, std::size_t fromStride)</argsstring>
        <name>move_n_with_stride</name>
        <param>
          <type>T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Memory.h" line="21" column="6" bodyfile="casa/Arrays/Memory.h" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a19c73dc556cb89468a2c5002d36b22bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::fill_n_with_stride</definition>
        <argsstring>(T *dest, size_t n, const T &amp;value, size_t stride)</argsstring>
        <name>fill_n_with_stride</name>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Memory.h" line="33" column="6" bodyfile="casa/Arrays/Memory.h" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abe18b96402c77c1c1e764c7070808ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Slicer &amp;slicer)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Slicer" kindref="compound">Slicer</ref> &amp;</type>
          <declname>slicer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Slicer.cc" line="251" column="1" bodyfile="casa/Arrays/Slicer.cc" bodystart="251" bodyend="259" declfile="casa/Arrays/Slicer.h" declline="442" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acc0e323a3120bc4c60ba7f3bf0fe2cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string casacore::to_string</definition>
        <argsstring>(const Slicer &amp;slicer)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Slicer" kindref="compound">Slicer</ref> &amp;</type>
          <declname>slicer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Arrays/Slicer.cc" line="261" column="13" bodyfile="casa/Arrays/Slicer.cc" bodystart="261" bodyend="266" declfile="casa/Arrays/Slicer.h" declline="444" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a94adefc1c1981ced5db0d2a343498e94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::convertScalar</definition>
        <argsstring>(T &amp;out, F in)</argsstring>
        <name>convertScalar</name>
        <param>
          <type>T &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>F</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/ConvertScalar.h" line="51" column="26" bodyfile="casa/BasicMath/ConvertScalar.h" bodystart="51" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aec54b3dca473349bb368ede7180fcb4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::convertScalar</definition>
        <argsstring>(Complex &amp;out, DComplex in)</argsstring>
        <name>convertScalar</name>
        <param>
          <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/ConvertScalar.h" line="53" column="13" bodyfile="casa/BasicMath/ConvertScalar.h" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9ab786f3dd6e80c1ead224b258bea55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::transformInPlace</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryOperator op)</argsstring>
        <name>transformInPlace</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="42" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac15cb95eceef774234ff03f96fbe14aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename UnaryOperator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::transformInPlace</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, UnaryOperator op)</argsstring>
        <name>transformInPlace</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>UnaryOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="54" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac1063cbd58b0497b55868f9df5dd872d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename Accum</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>Accum</type>
        <definition>Accum casacore::accumulateTrue</definition>
        <argsstring>(InputIterator first, InputIterator last, MaskIterator mask, Accum acc, BinaryOperator op=std::plus&lt; Accum &gt;())</argsstring>
        <name>accumulateTrue</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>Accum</type>
          <declname>acc</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
          <defval>std::plus&lt; Accum &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="66" column="16" bodyfile="casa/BasicMath/Functors.h" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc29fcdc3fb03ec16bff7457f4c58113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename Accum</type>
          </param>
          <param>
            <type>typename BinaryOperator</type>
          </param>
        </templateparamlist>
        <type>Accum</type>
        <definition>Accum casacore::accumulateFalse</definition>
        <argsstring>(InputIterator first, InputIterator last, MaskIterator mask, Accum acc, BinaryOperator op=std::plus&lt; Accum &gt;())</argsstring>
        <name>accumulateFalse</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>Accum</type>
          <declname>acc</declname>
        </param>
        <param>
          <type>BinaryOperator</type>
          <declname>op</declname>
          <defval>std::plus&lt; Accum &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="80" column="16" bodyfile="casa/BasicMath/Functors.h" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4958404c8bb26f793e289f654ce910e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAll</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, CompareOperator op)</argsstring>
        <name>compareAll</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="95" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a37910123c463918ba38e19026715935b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAllLeft</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T left, CompareOperator op)</argsstring>
        <name>compareAllLeft</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="107" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adb86476d0e44628fc59a11d9020d9946" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAllRight</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T right, CompareOperator op)</argsstring>
        <name>compareAllRight</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="119" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2890770832b538a98b2ec014bfcafb5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAny</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, CompareOperator op)</argsstring>
        <name>compareAny</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="134" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="134" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a10dc7d03bfbbfdca65dffe8067357907" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAnyLeft</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T left, CompareOperator op)</argsstring>
        <name>compareAnyLeft</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="146" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7647ef54adbd5dc89801d7ff05900157" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAnyRight</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T right, CompareOperator op)</argsstring>
        <name>compareAnyRight</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Functors.h" line="158" column="15" bodyfile="casa/BasicMath/Functors.h" bodystart="158" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a112235a46be3bd47d743c97daa19f02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(uInt val1, uInt val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="39" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="39" bodyend="50" declfile="casa/BasicMath/Math.h" declline="236" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a21b6f0ccc7b931cba5bf1de1a76a2d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(Int val1, Int val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="52" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="52" bodyend="65" declfile="casa/BasicMath/Math.h" declline="237" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a58b742794e0a50cb45c66aebe325d5fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(Float val1, Float val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="67" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="67" bodyend="84" declfile="casa/BasicMath/Math.h" declline="238" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafa444271e5a6050f2caacf599996c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(Float val1, Double val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="86" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="86" bodyend="88" declfile="casa/BasicMath/Math.h" declline="239" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c76f28b75e86c6aff87b9ece46c7fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(Double val1, Float val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="90" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="90" bodyend="92" declfile="casa/BasicMath/Math.h" declline="240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace0a6f1fc35391b4962053a17ecb2e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(Double val1, Double val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="94" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="94" bodyend="111" declfile="casa/BasicMath/Math.h" declline="241" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab5fc364b0639ab8afbe127873980b77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(uInt val1, uInt val2, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="113" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="113" bodyend="121" declfile="casa/BasicMath/Math.h" declline="265" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a789250e0ff45e4f86b23fcd714a1514e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(Int val1, Int val2, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="123" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="123" bodyend="125" declfile="casa/BasicMath/Math.h" declline="266" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a28d0b37b30c29087e3b163fe257b59e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(Float val1, Float val2, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="127" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="127" bodyend="129" declfile="casa/BasicMath/Math.h" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9cb3f6f9262255696d29710426bd59ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(Double val1, Double val2, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="131" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="131" bodyend="133" declfile="casa/BasicMath/Math.h" declline="270" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad4a067cf829533b97e5cc7ff6c9d2919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::floatNaN</definition>
        <argsstring>()</argsstring>
        <name>floatNaN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="136" column="7" bodyfile="casa/BasicMath/Math.cc" bodystart="136" bodyend="149" declfile="casa/BasicMath/Math.h" declline="342" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a658eb4509ef1c4d3748c6bf80fc377b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::doubleNaN</definition>
        <argsstring>()</argsstring>
        <name>doubleNaN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="151" column="8" bodyfile="casa/BasicMath/Math.cc" bodystart="151" bodyend="164" declfile="casa/BasicMath/Math.h" declline="343" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a579d104e2970f5e049ef1b7d0b86348e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setNaN</definition>
        <argsstring>(Float &amp;val)</argsstring>
        <name>setNaN</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="166" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="166" bodyend="168" declfile="casa/BasicMath/Math.h" declline="344" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a98a18fc037f2b950473f601b0b035d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setNaN</definition>
        <argsstring>(Double &amp;val)</argsstring>
        <name>setNaN</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="170" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="170" bodyend="172" declfile="casa/BasicMath/Math.h" declline="345" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af7eb8e28be8072c15fc7ec72eca75fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isInf</definition>
        <argsstring>(Float val)</argsstring>
        <name>isInf</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="174" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="174" bodyend="206" declfile="casa/BasicMath/Math.h" declline="351" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab6d465c4b939fdff6938576a036052e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isInf</definition>
        <argsstring>(Double val)</argsstring>
        <name>isInf</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="208" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="208" bodyend="240" declfile="casa/BasicMath/Math.h" declline="352" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac327986f5143527727c25e13dafb7c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::floatInf</definition>
        <argsstring>()</argsstring>
        <name>floatInf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="242" column="7" bodyfile="casa/BasicMath/Math.cc" bodystart="242" bodyend="262" declfile="casa/BasicMath/Math.h" declline="357" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5cf87d687db40c49c84d5e719f611132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::doubleInf</definition>
        <argsstring>()</argsstring>
        <name>doubleInf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="264" column="8" bodyfile="casa/BasicMath/Math.cc" bodystart="264" bodyend="283" declfile="casa/BasicMath/Math.h" declline="358" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae66a63bcb227648731fc42734949420c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setInf</definition>
        <argsstring>(Float &amp;val)</argsstring>
        <name>setInf</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="285" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="285" bodyend="287" declfile="casa/BasicMath/Math.h" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0c21ba8e08e8ab87ed37e92dc6f2442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setInf</definition>
        <argsstring>(Double &amp;val)</argsstring>
        <name>setInf</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="289" column="6" bodyfile="casa/BasicMath/Math.cc" bodystart="289" bodyend="291" declfile="casa/BasicMath/Math.h" declline="360" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8c556ed8ed5c54e6e527e5066662aa29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::roundDouble</definition>
        <argsstring>(Double val, Double ndigit)</argsstring>
        <name>roundDouble</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>ndigit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.cc" line="293" column="8" bodyfile="casa/BasicMath/Math.cc" bodystart="293" bodyend="307" declfile="casa/BasicMath/Math.h" declline="336" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a585186dfe59baf2d08cdd9d27b47db54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::pow</definition>
        <argsstring>(Float f1, Double f2)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="140" column="14" bodyfile="casa/BasicMath/Math.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aad9f7100d1b15bb1ce5bb9e1eb57ad97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::pow</definition>
        <argsstring>(Double f1, Float f2)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="141" column="14" bodyfile="casa/BasicMath/Math.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a167e8df7d66481a0139b97b6ecbca6fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::pow</definition>
        <argsstring>(Int f1, Int f2)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="142" column="12" bodyfile="casa/BasicMath/Math.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d2183c314e0e818eed1221d95040451" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::ifloor</definition>
        <argsstring>(Float point)</argsstring>
        <name>ifloor</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="148" column="12" bodyfile="casa/BasicMath/Math.h" bodystart="148" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8877c8aa876b0de3126784c593557379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::ifloor</definition>
        <argsstring>(Double point)</argsstring>
        <name>ifloor</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="150" column="12" bodyfile="casa/BasicMath/Math.h" bodystart="150" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a35178db4e1b1a67a645438399cd9e835" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::max</definition>
        <argsstring>(Int a, Int b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="156" column="12" bodyfile="casa/BasicMath/Math.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af30751aa0618a68828031fbd1e729fa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::min</definition>
        <argsstring>(Int a, Int b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="157" column="12" bodyfile="casa/BasicMath/Math.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7d40fc93e435233c4f4fbb4fce0d9774" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::max</definition>
        <argsstring>(uInt a, uInt b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="159" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af76fc397b1ad68f52fb77191e378b9f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::min</definition>
        <argsstring>(uInt a, uInt b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="160" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5a66e44c0e9a665da0db710e324db64e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>uInt64 casacore::max</definition>
        <argsstring>(uInt64 a, uInt64 b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="162" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a305030607771507a0e0c94d218524995" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>uInt64 casacore::min</definition>
        <argsstring>(uInt64 a, uInt64 b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="163" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3702add86f3631dc0151f22323bfe046" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::max</definition>
        <argsstring>(Double a, Double b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="165" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c960e3759b6b5620912340a1105ede8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::min</definition>
        <argsstring>(Double a, Double b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="166" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9c8db7da909c1207984c7a085e44a9d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::max</definition>
        <argsstring>(Double a, Float b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="167" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8c05672354cb05604356f605dc29af64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::min</definition>
        <argsstring>(Double a, Float b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="168" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a33a05c8f052216eae9f3062a2db038ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::max</definition>
        <argsstring>(Float a, Double b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="169" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7dd400b9a04ac561d44c3e187459666f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::min</definition>
        <argsstring>(Float a, Double b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="170" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5e601da59f3fbe214a7b76c26e7f5a7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::max</definition>
        <argsstring>(Float a, Float b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="172" column="14" bodyfile="casa/BasicMath/Math.h" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac76e15d8326d8948e1d378ae45c22096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::min</definition>
        <argsstring>(Float a, Float b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="173" column="14" bodyfile="casa/BasicMath/Math.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeda7384a761466539cd282f49dc0f00d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::square</definition>
        <argsstring>(Int val)</argsstring>
        <name>square</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="178" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a70fac9c3e0017b468205c6a440afcc8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
        <definition>Int64 casacore::square</definition>
        <argsstring>(Int64 val)</argsstring>
        <name>square</name>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="179" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a02a45f80d933cd5618b8758b11d37523" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::square</definition>
        <argsstring>(Float val)</argsstring>
        <name>square</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="180" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0e0236e66c08f426f212474dd09d9db6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::square</definition>
        <argsstring>(Double val)</argsstring>
        <name>square</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="181" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aec64835b6bb87cec496bafb1f2c0b888" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::cube</definition>
        <argsstring>(Int val)</argsstring>
        <name>cube</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="186" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1add8d17109e026afee2b2b0f20f79ecbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
        <definition>Int64 casacore::cube</definition>
        <argsstring>(Int64 val)</argsstring>
        <name>cube</name>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="187" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a47abce3e0d9dd83e9a4ef00cc5c30627" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::cube</definition>
        <argsstring>(Float val)</argsstring>
        <name>cube</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="188" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa760fe8728903970d4e9fde3da2c62ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::cube</definition>
        <argsstring>(Double val)</argsstring>
        <name>cube</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="189" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68cd52944089a5620d467b3fddf9e56a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::sign</definition>
        <argsstring>(Int val)</argsstring>
        <name>sign</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="194" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d02de40c21503c39a98d9c128579a34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
        <definition>Int64 casacore::sign</definition>
        <argsstring>(Int64 val)</argsstring>
        <name>sign</name>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="195" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1add44fb5cd5b7622e22120858c90c5e05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::sign</definition>
        <argsstring>(Float val)</argsstring>
        <name>sign</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="196" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae059135be3cffd74f6018ad5c726b9d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::sign</definition>
        <argsstring>(Double val)</argsstring>
        <name>sign</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="197" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a093e633c6265196ce8f112cfb1a2568c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::floormod</definition>
        <argsstring>(Int x, Int y)</argsstring>
        <name>floormod</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="205" column="12" bodyfile="casa/BasicMath/Math.h" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a15595e3250e0afe7e8d0dc36af273bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
        <definition>Int64 casacore::floormod</definition>
        <argsstring>(Int64 x, Int64 y)</argsstring>
        <name>floormod</name>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="211" column="14" bodyfile="casa/BasicMath/Math.h" bodystart="211" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed5b28bb07e30f98d94c2e0d14c540de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::floormod</definition>
        <argsstring>(Float x, Float y)</argsstring>
        <name>floormod</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="217" column="14" bodyfile="casa/BasicMath/Math.h" bodystart="217" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae790167eac63f0801575f00db87f848d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::floormod</definition>
        <argsstring>(Double x, Double y)</argsstring>
        <name>floormod</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="223" column="15" bodyfile="casa/BasicMath/Math.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aba64e0949b74b17a299913150d15e2fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(uInt val1, uInt val2, Double tol=1.0e-5)</argsstring>
        <name>allNear</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="248" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="248" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae009a574ef4e768489d89bc860d8b450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(Int val1, Int val2, Double tol=1.0e-5)</argsstring>
        <name>allNear</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="250" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="250" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c3a31bae6dc2584b3d4fe2a91bba973" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(Float val1, Double val2, Double tol=1.0e-5)</argsstring>
        <name>allNear</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="252" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="252" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd7ffbac0c974021e71bd038f9162907" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(Double val1, Float val2, Double tol=1.0e-5)</argsstring>
        <name>allNear</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="254" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="254" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1ace378983070ab462aa277a41c55b92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(Float val1, Float val2, Double tol=1.0e-5)</argsstring>
        <name>allNear</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="256" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="256" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1686dad291561712f8cdd0b637ef7bf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(Double val1, Double val2, Double tol=1.0e-13)</argsstring>
        <name>allNear</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-13</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="258" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="258" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a39ea6bb4c920359af3e3dce4a2b95a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(Float val1, Double val2, Double tol=1.0e-5)</argsstring>
        <name>nearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="268" column="6" declfile="casa/BasicMath/Math.h" declline="268" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a45088ad008af452838dc0d7653aa85ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(Double val1, Float val2, Double tol=1.0e-5)</argsstring>
        <name>nearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="269" column="6" declfile="casa/BasicMath/Math.h" declline="269" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a01794a8ca7a02120cdddbdf02051136c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(uInt val1, uInt val2, uInt tol=1)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>tol</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="277" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="277" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3c2e9345f7fd0eeb661f743bf06396d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(Int val1, Int val2, Int tol=1)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>tol</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="279" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="279" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4d450885473a72343aed14624cb83b91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(Float val1, Float val2, Double tol=1.0e-5)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="281" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="281" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53eb911d1d50bfa7c989b50d2e9c4bf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(Float val1, Double val2, Double tol=1.0e-5)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="283" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="283" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a721b8ea33f0f34f4a07dc4fe805e714c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(Double val1, Float val2, Double tol=1.0e-5)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="285" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="285" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60115db9c4eb5f46f77983e85730892d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(Double val1, Double val2, Double tol=1.0e-13)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val1</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-13</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="287" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="287" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9697ebe80631835ec13f505b06ae1d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isFinite</definition>
        <argsstring>(const Float &amp;val)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="295" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="295" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a07b80034281d9e27d5fd6a539278afef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isFinite</definition>
        <argsstring>(const Double &amp;val)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="303" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a58520449cf79ac7811ba1a97684e649f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isNaN</definition>
        <argsstring>(const Float &amp;val)</argsstring>
        <name>isNaN</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="317" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a250ccb345d66e3d5ded71e636f070ab3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isNaN</definition>
        <argsstring>(Double val)</argsstring>
        <name>isNaN</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Math.h" line="322" column="13" bodyfile="casa/BasicMath/Math.h" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6f49446b92876f0c4d25a24e97834e42" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>static uInt casacore::LCG</definition>
        <argsstring>(uInt x)</argsstring>
        <name>LCG</name>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/Random.cc" line="241" column="20" bodyfile="casa/BasicMath/Random.cc" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af7658bc5575abada26d1cd5a97fac668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C1</type>
          </param>
          <param>
            <type>typename C2</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAll</definition>
        <argsstring>(const C1 &amp;l, const C2 &amp;r, CompareOperator op)</argsstring>
        <name>compareAll</name>
        <param>
          <type>const C1 &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const C2 &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/StdLogical.h" line="39" column="8" bodyfile="casa/BasicMath/StdLogical.h" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acfe692813614350a493a61f4379933a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C1</type>
          </param>
          <param>
            <type>typename C2</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNear</definition>
        <argsstring>(const C1 &amp;l, const C2 &amp;r, U tolerance)</argsstring>
        <name>allNear</name>
        <param>
          <type>const C1 &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const C2 &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>U</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/StdLogical.h" line="47" column="8" bodyfile="casa/BasicMath/StdLogical.h" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a50beac74eb3c1ad3cb880cb23152f2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C1</type>
          </param>
          <param>
            <type>typename C2</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::allNearAbs</definition>
        <argsstring>(const C1 &amp;l, const C2 &amp;r, U tolerance)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type>const C1 &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const C2 &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>U</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicMath/StdLogical.h" line="52" column="8" bodyfile="casa/BasicMath/StdLogical.h" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5da7e8f190ebc4e1126bd20a31076900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Complex &amp;val1, const Complex &amp;val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="40" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="40" bodyend="52" declfile="casa/BasicSL/Complex.h" declline="266" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3e83ed4a6b06bde1a7b2dcf9ba12a7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const DComplex &amp;val1, const DComplex &amp;val2, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="54" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="54" bodyend="62" declfile="casa/BasicSL/Complex.h" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9697e5fdeebc0cd23a747a4c7115bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Complex &amp;val1, const Complex &amp;val2, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="64" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="64" bodyend="67" declfile="casa/BasicSL/Complex.h" declline="268" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5786773ef1f1598cf91e8ecc787e8faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const DComplex &amp;val1, const DComplex &amp;val2, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="68" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="68" bodyend="71" declfile="casa/BasicSL/Complex.h" declline="269" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aedfbdfea147805da181f886305ef091b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isNaN</definition>
        <argsstring>(const Complex &amp;val)</argsstring>
        <name>isNaN</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="75" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="75" bodyend="78" declfile="casa/BasicSL/Complex.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a91e9ae522274b21b8a72b0025465df59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isNaN</definition>
        <argsstring>(const DComplex &amp;val)</argsstring>
        <name>isNaN</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="79" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="79" bodyend="82" declfile="casa/BasicSL/Complex.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a580e8aff712fb5a9616fafdcc233c620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setNaN</definition>
        <argsstring>(Complex &amp;val)</argsstring>
        <name>setNaN</name>
        <param>
          <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="83" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="83" bodyend="88" declfile="casa/BasicSL/Complex.h" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a42cc376e5d5e21a0f6d87b9a34649dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setNaN</definition>
        <argsstring>(DComplex &amp;val)</argsstring>
        <name>setNaN</name>
        <param>
          <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="89" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="89" bodyend="94" declfile="casa/BasicSL/Complex.h" declline="190" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a81eab78717c2a8f5b80940014fcdb479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isInf</definition>
        <argsstring>(const Complex &amp;val)</argsstring>
        <name>isInf</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="98" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="98" bodyend="101" declfile="casa/BasicSL/Complex.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a049fa1d4b0ef08f87fe800f5b3887ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isInf</definition>
        <argsstring>(const DComplex &amp;val)</argsstring>
        <name>isInf</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="102" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="102" bodyend="105" declfile="casa/BasicSL/Complex.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a16341ab5aef4203462cb2ceda2ff5c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setInf</definition>
        <argsstring>(Complex &amp;val)</argsstring>
        <name>setInf</name>
        <param>
          <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="106" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="106" bodyend="111" declfile="casa/BasicSL/Complex.h" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a50915fc8be68181c2b95462ea4ee1dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::setInf</definition>
        <argsstring>(DComplex &amp;val)</argsstring>
        <name>setInf</name>
        <param>
          <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="112" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="112" bodyend="117" declfile="casa/BasicSL/Complex.h" declline="192" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb20457eae90a3e568a682361f400f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isFinite</definition>
        <argsstring>(const Complex &amp;val)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="122" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="122" bodyend="125" declfile="casa/BasicSL/Complex.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af8fa770b385334156a8003fe4eb77860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isFinite</definition>
        <argsstring>(const DComplex &amp;val)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="126" column="6" bodyfile="casa/BasicSL/Complex.cc" bodystart="126" bodyend="129" declfile="casa/BasicSL/Complex.h" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad0402f7d774969816e4c6b8301a1dd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::fmod</definition>
        <argsstring>(const DComplex &amp;in, const DComplex &amp;f)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="133" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="133" bodyend="134" declfile="casa/BasicSL/Complex.h" declline="313" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43706fd20d86e0301d70a68aaf2ccc30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::fmod</definition>
        <argsstring>(const Complex &amp;in, const Complex &amp;f)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="135" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="135" bodyend="136" declfile="casa/BasicSL/Complex.h" declline="314" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adb7838a4d2481f1bca572dce4320a4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::atan</definition>
        <argsstring>(const DComplex &amp;in)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="139" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="139" bodyend="143" declfile="casa/BasicSL/Complex.h" declline="322" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a03912a4ffdf70145166cf7958b953a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::atan</definition>
        <argsstring>(const Complex &amp;in)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="144" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="144" bodyend="148" declfile="casa/BasicSL/Complex.h" declline="323" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae1e2c52f71df6e6fdf88bfb1e0be5c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::asin</definition>
        <argsstring>(const DComplex &amp;in)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="149" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="149" bodyend="151" declfile="casa/BasicSL/Complex.h" declline="324" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2f96fd81bbe34e8fb9cc6516f7aabff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::asin</definition>
        <argsstring>(const Complex &amp;in)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="152" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="152" bodyend="154" declfile="casa/BasicSL/Complex.h" declline="325" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a61551b0ad493125902cfc02237443c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::acos</definition>
        <argsstring>(const DComplex &amp;in)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="155" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="155" bodyend="157" declfile="casa/BasicSL/Complex.h" declline="326" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aff44deddc4501148185240232e7c56c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::acos</definition>
        <argsstring>(const Complex &amp;in)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="158" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="158" bodyend="160" declfile="casa/BasicSL/Complex.h" declline="327" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2bc85673d167c1c5183cc8334b34ca1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::atan2</definition>
        <argsstring>(const DComplex &amp;in, const DComplex &amp;t2)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="161" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="161" bodyend="166" declfile="casa/BasicSL/Complex.h" declline="328" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8604dd3c68ccf285df8be8ed80b446fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::atan2</definition>
        <argsstring>(const Complex &amp;in, const Complex &amp;t2)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="167" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="167" bodyend="172" declfile="casa/BasicSL/Complex.h" declline="329" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43a9d98629c8ee8ae6b22ce0782dfeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::erf</definition>
        <argsstring>(const DComplex &amp;in)</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Temporary solutions only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="174" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="174" bodyend="176" declfile="casa/BasicSL/Complex.h" declline="338" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab446dae5b34fecaa921c2aef32f619b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::erf</definition>
        <argsstring>(const Complex &amp;in)</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="177" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="177" bodyend="179" declfile="casa/BasicSL/Complex.h" declline="339" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad236bc4c1c70715152f270c980736b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::erfc</definition>
        <argsstring>(const DComplex &amp;in)</argsstring>
        <name>erfc</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="180" column="10" bodyfile="casa/BasicSL/Complex.cc" bodystart="180" bodyend="182" declfile="casa/BasicSL/Complex.h" declline="340" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a65162fe6cf6c71ee64c37a6a4e9acd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::erfc</definition>
        <argsstring>(const Complex &amp;in)</argsstring>
        <name>erfc</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.cc" line="183" column="9" bodyfile="casa/BasicSL/Complex.cc" bodystart="183" bodyend="185" declfile="casa/BasicSL/Complex.h" declline="341" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac24123b5aa171cb4afa85593c6a9e3e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const Complex &amp;left, const Complex &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="174" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="174" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60e5fd6b5a26b858d8c41122a1bd9789" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const Complex &amp;left, const Complex &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="176" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="176" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac164ff2636ca56e24ae6b0643aa80690" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const Complex &amp;left, const Complex &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="178" column="8" bodyfile="casa/BasicSL/Complex.h" bodystart="178" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af1814b035afe2e8cd453ae78e9708dd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const Complex &amp;left, const Complex &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="180" column="8" bodyfile="casa/BasicSL/Complex.h" bodystart="180" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6ed30bf4822527b14f8d15ec6dc46623" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const DComplex &amp;left, const DComplex &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="200" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="200" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad49608b7561fce8eebb2709d061aeeae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const DComplex &amp;left, const DComplex &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="202" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="202" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8fdeacd117e9e8fb87baa5e11b4221ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const DComplex &amp;left, const DComplex &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="204" column="8" bodyfile="casa/BasicSL/Complex.h" bodystart="204" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9397b1131239764956c762885bb1db0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const DComplex &amp;left, const DComplex &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="206" column="8" bodyfile="casa/BasicSL/Complex.h" bodystart="206" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1addabb75afbda413169d86490bf6db891" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::fabs</definition>
        <argsstring>(const DComplex &amp;val)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="216" column="15" bodyfile="casa/BasicSL/Complex.h" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a201be824e711334c01f3997043317c1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::fabs</definition>
        <argsstring>(const Complex &amp;val)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="217" column="14" bodyfile="casa/BasicSL/Complex.h" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3713b1e7d5d879f1c9fb8e09e25c3a54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::square</definition>
        <argsstring>(const DComplex &amp;val)</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="219" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afcc4a21028d184db95f7fc128e3a3631" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::square</definition>
        <argsstring>(const Complex &amp;val)</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="220" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a176a2d7209e11ab2fe1db6fbfe647be5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::cube</definition>
        <argsstring>(const DComplex &amp;val)</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="222" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46b1e4691377d8216197bc0b72c3cf56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::cube</definition>
        <argsstring>(const Complex &amp;val)</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="223" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a79cd38901e9cb940b917501d7934da9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::operator+</definition>
        <argsstring>(const DComplex &amp;d, const Complex &amp;c)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>inline Complex pow(const Complex&amp; val, Double p) { return std::pow(val,Float(p)); } </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="229" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adcd241c2806634e67e40cf2c0c98df25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::operator+</definition>
        <argsstring>(const Complex &amp;c, const DComplex &amp;d)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="233" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a66860e334dc8b4e3ce0bdbb24fb3a85e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::operator-</definition>
        <argsstring>(const DComplex &amp;d, const Complex &amp;c)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="237" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5009e52cdcb1e4405dfb144fea945f47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::operator-</definition>
        <argsstring>(const Complex &amp;c, const DComplex &amp;d)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="241" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab9aa703c17e03c3a95016b186e519c56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator*</definition>
        <argsstring>(const Complex &amp;val, Double f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="247" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae045b9be08d10f26d1d5a0b835e81f66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator*</definition>
        <argsstring>(Double f, const Complex &amp;val)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="248" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a762a48ff3a858263215699a0fcda1d18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator/</definition>
        <argsstring>(const Complex &amp;val, Double f)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="249" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a48b709d06ce0bd7400b542f3fa3148ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator/</definition>
        <argsstring>(Double f, const Complex &amp;val)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="250" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1856c1564a6eada19723775ae465830f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator*</definition>
        <argsstring>(const Complex &amp;val, Int f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="255" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aad78eddb3f7bafc1c9b8f1276af71f81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator*</definition>
        <argsstring>(Int f, const Complex &amp;val)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="256" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c344530e22ba958785e9b1a137b7627" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator/</definition>
        <argsstring>(const Complex &amp;val, Int f)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="257" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0bfe6b7c7b487e67dab11f4bcd56e9a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::operator/</definition>
        <argsstring>(Int f, const Complex &amp;val)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="258" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a65015bb205e9c4f9c3e87214e5f5b930" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(const Complex &amp;val1, const Complex &amp;val2, Double tol=1.0e-5)</argsstring>
        <name>allNear</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="270" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae1862ebb9e6314c392fa69d96175d9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNear</definition>
        <argsstring>(const DComplex &amp;val1, const DComplex &amp;val2, Double tol=1.0e-13)</argsstring>
        <name>allNear</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-13</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="273" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc9adbc408f6e8b645537ce29da28fd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(const Complex &amp;val1, const Complex &amp;val2, Double tol=1.0e-5)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="276" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af429ffdb435bfc120cafa84cff143954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNearAbs</definition>
        <argsstring>(const DComplex &amp;val1, const DComplex &amp;val2, Double tol=1.0e-13)</argsstring>
        <name>allNearAbs</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
          <defval>1.0e-13</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="279" column="13" bodyfile="casa/BasicSL/Complex.h" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae0c18fce3b7426df4a7490e1bc49b9ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::max</definition>
        <argsstring>(const Complex &amp;x, const Complex &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="288" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="288" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0e07ac0f53b273b95e2d6b27340b92ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::max</definition>
        <argsstring>(const DComplex &amp;x, const DComplex &amp;y)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="290" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="290" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae1bc64a5116491446522fec2f2b556c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::min</definition>
        <argsstring>(const Complex &amp;x, const Complex &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="293" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="293" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9218b5fbb97ee91e757cfc3846758755" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::min</definition>
        <argsstring>(const DComplex &amp;x, const DComplex &amp;y)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="295" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="295" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2662d58b60c2bf7299801ba219cfc3a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::floor</definition>
        <argsstring>(const Complex &amp;x)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="298" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="298" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad8eb8807e50711bb9db329b298bd946a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::floor</definition>
        <argsstring>(const DComplex &amp;x)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="300" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="300" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac56500be1baf13669fa709086ed67b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
        <definition>Complex casacore::ceil</definition>
        <argsstring>(const Complex &amp;x)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="303" column="16" bodyfile="casa/BasicSL/Complex.h" bodystart="303" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4d501883cc475a16052693875c554620" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
        <definition>DComplex casacore::ceil</definition>
        <argsstring>(const DComplex &amp;x)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/Complex.h" line="305" column="17" bodyfile="casa/BasicSL/Complex.h" bodystart="305" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aad10e2e1d99fb019a107e2d4d2c5aecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const IComplex &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IComplex" kindref="compound">IComplex</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/IComplex.cc" line="32" column="1" bodyfile="casa/BasicSL/IComplex.cc" bodystart="32" bodyend="36" declfile="casa/BasicSL/IComplex.h" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a78739f344f75060477359d78ac8f563d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const std::pair&lt; T, U &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::pair&lt; T, U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="117" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="117" bodyend="121" declfile="casa/BasicSL/STLIO.h" declline="44" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8a5ec369f09f8829d53452061641280f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="126" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="126" bodyend="130" declfile="casa/BasicSL/STLIO.h" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d017eae1c61e3513f85ad12edad2ee2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const std::set&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="135" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="135" bodyend="139" declfile="casa/BasicSL/STLIO.h" declline="50" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a16ed631ac110f229c8aeeb94bb3e22a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const std::list&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::list&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="144" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="144" bodyend="148" declfile="casa/BasicSL/STLIO.h" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1401677cccae32a1104a7b259ac48585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const std::map&lt; T, U &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::map&lt; T, U &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="153" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="153" bodyend="157" declfile="casa/BasicSL/STLIO.h" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51644a11ebbe159931a9c481bbdad6bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ITER</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::showDataIter</definition>
        <argsstring>(ostream &amp;, ITER begin, const ITER &amp;end, const char *separator=&quot;,&quot;, const char *prefix=&quot;[&quot;, const char *postfix=&quot;]&quot;)</argsstring>
        <name>showDataIter</name>
        <param>
          <type>ostream &amp;</type>
        </param>
        <param>
          <type>ITER</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const ITER &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
          <defval>&quot;,&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
          <defval>&quot;[&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>postfix</declname>
          <defval>&quot;]&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="98" column="19" declfile="casa/BasicSL/STLIO.h" declline="98" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ddc54877e625d936504b95005ce2e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTAINER</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::showContainer</definition>
        <argsstring>(ostream &amp;os, const CONTAINER &amp;c, const char *separator=&quot;,&quot;, const char *prefix=&quot;[&quot;, const char *postfix=&quot;]&quot;)</argsstring>
        <name>showContainer</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
          <defval>&quot;,&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
          <defval>&quot;[&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>postfix</declname>
          <defval>&quot;]&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="109" column="19" bodyfile="casa/BasicSL/STLIO.h" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8caffe9414d334f71e10a59f8570472a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const std::vector&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="162" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="162" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afcb54e8e7dd1a2e723fc7ca9d6946ce2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const std::set&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="165" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="165" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a01cdbb81bb25246f38970b03e35f23bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const std::list&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::list&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="168" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="168" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af9aa1e6a46a26fc59b27d5988baed980" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const std::map&lt; T, U &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::map&lt; T, U &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="171" column="10" bodyfile="casa/BasicSL/STLIO.h" bodystart="171" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a22930699415d581b88cefb9b3520f65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;ios, std::vector&lt; T &gt; &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="180" column="10" declfile="casa/BasicSL/STLIO.h" declline="180" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8b0a539f89e33c08d347f686fa59a7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;ios, const std::vector&lt; T &gt; &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="182" column="3" declfile="casa/BasicSL/STLIO.h" declline="182" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1de344da5b13d6348238a36360141cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;ios, std::map&lt; K, V &gt; &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>std::map&lt; K, V &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="190" column="10" declfile="casa/BasicSL/STLIO.h" declline="190" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af9281cb2e3767ce9f3b2f5f84f33c715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;ios, const std::map&lt; K, V &gt; &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLIO.h" line="192" column="3" declfile="casa/BasicSL/STLIO.h" declline="192" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7ee5f287503a60219a5be6cc0219be76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::throwContainerSizes</definition>
        <argsstring>(const char *name, size_t l1, size_t l2)</argsstring>
        <name>throwContainerSizes</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLMath.cc" line="33" column="8" bodyfile="casa/BasicSL/STLMath.cc" bodystart="33" bodyend="39" declfile="casa/BasicSL/STLMath.h" declline="58" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0cb631b006efc65b428aa105737c9819" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CONTAINER</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::checkContainerSizes</definition>
        <argsstring>(const CONTAINER &amp;left, const CONTAINER &amp;right, const char *name)</argsstring>
        <name>checkContainerSizes</name>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLMath.h" line="62" column="15" bodyfile="casa/BasicSL/STLMath.h" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afc4a066d9743b8a5e1a6e5a78499d412" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CONTAINER</type>
          </param>
        </templateparamlist>
        <type>CONTAINER</type>
        <definition>CONTAINER casacore::reversedCasaContainer</definition>
        <argsstring>(const CONTAINER &amp;in)</argsstring>
        <name>reversedCasaContainer</name>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLMath.h" line="72" column="20" bodyfile="casa/BasicSL/STLMath.h" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab5dd8f4c2bee147c3ed16bc3b1ff3900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;left, const std::vector&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLMath.h" line="84" column="15" bodyfile="casa/BasicSL/STLMath.h" bodystart="84" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1eaacbdfc454e45108ee05028099d668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/STLMath.h" line="96" column="15" bodyfile="casa/BasicSL/STLMath.h" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a45060e4beb2fe456f77156166ad71f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::reverse</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>reverse</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="447" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="447" bodyend="451" declfile="casa/BasicSL/String.h" declline="991" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a917aa1ea03f22bd101ec6ce10e6eb423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::upcase</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>upcase</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="453" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="453" bodyend="457" declfile="casa/BasicSL/String.h" declline="993" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c309659effb714b791296065ee5cc20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::downcase</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>downcase</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="459" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="459" bodyend="463" declfile="casa/BasicSL/String.h" declline="995" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a11603b0b108aed05e1adeb5a69681786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::capitalize</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>capitalize</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="465" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="465" bodyend="469" declfile="casa/BasicSL/String.h" declline="998" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a11a012340a6dd4bdc0668c441483fb9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::trim</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>trim</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="471" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="471" bodyend="475" declfile="casa/BasicSL/String.h" declline="1000" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abfa60b43c002c3ed64a35a06f0e9d7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::replicate</definition>
        <argsstring>(Char c, String::size_type n)</argsstring>
        <name>replicate</name>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1String_1aa1d1c5a51fc697d73f49d870607537c4" kindref="member">String::size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="477" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="477" bodyend="479" declfile="casa/BasicSL/String.h" declline="982" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4ee697faccdb29c6895f9803e42d3299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::replicate</definition>
        <argsstring>(const string &amp;str, String::size_type n)</argsstring>
        <name>replicate</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1String_1aa1d1c5a51fc697d73f49d870607537c4" kindref="member">String::size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="481" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="481" bodyend="486" declfile="casa/BasicSL/String.h" declline="983" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad439d9e45014746a90d7f567eab9a310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::split</definition>
        <argsstring>(const string &amp;str, string res[], Int maxn, const string &amp;sep)</argsstring>
        <name>split</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>string</type>
          <declname>res</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>maxn</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="488" column="5" bodyfile="casa/BasicSL/String.cc" bodystart="488" bodyend="500" declfile="casa/BasicSL/String.h" declline="967" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac88803d1d4ffe9a1bf7928fd0bf00348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::split</definition>
        <argsstring>(const string &amp;str, string res[], Int maxn, const Regex &amp;sep)</argsstring>
        <name>split</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>string</type>
          <declname>res</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>maxn</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref> &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="502" column="5" bodyfile="casa/BasicSL/String.cc" bodystart="502" bodyend="515" declfile="casa/BasicSL/String.h" declline="971" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7afc1afed563ebad5911701909df903d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::split</definition>
        <argsstring>(const string &amp;str, string res[], Int maxn, const Char sep)</argsstring>
        <name>split</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>string</type>
          <declname>res</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>maxn</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="517" column="5" bodyfile="casa/BasicSL/String.cc" bodystart="517" bodyend="520" declfile="casa/BasicSL/String.h" declline="969" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8411eaf8c10252865fa17f89a4b875be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::common_prefix</definition>
        <argsstring>(const string &amp;x, const string &amp;y, Int startpos)</argsstring>
        <name>common_prefix</name>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>startpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="522" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="522" bodyend="532" declfile="casa/BasicSL/String.h" declline="978" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a97fec351af16c4d12cc7b607e1f24360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::common_suffix</definition>
        <argsstring>(const string &amp;x, const string &amp;y, Int startpos)</argsstring>
        <name>common_suffix</name>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>startpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="534" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="534" bodyend="544" declfile="casa/BasicSL/String.h" declline="980" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab516bfc6e0f586fcfb33ab4319976a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::join</definition>
        <argsstring>(string src[], Int n, const string &amp;sep)</argsstring>
        <name>join</name>
        <param>
          <type>string</type>
          <declname>src</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="546" column="8" bodyfile="casa/BasicSL/String.cc" bodystart="546" bodyend="553" declfile="casa/BasicSL/String.h" declline="984" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6e4d89b03ecec7e5decac5451a272f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::fcompare</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>fcompare</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="namespacecasacore_1a1c309659effb714b791296065ee5cc20" kindref="member">x.downcase()</ref>; <ref refid="namespacecasacore_1a1c309659effb714b791296065ee5cc20" kindref="member">y.downcase()</ref>; return x.compare(y);</para>
        </inbodydescription>
        <location file="casa/BasicSL/String.cc" line="555" column="5" bodyfile="casa/BasicSL/String.cc" bodystart="555" bodyend="579" declfile="casa/BasicSL/String.h" declline="959" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3004573a1959715d3ae577a44d4e1c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::operator+</definition>
        <argsstring>(const String &amp;lhs, const String &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="894" column="15" bodyfile="casa/BasicSL/String.h" bodystart="894" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2d6b291dbbc2afba6da622ff30cb8c6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::operator+</definition>
        <argsstring>(const Char *lhs, const String &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="896" column="15" bodyfile="casa/BasicSL/String.h" bodystart="896" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab2136af5fbd02a42476714111b3fd974" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::operator+</definition>
        <argsstring>(Char lhs, const String &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="898" column="15" bodyfile="casa/BasicSL/String.h" bodystart="898" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2b0f83bb6958d3c1c9ca5e5d2a860788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::operator+</definition>
        <argsstring>(const String &amp;lhs, const Char *rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="900" column="15" bodyfile="casa/BasicSL/String.h" bodystart="900" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab1cbce3a0ba8dfc5bb37e089215dc00d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::operator+</definition>
        <argsstring>(const String &amp;lhs, Char rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="902" column="15" bodyfile="casa/BasicSL/String.h" bodystart="902" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9668b55728c232d28d39ada7ef6f145c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="912" column="13" bodyfile="casa/BasicSL/String.h" bodystart="912" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae19f1bef8b11d1abc3e32929308529da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="914" column="13" bodyfile="casa/BasicSL/String.h" bodystart="914" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5fca1591a321bb07dfd8f73cd6d7d716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="916" column="13" bodyfile="casa/BasicSL/String.h" bodystart="916" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9636bc37a053e893f72cc93a82cbdc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="918" column="13" bodyfile="casa/BasicSL/String.h" bodystart="918" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a92a2e9504df1dae7a171eeb5fd395d75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="920" column="8" bodyfile="casa/BasicSL/String.h" bodystart="920" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d365cdb150b8e350bd837094dc16671" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const String &amp;x, const String &amp;y)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="922" column="8" bodyfile="casa/BasicSL/String.h" bodystart="922" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a63c47244047dac15bde04bd2aa34705c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const String &amp;x, const Char *t)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="924" column="13" bodyfile="casa/BasicSL/String.h" bodystart="924" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aad92327d9e8756b31f65d8ed90923dca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const String &amp;x, const Char *t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="926" column="13" bodyfile="casa/BasicSL/String.h" bodystart="926" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a07c3af215ff2e6d300ee76f8a988fa27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const String &amp;x, const Char *t)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="928" column="13" bodyfile="casa/BasicSL/String.h" bodystart="928" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a20bfaa3a48262d3993d9b5de02dab355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const String &amp;x, const Char *t)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="930" column="13" bodyfile="casa/BasicSL/String.h" bodystart="930" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5d46a6bf26f59282d8bda52fcb528e77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const String &amp;x, const Char *t)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="932" column="8" bodyfile="casa/BasicSL/String.h" bodystart="932" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9fc75f33b9f57f17b96a34d20695bb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const String &amp;x, const Char *t)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="934" column="8" bodyfile="casa/BasicSL/String.h" bodystart="934" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afd023ec7588442b0d93b4000393fbdcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const String &amp;x, const Char t)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="936" column="13" bodyfile="casa/BasicSL/String.h" bodystart="936" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a71e190e16f53b672534e83f15c845bf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const String &amp;x, const Char t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="938" column="13" bodyfile="casa/BasicSL/String.h" bodystart="938" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6826cbe81957a84a056d31a5137be497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const String &amp;x, const Char t)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="940" column="13" bodyfile="casa/BasicSL/String.h" bodystart="940" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac3761aec87492107f060aa558fd75fb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const String &amp;x, const Char t)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="942" column="13" bodyfile="casa/BasicSL/String.h" bodystart="942" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a89a75df8f34ef290bc1a41aa12099dc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const String &amp;x, const Char t)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="944" column="8" bodyfile="casa/BasicSL/String.h" bodystart="944" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a335114eed9687b27937a4e2d5223ced2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const String &amp;x, const Char t)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="946" column="8" bodyfile="casa/BasicSL/String.h" bodystart="946" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afe06cf1482a2548294f4773a8067b73d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::compare</definition>
        <argsstring>(const string &amp;x, const string &amp;y)</argsstring>
        <name>compare</name>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="951" column="12" bodyfile="casa/BasicSL/String.h" bodystart="951" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a508c8ef9c09bd541ed362aa14b77d618" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::compare</definition>
        <argsstring>(const string &amp;x, const Char *y)</argsstring>
        <name>compare</name>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="953" column="12" bodyfile="casa/BasicSL/String.h" bodystart="953" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4dc363915eb92f16ff9efbfe647b2335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::compare</definition>
        <argsstring>(const string &amp;x, const Char y)</argsstring>
        <name>compare</name>
        <param>
          <type>const string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="955" column="12" bodyfile="casa/BasicSL/String.h" bodystart="955" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae7adfc696a16b6a1618b731bb50d185d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;s, const String &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/BasicSL/String.h" line="1030" column="8" bodyfile="casa/BasicSL/String.h" bodystart="1030" bodyend="1031" declfile="casa/BasicSL/String.h" declline="1006" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a73229c80012490d15b12e22bf7a931b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>ALIGNMENT</declname>
            <defname>ALIGNMENT</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::operator==</definition>
        <argsstring>(const casacore_allocator&lt; T, ALIGNMENT &gt; &amp;, const casacore_allocator&lt; T, ALIGNMENT &gt; &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structcasacore_1_1casacore__allocator" kindref="compound">casacore_allocator</ref>&lt; T, ALIGNMENT &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1casacore__allocator" kindref="compound">casacore_allocator</ref>&lt; T, ALIGNMENT &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Allocator.h" line="127" column="13" bodyfile="casa/Containers/Allocator.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7673b96dcb81e1d76ff4ac79ee0da7f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>ALIGNMENT</declname>
            <defname>ALIGNMENT</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::operator!=</definition>
        <argsstring>(const casacore_allocator&lt; T, ALIGNMENT &gt; &amp;, const casacore_allocator&lt; T, ALIGNMENT &gt; &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structcasacore_1_1casacore__allocator" kindref="compound">casacore_allocator</ref>&lt; T, ALIGNMENT &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1casacore__allocator" kindref="compound">casacore_allocator</ref>&lt; T, ALIGNMENT &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Allocator.h" line="133" column="13" bodyfile="casa/Containers/Allocator.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab62d12a417db9233fb3b63c200180fb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::operator==</definition>
        <argsstring>(const new_del_allocator&lt; T &gt; &amp;, const new_del_allocator&lt; T &gt; &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structcasacore_1_1new__del__allocator" kindref="compound">new_del_allocator</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1new__del__allocator" kindref="compound">new_del_allocator</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Allocator.h" line="197" column="13" bodyfile="casa/Containers/Allocator.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1ce6f6d627663d1f094f80f8c4c24999" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::operator!=</definition>
        <argsstring>(const new_del_allocator&lt; T &gt; &amp;, const new_del_allocator&lt; T &gt; &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structcasacore_1_1new__del__allocator" kindref="compound">new_del_allocator</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1new__del__allocator" kindref="compound">new_del_allocator</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Allocator.h" line="203" column="13" bodyfile="casa/Containers/Allocator.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1d1781393537e32cb996c3f34706e167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::putBlock</definition>
        <argsstring>(AipsIO &amp;, const Block&lt; T &gt; &amp;, Int nr)</argsstring>
        <name>putBlock</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="76" column="17" declfile="casa/Containers/BlockIO.h" declline="76" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af8715cfec60f4482f3e778a7b240118a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::putBlock</definition>
        <argsstring>(AipsIO &amp;ios, const Block&lt; T &gt; &amp;blk)</argsstring>
        <name>putBlock</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="78" column="17" bodyfile="casa/Containers/BlockIO.h" bodystart="78" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab00f5f4dbc318dc76f098fa759a5f5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::getBlock</definition>
        <argsstring>(AipsIO &amp;, Block&lt; T &gt; &amp;)</argsstring>
        <name>getBlock</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="81" column="17" declfile="casa/Containers/BlockIO.h" declline="81" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a11449f7086fd17ee4f25a91614b4f473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::showBlock</definition>
        <argsstring>(std::ostream &amp;, const Block&lt; T &gt; &amp;, Int nr)</argsstring>
        <name>showBlock</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="92" column="17" declfile="casa/Containers/BlockIO.h" declline="92" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a939ab51e31030e955fb43c3006dad65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::showBlock</definition>
        <argsstring>(std::ostream &amp;ios, const Block&lt; T &gt; &amp;blk)</argsstring>
        <name>showBlock</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="94" column="17" bodyfile="casa/Containers/BlockIO.h" bodystart="94" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4c5478e26d4cd041353fafec8c2531b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;ios, const Block&lt; T &gt; &amp;blk)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="108" column="12" bodyfile="casa/Containers/BlockIO.h" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7005240488bca1aab33f8abee7c188bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;ios, Block&lt; T &gt; &amp;blk)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="114" column="19" bodyfile="casa/Containers/BlockIO.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a955222a308f94407682ece19992ce797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ios, const Block&lt; T &gt; &amp;blk)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="120" column="12" bodyfile="casa/Containers/BlockIO.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5030775c4c97826290a773e595839b49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::putBlock</definition>
        <argsstring>(AipsIO &amp;, const Block&lt; void * &gt; &amp;, Int)</argsstring>
        <name>putBlock</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; void * &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="132" column="13" bodyfile="casa/Containers/BlockIO.h" bodystart="132" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a711255a5e070f45313b267ea604da6c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::getBlock</definition>
        <argsstring>(AipsIO &amp;, Block&lt; void * &gt; &amp;)</argsstring>
        <name>getBlock</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; void * &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="134" column="13" bodyfile="casa/Containers/BlockIO.h" bodystart="134" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2de2a200165f32490b515d45c170b6cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::showBlock</definition>
        <argsstring>(AipsIO &amp;, const Block&lt; void * &gt; &amp;, Int)</argsstring>
        <name>showBlock</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; void * &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/BlockIO.h" line="136" column="13" bodyfile="casa/Containers/BlockIO.h" bodystart="136" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ae9a649eb518066321f7bbc94373163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;os, const Record &amp;rec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Record.h" line="452" column="8" bodyfile="casa/Containers/Record.h" bodystart="452" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae0cabbd82cbaf6efaae4371b6bc12b4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;os, Record &amp;rec)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/Record.h" line="462" column="15" bodyfile="casa/Containers/Record.h" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa00c953574b4a2a9fe1157a64a3e3e62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const RecordDesc &amp;desc)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RecordDesc" kindref="compound">RecordDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/RecordDesc.h" line="499" column="8" bodyfile="casa/Containers/RecordDesc.h" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a361ea796f238a50133b3caa3c00f01bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;os, const RecordDesc &amp;desc)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RecordDesc" kindref="compound">RecordDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/RecordDesc.h" line="503" column="8" bodyfile="casa/Containers/RecordDesc.h" bodystart="503" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa7ae94d0c962ab4e28ea889b7ebb4bb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;os, RecordDesc &amp;desc)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1RecordDesc" kindref="compound">RecordDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Containers/RecordDesc.h" line="507" column="15" bodyfile="casa/Containers/RecordDesc.h" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a82d393367140701b2d0085099dfd5f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::strerror_overload</definition>
        <argsstring>(int err)</argsstring>
        <name>strerror_overload</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Exceptions/Error2.cc" line="214" column="8" bodyfile="casa/Exceptions/Error2.cc" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af6980478c8e53404c9f431372173fabc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::strerror_overload</definition>
        <argsstring>(char *err)</argsstring>
        <name>strerror_overload</name>
        <param>
          <type>char *</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Exceptions/Error2.cc" line="218" column="8" bodyfile="casa/Exceptions/Error2.cc" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a98d7d13c72662275032ac82461e54a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::throwInvHDF5</definition>
        <argsstring>()</argsstring>
        <name>throwInvHDF5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/HDF5/HDF5Object.cc" line="49" column="8" bodyfile="casa/HDF5/HDF5Object.cc" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4809b74da18bb4c2a4bf240bdd0f7db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Param &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Param" kindref="compound">Param</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Inputs/Param.cc" line="283" column="1" bodyfile="casa/Inputs/Param.cc" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2cec2c06c0ac39e78522cd9bfa4f2e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;os, Param &amp;p)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Param" kindref="compound">Param</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Inputs/Param.cc" line="288" column="10" bodyfile="casa/Inputs/Param.cc" bodystart="288" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a688c64c952f373ef4ff92c0c749d4916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;os, const Param &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Param" kindref="compound">Param</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Inputs/Param.cc" line="294" column="1" bodyfile="casa/Inputs/Param.cc" bodystart="294" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2c95c9740b9eefe8fac47453eaa076a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;os, Param &amp;p)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Param" kindref="compound">Param</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Inputs/Param.cc" line="300" column="9" bodyfile="casa/Inputs/Param.cc" bodystart="300" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adb6dfc12f5e28af644a3657d28fd1226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::putAipsIO</definition>
        <argsstring>(AipsIO &amp;aios, uInt n, const T *data)</argsstring>
        <name>putAipsIO</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>aios</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/AipsIOCarray.h" line="104" column="6" declfile="casa/IO/AipsIOCarray.h" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a45c20f9aee17231ff32f5714d7237860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::getAipsIO</definition>
        <argsstring>(AipsIO &amp;aios, uInt n, T *data)</argsstring>
        <name>getAipsIO</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>aios</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/AipsIOCarray.h" line="109" column="6" declfile="casa/IO/AipsIOCarray.h" declline="109" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a73493c7ff0b355893a4f1b9207695d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::getnewAipsIO</definition>
        <argsstring>(AipsIO &amp;aios, uInt &amp;n, T **data)</argsstring>
        <name>getnewAipsIO</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>aios</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/AipsIOCarray.h" line="121" column="6" declfile="casa/IO/AipsIOCarray.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4563a63a216571c695d8023827b4052c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const Array&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="101" column="1" declfile="casa/IO/ArrayIO.h" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a20c4d462be2fb0adcdcbb370032110eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;, const Array&lt; T &gt; &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="111" column="1" declfile="casa/IO/ArrayIO.h" declline="111" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53ab8a1db02181c2a4a9d854463033c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::putArray</definition>
        <argsstring>(AipsIO &amp;, const Array&lt; T &gt; &amp;, const char *name)</argsstring>
        <name>putArray</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="114" column="6" declfile="casa/IO/ArrayIO.h" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a54bf8f4aeaec7c4f9f68d86fc5a60e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;, Array&lt; T &gt; &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="117" column="8" declfile="casa/IO/ArrayIO.h" declline="117" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a73e1d987d8806dac34d70f78d2b5aa77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::write_array</definition>
        <argsstring>(const Array&lt; T &gt; &amp;the_array, const std::string &amp;fileName)</argsstring>
        <name>write_array</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>the_array</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="173" column="6" declfile="casa/IO/ArrayIO.h" declline="173" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7ea981892e87a65017da8fe1d59b96f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::write_array</definition>
        <argsstring>(const Array&lt; T &gt; &amp;the_array, const char *fileName)</argsstring>
        <name>write_array</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>the_array</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="176" column="13" bodyfile="casa/IO/ArrayIO.h" bodystart="176" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5755adccf9a7f2d5dbda9db49147d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::read_array</definition>
        <argsstring>(Array&lt; T &gt; &amp;the_array, const std::string &amp;fileName)</argsstring>
        <name>read_array</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>the_array</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="189" column="6" declfile="casa/IO/ArrayIO.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd82d8da96412f8672f938c6bbdba557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::read_array</definition>
        <argsstring>(Array&lt; T &gt; &amp;the_array, const char *fileName)</argsstring>
        <name>read_array</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>the_array</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="192" column="13" bodyfile="casa/IO/ArrayIO.h" bodystart="192" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0460c9040f2dd233142c59e424d4fccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::readAsciiVector</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec, const char *fileName)</argsstring>
        <name>readAsciiVector</name>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="205" column="6" declfile="casa/IO/ArrayIO.h" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a919fd1fb0be50d4b264079333238fc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::writeAsciiVector</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;vec, const char *fileName)</argsstring>
        <name>writeAsciiVector</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="208" column="6" declfile="casa/IO/ArrayIO.h" declline="208" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aea3c53f812b1b0208f2464c3e3b0ee3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;aio, const IPosition &amp;ip)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>aio</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/IPositionIO.cc" line="39" column="1" bodyfile="casa/IO/IPositionIO.cc" bodystart="39" bodyend="67" declfile="casa/IO/ArrayIO.h" declline="213" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5cb942ccc1678193dde7a87714b3d1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO &amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;aio, IPosition &amp;ip)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>aio</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/IPositionIO.cc" line="72" column="8" bodyfile="casa/IO/IPositionIO.cc" bodystart="72" bodyend="101" declfile="casa/IO/ArrayIO.h" declline="214" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adfcd433e1210275168bd1c3e7207819c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const IPosition &amp;ip)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="215" column="1" declfile="casa/IO/ArrayIO.h" declline="215" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c06696a611eea7e3789f5f1c9311a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt;</type>
        <definition>Block&lt;T&gt; casacore::makeBlock</definition>
        <argsstring>(const Array&lt; T &gt; &amp;array)</argsstring>
        <name>makeBlock</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="218" column="7" declfile="casa/IO/ArrayIO.h" declline="218" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af904dfc37ba48f8e9a469ecd3878f887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; casacore::makeVector</definition>
        <argsstring>(const Block&lt; T &gt; &amp;block)</argsstring>
        <name>makeVector</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="221" column="8" declfile="casa/IO/ArrayIO.h" declline="221" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa602ac9c43bb8b28ed1890d92bb27d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt;</type>
        <definition>Vector&lt;String&gt; casacore::stringToVector</definition>
        <argsstring>(const String &amp;string, char delim=&apos;,&apos;)</argsstring>
        <name>stringToVector</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
          <defval>&apos;,&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="223" column="8" declfile="casa/IO/ArrayIO.h" declline="223" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a31378e9f1d0f96f19e52e7bbc7cbe636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt;</type>
        <definition>Vector&lt;String&gt; casacore::stringToVector</definition>
        <argsstring>(const String &amp;string, const std::regex &amp;delim)</argsstring>
        <name>stringToVector</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const std::regex &amp;</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/ArrayIO.h" line="224" column="8" declfile="casa/IO/ArrayIO.h" declline="224" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9face61e85e29d3c2b8754f7eb0b09d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::array&lt; <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref>, 256 &gt; &amp;</type>
        <definition>static const std::array&lt;uInt, 256&gt;&amp; casacore::CRCTable</definition>
        <argsstring>()</argsstring>
        <name>CRCTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/MultiFile.cc" line="46" column="27" bodyfile="casa/IO/MultiFile.cc" bodystart="46" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd8cc1d6356177f08ae6b93e8af489ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;ios, const MultiFileInfo &amp;info)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1MultiFileInfo" kindref="compound">MultiFileInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/MultiFileBase.cc" line="45" column="3" bodyfile="casa/IO/MultiFileBase.cc" bodystart="45" bodyend="50" declfile="casa/IO/MultiFileBase.h" declline="94" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a81f26e3e90a21678269941838eb607d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;ios, const MultiFileInfo &amp;info)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1MultiFileInfo" kindref="compound">MultiFileInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/MultiFileBase.cc" line="51" column="3" bodyfile="casa/IO/MultiFileBase.cc" bodystart="51" bodyend="53" declfile="casa/IO/MultiFileBase.h" declline="95" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a36bf79986650d69ee09a1e5e7f7c6c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO &amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;ios, MultiFileInfo &amp;info)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type><ref refid="structcasacore_1_1MultiFileInfo" kindref="compound">MultiFileInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/MultiFileBase.cc" line="54" column="10" bodyfile="casa/IO/MultiFileBase.cc" bodystart="54" bodyend="56" declfile="casa/IO/MultiFileBase.h" declline="96" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab987434be45d25f232b47e9218bb5c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::getInfoVersion1</definition>
        <argsstring>(AipsIO &amp;ios, std::vector&lt; MultiFileInfo &gt; &amp;info)</argsstring>
        <name>getInfoVersion1</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structcasacore_1_1MultiFileInfo" kindref="compound">MultiFileInfo</ref> &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/IO/MultiFileBase.cc" line="57" column="8" bodyfile="casa/IO/MultiFileBase.cc" bodystart="57" bodyend="69" declfile="casa/IO/MultiFileBase.h" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9893494811286d489ad8f863b0a625ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const JsonKVMap &amp;param)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1JsonKVMap" kindref="compound">JsonKVMap</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Json/JsonKVMap.cc" line="122" column="3" bodyfile="casa/Json/JsonKVMap.cc" bodystart="122" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6b6536da7d18e12915cf622586bccb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::JsonGramerror</definition>
        <argsstring>(const char *)</argsstring>
        <name>JsonGramerror</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Json/JsonParser.cc" line="184" column="8" bodyfile="casa/Json/JsonParser.cc" bodystart="184" bodyend="192" declfile="casa/Json/JsonParser.h" declline="124" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc5cc66569369b5803c593061f9b509f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const JsonValue &amp;param)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1JsonValue" kindref="compound">JsonValue</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Json/JsonValue.cc" line="511" column="3" bodyfile="casa/Json/JsonValue.cc" bodystart="511" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a291ed7e562ad119d75a307397034acbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, LogIO::Command item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1LogIO_1a3f637084f2b7120bb3822cf345e19dd5" kindref="member">LogIO::Command</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="150" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="150" bodyend="170" declfile="casa/Logging/LogIO.h" declline="274" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a73fad2836469bbbb08e5d72bd5b37d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const AipsError &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1AipsError" kindref="compound">AipsError</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="172" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="172" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0c8064515839a8b744470f2e8577f1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const SourceLocation *item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structcasacore_1_1SourceLocation" kindref="compound">SourceLocation</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="180" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="180" bodyend="186" declfile="casa/Logging/LogIO.h" declline="275" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a187d31a1c2150f08258b20868e148ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const LogOrigin &amp;OR)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1LogOrigin" kindref="compound">LogOrigin</ref> &amp;</type>
          <declname>OR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="188" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="188" bodyend="192" declfile="casa/Logging/LogIO.h" declline="276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a31ddec713a0145459f80d697cd84db7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, ostream &amp;(*item)(ostream &amp;))</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>ostream &amp;(*)(ostream &amp;)</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="194" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="194" bodyend="198" declfile="casa/Logging/LogIO.h" declline="297" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a47640e3abcfd05b85cea4fe080e8e6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const String &amp;item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="200" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="200" bodyend="204" declfile="casa/Logging/LogIO.h" declline="285" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a76ad63e940aee4700807a2fd8eb7dc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const char *item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="206" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="206" bodyend="210" declfile="casa/Logging/LogIO.h" declline="286" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a63a2ffceb612f0c6eec907db53ff7b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, Double item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="212" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="212" bodyend="216" declfile="casa/Logging/LogIO.h" declline="287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afe991bd4889f177c531869fa8db798f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, Complex item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="218" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="218" bodyend="222" declfile="casa/Logging/LogIO.h" declline="288" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acdcbcebbe59facd7b0efa7c8ba0c9d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, DComplex item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="224" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="224" bodyend="228" declfile="casa/Logging/LogIO.h" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2d377552969332873561d0a321059d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, Int item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="230" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="230" bodyend="234" declfile="casa/Logging/LogIO.h" declline="290" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af43d5475ed004dcb54d56fe92ee17cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, uInt item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="236" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="236" bodyend="240" declfile="casa/Logging/LogIO.h" declline="291" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a28abfd232d6a16e699c948a8d0814e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, Int64 item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="242" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="242" bodyend="246" declfile="casa/Logging/LogIO.h" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adaf9bd7b603e027f217e8c9d2c30ed73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, uInt64 item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="248" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="248" bodyend="252" declfile="casa/Logging/LogIO.h" declline="293" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac019b03941a789e73692e5e18934a8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, uLong item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a2c44acc8a1ccc720c5d3010bf5125db0" kindref="member">uLong</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="254" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="254" bodyend="258" declfile="casa/Logging/LogIO.h" declline="294" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae09c3699b42934b3e54883b9461f0de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, Long item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a3cc4166cd269a99ae91967979b7ff953" kindref="member">Long</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="260" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="260" bodyend="264" declfile="casa/Logging/LogIO.h" declline="295" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae4db40fbe51da386d58f2d64cf33c833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, Bool item)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogIO.cc" line="266" column="1" bodyfile="casa/Logging/LogIO.cc" bodystart="266" bodyend="270" declfile="casa/Logging/LogIO.h" declline="296" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a081bd83db4138c3c534e6277c59cc258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const LogMessage &amp;message)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1LogMessage" kindref="compound">LogMessage</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogMessage.cc" line="214" column="1" bodyfile="casa/Logging/LogMessage.cc" bodystart="214" bodyend="218" declfile="casa/Logging/LogMessage.h" declline="221" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af8e11ce669aa9f4091efed1ddd129244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const LogOrigin &amp;origin)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1LogOrigin" kindref="compound">LogOrigin</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Logging/LogOrigin.cc" line="221" column="1" bodyfile="casa/Logging/LogOrigin.cc" bodystart="221" bodyend="225" declfile="casa/Logging/LogOrigin.h" declline="193" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>casacore::CANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_CAN_SHORT, SIZE_CAN_SHORT, toLocalShort, fromLocalShort, byteToLocalShort, byteFromLocalShort, short) CANONICALCONVERSION_DO(CONVERT_CAN_USHORT</argsstring>
        <name>CANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="CanonicalConversion_8h_1a4a06b22262884b0d4d61b16d85ca63fe" kindref="member">CONVERT_CAN_SHORT</ref></type>
        </param>
        <param>
          <type><ref refid="CanonicalConversion_8h_1a99390a54c8c285ac11df4aeecd5ff529" kindref="member">SIZE_CAN_SHORT</ref></type>
        </param>
        <param>
          <type>toLocalShort</type>
        </param>
        <param>
          <type>fromLocalShort</type>
        </param>
        <param>
          <type>byteToLocalShort</type>
        </param>
        <param>
          <type>byteFromLocalShort</type>
        </param>
        <param>
          <type>short</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a615254cda988dce100d543461bcf3023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short casacore::CANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_CAN_INT, SIZE_CAN_INT, toLocalInt, fromLocalInt, byteToLocalInt, byteFromLocalInt, int) CANONICALCONVERSION_DO(CONVERT_CAN_UINT</argsstring>
        <name>CANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="CanonicalConversion_8h_1a61c53eca3434c746f90458786d7aae07" kindref="member">CONVERT_CAN_INT</ref></type>
        </param>
        <param>
          <type><ref refid="CanonicalConversion_8h_1a65fd562aaaa8a4850bd995d31069af5d" kindref="member">SIZE_CAN_INT</ref></type>
        </param>
        <param>
          <type>toLocalInt</type>
        </param>
        <param>
          <type>fromLocalInt</type>
        </param>
        <param>
          <type>byteToLocalInt</type>
        </param>
        <param>
          <type>byteFromLocalInt</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad388af7ab7841912efdc3844d6de93d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::CANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_CAN_INT64, SIZE_CAN_INT64, toLocalInt64, fromLocalInt64, byteToLocalInt64, byteFromLocalInt64, Int64) CANONICALCONVERSION_DO(CONVERT_CAN_UINT64</argsstring>
        <name>CANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="CanonicalConversion_8h_1ad39d2b96491b3f167740912e5015ae38" kindref="member">CONVERT_CAN_INT64</ref></type>
        </param>
        <param>
          <type><ref refid="CanonicalConversion_8h_1a0756b5b7e4ef42a04b30afffa6b3a177" kindref="member">SIZE_CAN_INT64</ref></type>
        </param>
        <param>
          <type>toLocalInt64</type>
        </param>
        <param>
          <type>fromLocalInt64</type>
        </param>
        <param>
          <type>byteToLocalInt64</type>
        </param>
        <param>
          <type>byteFromLocalInt64</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a94a03171c9cdfdc0a5c8fbed01294421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::CANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_CAN_FLOAT, SIZE_CAN_FLOAT, toLocalFloat, fromLocalFloat, byteToLocalFloat, byteFromLocalFloat, float) CANONICALCONVERSION_DO(CONVERT_CAN_DOUBLE</argsstring>
        <name>CANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="CanonicalConversion_8h_1a8a77e777d5712ef104abef7be8a6c01a" kindref="member">CONVERT_CAN_FLOAT</ref></type>
        </param>
        <param>
          <type><ref refid="CanonicalConversion_8h_1acbf4e9ce7c728a759bcc29282e676dda" kindref="member">SIZE_CAN_FLOAT</ref></type>
        </param>
        <param>
          <type>toLocalFloat</type>
        </param>
        <param>
          <type>fromLocalFloat</type>
        </param>
        <param>
          <type>byteToLocalFloat</type>
        </param>
        <param>
          <type>byteFromLocalFloat</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa6d8aeea43772f0b117a75bce13daea5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="unioncasacore_1_1m64d__t" kindref="compound">m64d_t</ref> conv_tab[256]</type>
        <definition>static m64d_t conv_tab [256] casacore::__attribute__</definition>
        <argsstring>((aligned(8)))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(aligned(8))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Conversion.cc" line="186" column="24" declfile="casa/OS/Conversion.cc" declline="186" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8f3bcd1bf475bb8bbec3b0229135eac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>casacore::LECANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_LECAN_SHORT, SIZE_LECAN_SHORT, toLocalShort, fromLocalShort, byteToLocalShort, byteFromLocalShort, short) LECANONICALCONVERSION_DO(CONVERT_LECAN_USHORT</argsstring>
        <name>LECANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1afdd4ae2045ae824977434199f17d1bba" kindref="member">CONVERT_LECAN_SHORT</ref></type>
        </param>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1ab91244eb05c5276bbdca5b167d566d76" kindref="member">SIZE_LECAN_SHORT</ref></type>
        </param>
        <param>
          <type>toLocalShort</type>
        </param>
        <param>
          <type>fromLocalShort</type>
        </param>
        <param>
          <type>byteToLocalShort</type>
        </param>
        <param>
          <type>byteFromLocalShort</type>
        </param>
        <param>
          <type>short</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad2a85720238fcd2b397ad4062bce759c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short casacore::LECANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_LECAN_INT, SIZE_LECAN_INT, toLocalInt, fromLocalInt, byteToLocalInt, byteFromLocalInt, int) LECANONICALCONVERSION_DO(CONVERT_LECAN_UINT</argsstring>
        <name>LECANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1a34c10551f824a823890b326b95a79d93" kindref="member">CONVERT_LECAN_INT</ref></type>
        </param>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1aef832dbb0887d705702ede057125b327" kindref="member">SIZE_LECAN_INT</ref></type>
        </param>
        <param>
          <type>toLocalInt</type>
        </param>
        <param>
          <type>fromLocalInt</type>
        </param>
        <param>
          <type>byteToLocalInt</type>
        </param>
        <param>
          <type>byteFromLocalInt</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd81b199d7ee12d42a321652505e2d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short unsigned int</type>
        <definition>unsigned short unsigned int casacore::LECANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_LECAN_INT64, SIZE_LECAN_INT64, toLocalInt64, fromLocalInt64, byteToLocalInt64, byteFromLocalInt64, Int64) LECANONICALCONVERSION_DO(CONVERT_LECAN_UINT64</argsstring>
        <name>LECANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1a18e6691056afa359aef0ecedb52fde65" kindref="member">CONVERT_LECAN_INT64</ref></type>
        </param>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1a0f94ee2c91bc4b55a67afb4abed7bcf2" kindref="member">SIZE_LECAN_INT64</ref></type>
        </param>
        <param>
          <type>toLocalInt64</type>
        </param>
        <param>
          <type>fromLocalInt64</type>
        </param>
        <param>
          <type>byteToLocalInt64</type>
        </param>
        <param>
          <type>byteFromLocalInt64</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0793fb61d0b5017a7dbe48868719bcd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short unsigned int <ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref></type>
        <definition>unsigned short unsigned int uInt64 casacore::LECANONICALCONVERSION_DO</definition>
        <argsstring>(CONVERT_LECAN_FLOAT, SIZE_LECAN_FLOAT, toLocalFloat, fromLocalFloat, byteToLocalFloat, byteFromLocalFloat, float) LECANONICALCONVERSION_DO(CONVERT_LECAN_DOUBLE</argsstring>
        <name>LECANONICALCONVERSION_DO</name>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1a6e78d9f55db4298d9bcb85e7602509ef" kindref="member">CONVERT_LECAN_FLOAT</ref></type>
        </param>
        <param>
          <type><ref refid="LECanonicalConversion_8h_1a0dd9dba6eb7dfcbda1d251169d9b323c" kindref="member">SIZE_LECAN_FLOAT</ref></type>
        </param>
        <param>
          <type>toLocalFloat</type>
        </param>
        <param>
          <type>fromLocalFloat</type>
        </param>
        <param>
          <type>byteToLocalFloat</type>
        </param>
        <param>
          <type>byteFromLocalFloat</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/LECanonicalConversion.cc" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a37f4d76d78e296cfae255b6c8897f580" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double casacore::daysFrom1970</definition>
        <argsstring>()</argsstring>
        <name>daysFrom1970</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Time.cc" line="51" column="15" bodyfile="casa/OS/Time.cc" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a937dd171bdd08023f1b13d741e1ef520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;in, Time &amp;other)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Time.cc" line="302" column="9" bodyfile="casa/OS/Time.cc" bodystart="302" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad755212d331fc0c5f429d0737b97c23d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>static Int casacore::isDST</definition>
        <argsstring>()</argsstring>
        <name>isDST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/Time.cc" line="581" column="12" bodyfile="casa/OS/Time.cc" bodystart="581" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a074a2d6fd83965287587eb6919077630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Euler &amp;eul)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Euler" kindref="compound">Euler</ref> &amp;</type>
          <declname>eul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/Euler.cc" line="255" column="1" bodyfile="casa/Quanta/Euler.cc" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac1f61de4ad262d01ce2cb3a5c9206655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const MeasValue &amp;meas)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MeasValue" kindref="compound">MeasValue</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MeasValue.cc" line="62" column="1" bodyfile="casa/Quanta/MeasValue.cc" bodystart="62" bodyend="65" declfile="casa/Quanta/MeasValue.h" declline="197" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af83a252a76961b65fd969b56fe280c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const MVAngle &amp;meas)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVAngle" kindref="compound">MVAngle</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVAngle.cc" line="485" column="1" bodyfile="casa/Quanta/MVAngle.cc" bodystart="485" bodyend="493" declfile="casa/Quanta/MVAngle.h" declline="412" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa94a6b1f75c7a46e5ce997fb2c90011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, MVAngle &amp;meas)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MVAngle" kindref="compound">MVAngle</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVAngle.cc" line="495" column="9" bodyfile="casa/Quanta/MVAngle.cc" bodystart="495" bodyend="506" declfile="casa/Quanta/MVAngle.h" declline="413" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d3a171c9f74b53a13a893181bfa35a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const MVAngle::Format &amp;form)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVAngle_1_1Format" kindref="compound">MVAngle::Format</ref> &amp;</type>
          <declname>form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVAngle.cc" line="508" column="1" bodyfile="casa/Quanta/MVAngle.cc" bodystart="508" bodyend="512" declfile="casa/Quanta/MVAngle.h" declline="415" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a56d317ca408abf839a196ad789e322ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref></type>
        <definition>MVBaseline casacore::operator*</definition>
        <argsstring>(const RotMatrix &amp;left, const MVBaseline &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="346" column="12" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="346" bodyend="355" declfile="casa/Quanta/MVBaseline.h" declline="240" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60abe82f538b9805a62f3d74304d0831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref></type>
        <definition>MVBaseline casacore::operator*</definition>
        <argsstring>(const MVBaseline &amp;left, const RotMatrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="357" column="12" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="357" bodyend="361" declfile="casa/Quanta/MVBaseline.h" declline="241" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9cfe9c4cdd7693b3823d4873bfd91efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref></type>
        <definition>MVBaseline casacore::operator*</definition>
        <argsstring>(Double left, const MVBaseline &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="363" column="12" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="363" bodyend="367" declfile="casa/Quanta/MVBaseline.h" declline="242" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1733bcbe85c0b4341c638094d9202120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref></type>
        <definition>MVBaseline casacore::operator*</definition>
        <argsstring>(const MVBaseline &amp;left, Double right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="369" column="12" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="369" bodyend="373" declfile="casa/Quanta/MVBaseline.h" declline="243" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a80bd58f0a0b665ed051901974b04a4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const Vector&lt; Double &gt; &amp;left, const MVBaseline &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="375" column="8" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="375" bodyend="378" declfile="casa/Quanta/MVBaseline.h" declline="244" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5b2ba30aa55a27e12ee787ab3765bde5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVBaseline &amp;left, const Vector&lt; Double &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="380" column="8" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="380" bodyend="383" declfile="casa/Quanta/MVBaseline.h" declline="245" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4be023167e9efc78775a20e9f0393ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVPosition &amp;left, const MVBaseline &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="385" column="8" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="385" bodyend="388" declfile="casa/Quanta/MVBaseline.h" declline="246" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab93a89dcedd5c8db1b0d4531f187e67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVBaseline &amp;left, const MVPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVBaseline" kindref="compound">MVBaseline</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVBaseline.cc" line="390" column="8" bodyfile="casa/Quanta/MVBaseline.cc" bodystart="390" bodyend="393" declfile="casa/Quanta/MVBaseline.h" declline="247" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af6d690db3775dd18f96ec6134555e762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVDirection" kindref="compound">MVDirection</ref></type>
        <definition>MVDirection casacore::operator*</definition>
        <argsstring>(const RotMatrix &amp;left, const MVDirection &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVDirection" kindref="compound">MVDirection</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVDirection.cc" line="367" column="13" bodyfile="casa/Quanta/MVDirection.cc" bodystart="367" bodyend="376" declfile="casa/Quanta/MVDirection.h" declline="240" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a610dca2ed49c81eeeee899c433dd1355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVDirection" kindref="compound">MVDirection</ref></type>
        <definition>MVDirection casacore::operator*</definition>
        <argsstring>(const MVDirection &amp;left, const RotMatrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVDirection" kindref="compound">MVDirection</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVDirection.cc" line="378" column="13" bodyfile="casa/Quanta/MVDirection.cc" bodystart="378" bodyend="382" declfile="casa/Quanta/MVDirection.h" declline="241" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af36c1f5400935dc2d2e4482b85ef9275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref></type>
        <definition>MVEarthMagnetic casacore::operator*</definition>
        <argsstring>(const RotMatrix &amp;left, const MVEarthMagnetic &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="408" column="17" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="408" bodyend="418" declfile="casa/Quanta/MVEarthMagnetic.h" declline="234" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab4c807c536fb3252f2e37dc8850a2d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref></type>
        <definition>MVEarthMagnetic casacore::operator*</definition>
        <argsstring>(const MVEarthMagnetic &amp;left, const RotMatrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="420" column="17" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="420" bodyend="425" declfile="casa/Quanta/MVEarthMagnetic.h" declline="235" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1f43ef2b74c409df8eae5904ac999af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref></type>
        <definition>MVEarthMagnetic casacore::operator*</definition>
        <argsstring>(Double left, const MVEarthMagnetic &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="427" column="17" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="427" bodyend="431" declfile="casa/Quanta/MVEarthMagnetic.h" declline="236" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6402faaeae62eda0be2f3dd52cc5169f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref></type>
        <definition>MVEarthMagnetic casacore::operator*</definition>
        <argsstring>(const MVEarthMagnetic &amp;left, Double right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="433" column="17" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="433" bodyend="437" declfile="casa/Quanta/MVEarthMagnetic.h" declline="237" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0f117876ee5d0bca20d3590231bf8c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const Vector&lt; Double &gt; &amp;left, const MVEarthMagnetic &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="439" column="8" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="439" bodyend="442" declfile="casa/Quanta/MVEarthMagnetic.h" declline="238" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af17cd7ef048d1fb1e7804abae1560f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVEarthMagnetic &amp;left, const Vector&lt; Double &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="444" column="8" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="444" bodyend="447" declfile="casa/Quanta/MVEarthMagnetic.h" declline="239" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad66106c02a999158b7c6d11e81e8c8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVPosition &amp;left, const MVEarthMagnetic &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="449" column="8" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="449" bodyend="452" declfile="casa/Quanta/MVEarthMagnetic.h" declline="240" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a73d56bf1cd81700d163513255b490a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVEarthMagnetic &amp;left, const MVPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVEarthMagnetic" kindref="compound">MVEarthMagnetic</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVEarthMagnetic.cc" line="454" column="8" bodyfile="casa/Quanta/MVEarthMagnetic.cc" bodystart="454" bodyend="457" declfile="casa/Quanta/MVEarthMagnetic.h" declline="241" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a681b46795b97c04bfe1212ef7664283e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref></type>
        <definition>MVPosition casacore::operator*</definition>
        <argsstring>(const RotMatrix &amp;left, const MVPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVPosition.cc" line="516" column="12" bodyfile="casa/Quanta/MVPosition.cc" bodystart="516" bodyend="525" declfile="casa/Quanta/MVPosition.h" declline="285" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af6bf1814a876a1812c979169ea46858b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref></type>
        <definition>MVPosition casacore::operator*</definition>
        <argsstring>(const MVPosition &amp;left, const RotMatrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVPosition.cc" line="527" column="12" bodyfile="casa/Quanta/MVPosition.cc" bodystart="527" bodyend="531" declfile="casa/Quanta/MVPosition.h" declline="286" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8caa87175fd2d317a463d0bfc3a22d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref></type>
        <definition>MVPosition casacore::operator*</definition>
        <argsstring>(Double left, const MVPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVPosition.cc" line="533" column="12" bodyfile="casa/Quanta/MVPosition.cc" bodystart="533" bodyend="537" declfile="casa/Quanta/MVPosition.h" declline="287" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9499ead31956fffe0c275b23ac667bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref></type>
        <definition>MVPosition casacore::operator*</definition>
        <argsstring>(const MVPosition &amp;left, Double right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVPosition.cc" line="539" column="12" bodyfile="casa/Quanta/MVPosition.cc" bodystart="539" bodyend="543" declfile="casa/Quanta/MVPosition.h" declline="288" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4d805f6354626489981d1a19f4743b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const Vector&lt; Double &gt; &amp;left, const MVPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVPosition.cc" line="545" column="8" bodyfile="casa/Quanta/MVPosition.cc" bodystart="545" bodyend="548" declfile="casa/Quanta/MVPosition.h" declline="289" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa5f69b0a5c4cfdee296579cf0048c048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVPosition &amp;left, const Vector&lt; Double &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVPosition.cc" line="550" column="8" bodyfile="casa/Quanta/MVPosition.cc" bodystart="550" bodyend="553" declfile="casa/Quanta/MVPosition.h" declline="290" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3bf1e4f51cb83ac21126e9ac4ec060a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const MVTime &amp;meas)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.cc" line="589" column="1" bodyfile="casa/Quanta/MVTime.cc" bodystart="589" bodyend="597" declfile="casa/Quanta/MVTime.h" declline="455" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa4b07a6e121a07d66b927b2997dbc002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, MVTime &amp;meas)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.cc" line="599" column="9" bodyfile="casa/Quanta/MVTime.cc" bodystart="599" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a52349d60fe96ff3fddf4c793e19f1ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const MVTime::Format &amp;form)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime_1_1Format" kindref="compound">MVTime::Format</ref> &amp;</type>
          <declname>form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.cc" line="612" column="1" bodyfile="casa/Quanta/MVTime.cc" bodystart="612" bodyend="616" declfile="casa/Quanta/MVTime.h" declline="458" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6755e0b44c84f616690cbcb227eaeacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(ostream &amp;is, MVTime &amp;meas)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="456" column="9" declfile="casa/Quanta/MVTime.h" declline="456" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac7f0864e52fc06ca4eb1e12b5d13a1ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const MVTime &amp;lh, const MVTime &amp;rh)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="462" column="13" bodyfile="casa/Quanta/MVTime.h" bodystart="462" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a297bc5b1841a8512e898c993336a75aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const MVTime &amp;lh, const MVTime &amp;rh)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="464" column="13" bodyfile="casa/Quanta/MVTime.h" bodystart="464" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a911dba57de3db14e77e77213803afdae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const MVTime &amp;lh, const MVTime &amp;rh)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="466" column="8" bodyfile="casa/Quanta/MVTime.h" bodystart="466" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a07d66327559ca7e2a15bf9f82cfcca9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const MVTime &amp;lh, const MVTime &amp;rh)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="468" column="8" bodyfile="casa/Quanta/MVTime.h" bodystart="468" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac823c6887a963285d0a4f54308ad4e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const MVTime &amp;lh, const MVTime &amp;rh)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="470" column="13" bodyfile="casa/Quanta/MVTime.h" bodystart="470" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac597cea1ee1d5ebe874cc9a79b9cd043" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const MVTime &amp;lh, const MVTime &amp;rh)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>lh</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref> &amp;</type>
          <declname>rh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVTime.h" line="472" column="13" bodyfile="casa/Quanta/MVTime.h" bodystart="472" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6a28308e0c923fbd33e45c04af0e7985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref></type>
        <definition>MVuvw casacore::operator*</definition>
        <argsstring>(const RotMatrix &amp;left, const MVuvw &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="356" column="7" bodyfile="casa/Quanta/MVuvw.cc" bodystart="356" bodyend="365" declfile="casa/Quanta/MVuvw.h" declline="243" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace09888ccb7c80e2f0dc7099dce36d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref></type>
        <definition>MVuvw casacore::operator*</definition>
        <argsstring>(const MVuvw &amp;left, const RotMatrix &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="367" column="7" bodyfile="casa/Quanta/MVuvw.cc" bodystart="367" bodyend="371" declfile="casa/Quanta/MVuvw.h" declline="244" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab4689ffbeb93435fe47d947609a190cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref></type>
        <definition>MVuvw casacore::operator*</definition>
        <argsstring>(Double left, const MVuvw &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="373" column="7" bodyfile="casa/Quanta/MVuvw.cc" bodystart="373" bodyend="377" declfile="casa/Quanta/MVuvw.h" declline="245" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afe43132fb0183e6856634ecd40380ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref></type>
        <definition>MVuvw casacore::operator*</definition>
        <argsstring>(const MVuvw &amp;left, Double right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="379" column="7" bodyfile="casa/Quanta/MVuvw.cc" bodystart="379" bodyend="383" declfile="casa/Quanta/MVuvw.h" declline="246" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2b63348e7061e681a19c03e1fcf23aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const Vector&lt; Double &gt; &amp;left, const MVuvw &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="385" column="8" bodyfile="casa/Quanta/MVuvw.cc" bodystart="385" bodyend="388" declfile="casa/Quanta/MVuvw.h" declline="247" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a934a1b2570976b5d36d921b43d5fc63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVuvw &amp;left, const Vector&lt; Double &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="390" column="8" bodyfile="casa/Quanta/MVuvw.cc" bodystart="390" bodyend="393" declfile="casa/Quanta/MVuvw.h" declline="248" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a420ab0919abd171019c87c00c48acb21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVPosition &amp;left, const MVuvw &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="395" column="8" bodyfile="casa/Quanta/MVuvw.cc" bodystart="395" bodyend="398" declfile="casa/Quanta/MVuvw.h" declline="249" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c176da0014cb330202d1a637b737d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::operator*</definition>
        <argsstring>(const MVuvw &amp;left, const MVPosition &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MVuvw" kindref="compound">MVuvw</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MVPosition" kindref="compound">MVPosition</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/MVuvw.cc" line="400" column="8" bodyfile="casa/Quanta/MVuvw.cc" bodystart="400" bodyend="403" declfile="casa/Quanta/MVuvw.h" declline="250" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3640d0279a465397a50213e4797f76a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const QBase &amp;meas)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1QBase" kindref="compound">QBase</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QBase.cc" line="65" column="1" bodyfile="casa/Quanta/QBase.cc" bodystart="65" bodyend="68" declfile="casa/Quanta/QBase.h" declline="142" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5210e3334454782af2d3a00f1f7037f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
        <definition>LogIO &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(LogIO &amp;os, const QBase &amp;meas)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1LogIO" kindref="compound">LogIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1QBase" kindref="compound">QBase</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QBase.cc" line="70" column="1" bodyfile="casa/Quanta/QBase.cc" bodystart="70" bodyend="73" declfile="casa/Quanta/QBase.h" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa470cab9ea5737139d19c758f2c64f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="116" column="6" declfile="casa/Quanta/QLogical.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a04c4fbc9a8bb96f867b83cd472e42843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="118" column="6" declfile="casa/Quanta/QLogical.h" declline="118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aebb78b077f364cb5d07df292e1f109ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator==</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="120" column="6" declfile="casa/Quanta/QLogical.h" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac316b584e9a4dafa0a0347c59f051571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="122" column="6" declfile="casa/Quanta/QLogical.h" declline="122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af98803a92bea17c8a6abcc437f6f53c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="124" column="6" declfile="casa/Quanta/QLogical.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3d214c69db9e60ed26648e772ac18361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator!=</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="126" column="6" declfile="casa/Quanta/QLogical.h" declline="126" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8373cc934360b3123dcca590a17077cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="135" column="6" declfile="casa/Quanta/QLogical.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4327bf190945e6d5dd57fd968ebcab87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="137" column="6" declfile="casa/Quanta/QLogical.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af714c07e1cbefd7ee3586cfe7ac0bc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="140" column="6" declfile="casa/Quanta/QLogical.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a821a974795896b89d60ac89384f21d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="142" column="6" declfile="casa/Quanta/QLogical.h" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5774de27f5000c5c4068f3ed139fae29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>near</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="145" column="6" declfile="casa/Quanta/QLogical.h" declline="145" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a218342cb918c36a1ec2b7fe708d2f029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::near</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="147" column="6" declfile="casa/Quanta/QLogical.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af0a7d1146d23931e6c49f14ceefe53cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="150" column="6" declfile="casa/Quanta/QLogical.h" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae30456e289e4d00a0104d11e57fcabad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="152" column="6" declfile="casa/Quanta/QLogical.h" declline="152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb2be317523b719ae588fb7fa3e9e89b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other, const Quantum&lt; Qtype &gt; &amp;tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="155" column="6" declfile="casa/Quanta/QLogical.h" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd5c94da2bc4ac8612dc0ea9b517457e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="158" column="6" declfile="casa/Quanta/QLogical.h" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af1c5a8cd57e45153ae7d8a6e47dc1514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="160" column="6" declfile="casa/Quanta/QLogical.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4c40770ef6bbd2579b7ebf8b082022e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="163" column="6" declfile="casa/Quanta/QLogical.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ee7e9fc8c1a6a3bc6db62ae484460a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::nearAbs</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="165" column="6" declfile="casa/Quanta/QLogical.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0fdd2aed7692adb5d42eb1c91ecdd66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="176" column="1" declfile="casa/Quanta/QLogical.h" declline="176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae65712183c5a2b49a92e15a0fd0d027a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="178" column="1" declfile="casa/Quanta/QLogical.h" declline="178" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a250c76d3ae6f738d9d5aa989538b723c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="180" column="1" declfile="casa/Quanta/QLogical.h" declline="180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acff31de890b077afc13d865a410303fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="182" column="6" declfile="casa/Quanta/QLogical.h" declline="182" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a30c07eda7eb0472265837227d845496c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="184" column="6" declfile="casa/Quanta/QLogical.h" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab1de07fee9e991464d00f3affb4bf8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="186" column="6" declfile="casa/Quanta/QLogical.h" declline="186" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1add100189665d4ce8ac3b535f7d0bb087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="188" column="1" declfile="casa/Quanta/QLogical.h" declline="188" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeda3458bf49dbbff796c75b2ed489b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="190" column="1" declfile="casa/Quanta/QLogical.h" declline="190" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa4cd6c48d0aa885e41f6603a0644a028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&lt;=</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="192" column="1" declfile="casa/Quanta/QLogical.h" declline="192" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a516ccdbfc443ad3c34c4050770332e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="194" column="6" declfile="casa/Quanta/QLogical.h" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a499570d000c61a05885e52700efb504a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="196" column="6" declfile="casa/Quanta/QLogical.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a64e8404a337f4913c5346e3d8c91c8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::operator&gt;=</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical.h" line="198" column="6" declfile="casa/Quanta/QLogical.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd60b7aed5b7e76dfcd60be4868ed1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::QMakeBool</definition>
        <argsstring>(Int val)</argsstring>
        <name>QMakeBool</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical2.cc" line="34" column="6" bodyfile="casa/Quanta/QLogical2.cc" bodystart="34" bodyend="36" declfile="casa/Quanta/QLogical.h" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaf5c29a0fb615f92a9ceb81f3f7c062b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::QMakeBool</definition>
        <argsstring>(const LogicalArray &amp;val)</argsstring>
        <name>QMakeBool</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a863dbf26a1e602513158145a3fb71183" kindref="member">LogicalArray</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QLogical2.cc" line="38" column="6" bodyfile="casa/Quanta/QLogical2.cc" bodystart="38" bodyend="40" declfile="casa/Quanta/QLogical.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9d92caf0597e88dd0c662560ad1a2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator+</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="142" column="9" declfile="casa/Quanta/QMath.h" declline="142" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaa478beaa5274dc79f55b20b7ae4e561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator+</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="144" column="9" declfile="casa/Quanta/QMath.h" declline="144" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa636ee5c610d41003d6cb5cf32ee4da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator-</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="146" column="9" declfile="casa/Quanta/QMath.h" declline="146" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af514f75cf3d475b126da326ca4dcc61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator-</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="148" column="9" declfile="casa/Quanta/QMath.h" declline="148" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3b08cfc8153e6e6498e9438dcbe297ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator*</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="150" column="9" declfile="casa/Quanta/QMath.h" declline="150" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aac055e33a17b449474f93bea27b7c9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator*</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="152" column="9" declfile="casa/Quanta/QMath.h" declline="152" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac05f5aa5921ab6eea6b7e52c94e31778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator/</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="154" column="9" declfile="casa/Quanta/QMath.h" declline="154" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a78fe49b71dcb556561e2bac0d6d0bf45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::operator/</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="156" column="9" declfile="casa/Quanta/QMath.h" declline="156" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a42cadf0805112e848a768b34c04c00ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::pow</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, Int p)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="169" column="9" declfile="casa/Quanta/QMath.h" declline="169" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0670d90b865a0c7417fe50f7d6e2ca43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::root</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, Int p)</argsstring>
        <name>root</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="171" column="9" declfile="casa/Quanta/QMath.h" declline="171" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8fbdc10fd37b9b60010904dabb5f148f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::sqrt</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="173" column="9" declfile="casa/Quanta/QMath.h" declline="173" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a09dd6b44d4d13604c6886ac969ec8fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::abs</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="175" column="9" declfile="casa/Quanta/QMath.h" declline="175" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa661fd144c8e4cff9f4898a212b05938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::ceil</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="177" column="9" declfile="casa/Quanta/QMath.h" declline="177" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1b5ee131b45a1c3e4ce8402827960340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::floor</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="179" column="9" declfile="casa/Quanta/QMath.h" declline="179" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af6e2da3fd83dc38bfe8c5c75e859e5f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::sin</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="192" column="9" declfile="casa/Quanta/QMath.h" declline="192" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8278e428e71add43f654ccd4de7be195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::cos</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="194" column="9" declfile="casa/Quanta/QMath.h" declline="194" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51999fafe1a6018b982cf8c68303ea28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::tan</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="196" column="9" declfile="casa/Quanta/QMath.h" declline="196" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a560fe47c3bec1fe0517e6ceb457f9340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::asin</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="198" column="9" declfile="casa/Quanta/QMath.h" declline="198" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae8b92eacab7bc6e36a53d1e0916cba36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::acos</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="200" column="9" declfile="casa/Quanta/QMath.h" declline="200" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a236d1b477b99dd1c90c63b6ca0d6af13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::atan</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="202" column="9" declfile="casa/Quanta/QMath.h" declline="202" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1b80508a615426731c093f9cc6f083d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::atan2</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="204" column="9" declfile="casa/Quanta/QMath.h" declline="204" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae930bec334d8de89ae21afa4740ea300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::atan2</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Qtype &amp;other)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Qtype &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="206" column="9" declfile="casa/Quanta/QMath.h" declline="206" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa99bab80f528200bd74ab048f3a2306c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::atan2</definition>
        <argsstring>(const Qtype &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>atan2</name>
        <param>
          <type>const Qtype &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="208" column="9" declfile="casa/Quanta/QMath.h" declline="208" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae51405c1b727ce92b2eb416bb95e8504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::log</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="210" column="9" declfile="casa/Quanta/QMath.h" declline="210" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af823caa97f32a2e88fa62b4bc1f0321d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::log10</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="212" column="9" declfile="casa/Quanta/QMath.h" declline="212" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a41b1d36534953d972fa3ac0241f849ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::exp</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="214" column="9" declfile="casa/Quanta/QMath.h" declline="214" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed1e2ea71a841c92820e1b3e54fdbe73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::min</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="220" column="9" declfile="casa/Quanta/QMath.h" declline="220" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abe002dd817f515689612538d90777425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Qtype</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt;</type>
        <definition>Quantum&lt;Qtype&gt; casacore::max</definition>
        <argsstring>(const Quantum&lt; Qtype &gt; &amp;left, const Quantum&lt; Qtype &gt; &amp;other)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; Qtype &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath.h" line="222" column="9" declfile="casa/Quanta/QMath.h" declline="222" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ca42727899adce312d3dac386f577ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::ceil</definition>
        <argsstring>(const Int &amp;val)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="34" column="5" bodyfile="casa/Quanta/QMath2.cc" bodystart="34" bodyend="36" declfile="casa/Quanta/QMath.h" declline="227" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60e095acce9da9de64f746cd56cf8407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::floor</definition>
        <argsstring>(const Int &amp;val)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="38" column="5" bodyfile="casa/Quanta/QMath2.cc" bodystart="38" bodyend="40" declfile="casa/Quanta/QMath.h" declline="228" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4c4483a170e3066c4a3ca68b2535a5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt;</type>
        <definition>Array&lt; Complex &gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; Complex &gt; &amp;in, Double f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="50" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="50" bodyend="52" declfile="casa/Quanta/QMath.h" declline="229" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5349bdd4a4f16883f75d5d018872577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt;</type>
        <definition>Array&lt; Complex &gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; Complex &gt; &amp;in, Double f)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="53" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="53" bodyend="55" declfile="casa/Quanta/QMath.h" declline="230" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac8cb02824d291bbf095e28c41c7e26c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt;</type>
        <definition>Array&lt; DComplex &gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; DComplex &gt; &amp;in, Double f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="57" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="57" bodyend="59" declfile="casa/Quanta/QMath.h" declline="231" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa4516f280eb519c393e83269c065887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt;</type>
        <definition>Array&lt; DComplex &gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; DComplex &gt; &amp;in, Double f)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="60" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="60" bodyend="62" declfile="casa/Quanta/QMath.h" declline="232" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a064576044e10e6d04a443cd15ab45e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>Array&lt; Float &gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; Float &gt; &amp;in, Double f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="64" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="64" bodyend="66" declfile="casa/Quanta/QMath.h" declline="233" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7fef6ba44afda8666b44481f5ebb27d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>Array&lt; Float &gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; Float &gt; &amp;in, Double f)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="67" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="67" bodyend="69" declfile="casa/Quanta/QMath.h" declline="234" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa9dedbebc53391b9f3e01ff24ccc960f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt;</type>
        <definition>Array&lt; Int &gt; casacore::operator*</definition>
        <argsstring>(const Array&lt; Int &gt; &amp;in, Double f)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="71" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="71" bodyend="73" declfile="casa/Quanta/QMath.h" declline="235" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a899efec64ddbf8b8de018c0445566f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt;</type>
        <definition>Array&lt; Int &gt; casacore::operator/</definition>
        <argsstring>(const Array&lt; Int &gt; &amp;in, Double f)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="74" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="74" bodyend="76" declfile="casa/Quanta/QMath.h" declline="236" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ce07bda7a858b0d8415a6050b3c63a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
        <definition>Float casacore::real</definition>
        <argsstring>(const Float &amp;val)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="42" column="7" bodyfile="casa/Quanta/QMath2.cc" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a584496e61387809d7ffcb19c77fce638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::real</definition>
        <argsstring>(const Double &amp;val)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QMath2.cc" line="46" column="8" bodyfile="casa/Quanta/QMath2.cc" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c65ad385c3786dd08a790f9476c0475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Quantity &amp;ku)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ad5429fefc00b65ab7ddb394a0e3fa410" kindref="member">Quantity</ref> &amp;</type>
          <declname>ku</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/Quantum2.cc" line="39" column="9" bodyfile="casa/Quanta/Quantum2.cc" bodystart="39" bodyend="51" declfile="casa/Quanta/Quantum.h" declline="433" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a27053de4282f7c0bc01413969477c9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::readQuantity</definition>
        <argsstring>(Quantity &amp;res, MUString &amp;in)</argsstring>
        <name>readQuantity</name>
        <param>
          <type><ref refid="namespacecasacore_1ad5429fefc00b65ab7ddb394a0e3fa410" kindref="member">Quantity</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MUString" kindref="compound">MUString</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/Quantum2.cc" line="53" column="6" bodyfile="casa/Quanta/Quantum2.cc" bodystart="53" bodyend="80" declfile="casa/Quanta/Quantum.h" declline="434" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a64830b4e6da65008258e0400fcd1ed74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::readQuantity</definition>
        <argsstring>(Quantity &amp;res, const String &amp;in)</argsstring>
        <name>readQuantity</name>
        <param>
          <type><ref refid="namespacecasacore_1ad5429fefc00b65ab7ddb394a0e3fa410" kindref="member">Quantity</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>if (!in.empty() &amp;&amp; (in[0] == &apos;n&apos; || in[0] == &apos;N&apos; || in[0] == &apos;y&apos; || in[0] == &apos;Y&apos;)) {</para>
<para>if (!in.empty() &amp;&amp; (in[0] == &apos;n&apos; || in[0] == &apos;N&apos; || in[0] == &apos;y&apos; || in[0] == &apos;Y&apos;)) {</para>
        </inbodydescription>
        <location file="casa/Quanta/Quantum2.cc" line="82" column="6" bodyfile="casa/Quanta/Quantum2.cc" bodystart="82" bodyend="97" declfile="casa/Quanta/Quantum.h" declline="435" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4486f3a3220d4cfa2a43e93bb91480b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Double &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="60" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="60" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0dce282887f8d9e1c3bdbbc247c7c47c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Float &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="62" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af7502b0166ec111953197fefc870b5a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Int &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="64" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="64" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2bf48383d47163b572a3620a3d5e857c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; DComplex &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="66" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="66" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acb9d89f322e3ee5da529d75fa7757545" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Complex &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="68" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="68" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a631598ab4745c6ab4a6403363fd6e66a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Vector&lt; Double &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="70" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="70" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a790dba4739f28f99da795adcab0e0d78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Vector&lt; Float &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="72" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="72" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2dc1efa47a69e4700c5f721b2ff3fc91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Vector&lt; Int &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="74" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a29d9a0013bbe17c9b0690233c0611989" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Vector&lt; DComplex &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="76" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="76" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46dd1a3b53bcd1fed2da3b74a9aaf48a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Vector&lt; Complex &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="78" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="78" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9703297b17461359275501515e60237e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Array&lt; Double &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="80" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aca78aad1d358b97ac1023248ae0a976e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Array&lt; Float &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="82" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="82" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaeac9219258c4437eba6d96e02e96d3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Array&lt; Int &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="84" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="84" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a94f9572786360e9d7b61e9d9d820c87f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Array&lt; DComplex &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="86" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="86" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3d32b117909e8372620fe06ef7328e29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Array&lt; Complex &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="88" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="88" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7422014961b5fc24e26af729dfeed695" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Matrix&lt; Double &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="90" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="90" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a319915eab2631189e33e8b53b781b992" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Matrix&lt; Float &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="92" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="92" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af9a645e270193b5471228bbceb56ddbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Matrix&lt; Int &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="94" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="94" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa95f8e91c00e424f13be40723017d0c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Matrix&lt; DComplex &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="96" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a965f6321a76cd070ffa65edfc33414b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::quantumType</definition>
        <argsstring>(const Quantum&lt; Matrix&lt; Complex &gt; &gt; *)</argsstring>
        <name>quantumType</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Quantum" kindref="compound">Quantum</ref>&lt; <ref refid="classcasacore_1_1Matrix" kindref="compound">Matrix</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/QuantumType.h" line="98" column="14" bodyfile="casa/Quanta/QuantumType.h" bodystart="98" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a37833a33f1bb99b135b9f8ff9033a5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const RotMatrix &amp;rot)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1RotMatrix" kindref="compound">RotMatrix</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/RotMatrix.cc" line="153" column="1" bodyfile="casa/Quanta/RotMatrix.cc" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a49d651ba3ecdb8921575ee7125288b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::pass_one</definition>
        <argsstring>(const char *source, char *dest)</argsstring>
        <name>pass_one</name>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>f2</para>
<para>f1</para>
<para>f3</para>
<para>f4, sp</para>
<para>f5</para>
        </inbodydescription>
        <location file="casa/Quanta/Unit.cc" line="133" column="6" bodyfile="casa/Quanta/Unit.cc" bodystart="133" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac20bef06549bc4b5261bcc049e6988c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::pass_two</definition>
        <argsstring>(char *source, char *dest)</argsstring>
        <name>pass_two</name>
        <param>
          <type>char *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>bp</para>
<para>ep</para>
<para>f6</para>
<para>f4, pd</para>
        </inbodydescription>
        <location file="casa/Quanta/Unit.cc" line="177" column="6" bodyfile="casa/Quanta/Unit.cc" bodystart="177" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afd67d18b0675e2f2d785dceaabe819ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const UnitDim &amp;du)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitDim" kindref="compound">UnitDim</ref> &amp;</type>
          <declname>du</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitDim.cc" line="147" column="1" bodyfile="casa/Quanta/UnitDim.cc" bodystart="147" bodyend="160" declfile="casa/Quanta/UnitDim.h" declline="164" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd6d44fdad5c331fd5c6cf1f9a3fe2ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const UnitName &amp;name)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitName" kindref="compound">UnitName</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitName.cc" line="68" column="1" bodyfile="casa/Quanta/UnitName.cc" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab01a621ba4429e8dfbb33ff60e50d87d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref></type>
        <definition>UnitVal casacore::operator*</definition>
        <argsstring>(const UnitVal &amp;in, const UnitVal &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitVal.cc" line="101" column="9" bodyfile="casa/Quanta/UnitVal.cc" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a54b81610badcdc80292f787cb0fe6dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref></type>
        <definition>UnitVal casacore::operator/</definition>
        <argsstring>(const UnitVal &amp;in, const UnitVal &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitVal.cc" line="113" column="9" bodyfile="casa/Quanta/UnitVal.cc" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1f09a6b58e81b4ffe7fb5fdc1af0a95a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const UnitVal &amp;ku)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1UnitVal" kindref="compound">UnitVal</ref> &amp;</type>
          <declname>ku</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Quanta/UnitVal.cc" line="127" column="1" bodyfile="casa/Quanta/UnitVal.cc" bodystart="127" bodyend="130" declfile="casa/Quanta/UnitVal.h" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6cb4c5ca773bfafe59dbda5c02d03c96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>off_t</type>
        <definition>static off_t casacore::find_eol</definition>
        <argsstring>(const char *in, off_t len, off_t offset)</argsstring>
        <name>find_eol</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Casarc.cc" line="61" column="18" bodyfile="casa/System/Casarc.cc" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae3b29641bd95db4a78ac3e391eb09b11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void casacore::copyline</definition>
        <argsstring>(char *out, int outlen, const char *in, int inlen, off_t offset=0)</argsstring>
        <name>copyline</name>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outlen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inlen</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/Casarc.cc" line="67" column="17" bodyfile="casa/System/Casarc.cc" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ee1e61981af3856b0efcf621f613247" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>static Bool casacore::toInt</definition>
        <argsstring>(Int &amp;val, String &amp;error, const String &amp;in)</argsstring>
        <name>toInt</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ObjectID.cc" line="115" column="13" bodyfile="casa/System/ObjectID.cc" bodystart="115" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3b00c08484f75439604f40dc72f0be9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const ObjectID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ObjectID" kindref="compound">ObjectID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ObjectID.cc" line="211" column="1" bodyfile="casa/System/ObjectID.cc" bodystart="211" bodyend="217" declfile="casa/System/ObjectID.h" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a57adbc89ad371d2dc7ce48747caa8f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::hashFunc</definition>
        <argsstring>(const ObjectID &amp;)</argsstring>
        <name>hashFunc</name>
        <param>
          <type>const <ref refid="classcasacore_1_1ObjectID" kindref="compound">ObjectID</ref> &amp;</type>
          <defname>key</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ObjectID2.cc" line="34" column="6" bodyfile="casa/System/ObjectID2.cc" bodystart="34" bodyend="43" declfile="casa/System/ObjectID.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa6f81d628b2a5328c4be1ffb1b6ea1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>static Int casacore::stderr_creation_function</definition>
        <argsstring>(Double min, Double max, const String &amp;t, const String &amp;, const String &amp;, const String &amp;, Bool)</argsstring>
        <name>stderr_creation_function</name>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="52" column="12" bodyfile="casa/System/ProgressMeter.cc" bodystart="52" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab32839c084bed3a22e48fe30812f2ac1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void casacore::stderr_show_function</definition>
        <argsstring>(Int id, Double value)</argsstring>
        <name>stderr_show_function</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="74" column="13" bodyfile="casa/System/ProgressMeter.cc" bodystart="74" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3e0e454e5dd429dff0a08b2087909a3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void casacore::stderr_busy_function</definition>
        <argsstring>(Int id)</argsstring>
        <name>stderr_busy_function</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="92" column="13" bodyfile="casa/System/ProgressMeter.cc" bodystart="92" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aefb882a862df7dccbf8f6905bb3b1409" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void casacore::stderr_done_function</definition>
        <argsstring>(Int id)</argsstring>
        <name>stderr_done_function</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="107" column="13" bodyfile="casa/System/ProgressMeter.cc" bodystart="107" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac80f0defa28c53849c990ea7e7b2b4a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void casacore::stderr_update_function</definition>
        <argsstring>(Int id, Double value)</argsstring>
        <name>stderr_update_function</name>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/System/ProgressMeter.cc" line="122" column="13" bodyfile="casa/System/ProgressMeter.cc" bodystart="122" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a27e0e1900ed032fe34388642639ac5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class ElType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::binarySearch</definition>
        <argsstring>(Bool &amp;found, const Container &amp;container, const ElType &amp;value, uInt n, Int lower=0)</argsstring>
        <name>binarySearch</name>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &amp;</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const ElType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/BinarySearch.h" line="141" column="10" declfile="casa/Utilities/BinarySearch.h" declline="141" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae63ef9272ad73140627f6f1e46d4d1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class ElType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::binarySearchBrackets</definition>
        <argsstring>(Bool &amp;found, const Container &amp;container, const ElType &amp;value, uInt n, Int lower=0)</argsstring>
        <name>binarySearchBrackets</name>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &amp;</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const ElType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/BinarySearch.h" line="145" column="10" declfile="casa/Utilities/BinarySearch.h" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab09d81513a4aee9bd00d0962481f7904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const BitVector &amp;vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1BitVector" kindref="compound">BitVector</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/BitVector.cc" line="260" column="1" bodyfile="casa/Utilities/BitVector.cc" bodystart="260" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a934a460a1abbc2bfca01d76a09fab994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objthrowmv1</definition>
        <argsstring>(const void *to, const void *from, const size_t n)</argsstring>
        <name>objthrowmv1</name>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="31" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="31" bodyend="35" declfile="casa/Utilities/Copy.h" declline="104" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a35a9405846cf12ea8fd87cb918edc9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objthrowmv2</definition>
        <argsstring>(const void *to, const void *from, const size_t n, const size_t toStride, const size_t fromStride)</argsstring>
        <name>objthrowmv2</name>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="37" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="37" bodyend="42" declfile="casa/Utilities/Copy.h" declline="105" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5d1d097114a8235325c984ba9d0d4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objthrowcp1</definition>
        <argsstring>(const void *to, const void *from, const size_t n)</argsstring>
        <name>objthrowcp1</name>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="44" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="44" bodyend="48" declfile="casa/Utilities/Copy.h" declline="107" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2365178875411f0506a544b117147b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objthrowcp2</definition>
        <argsstring>(const void *to, const void *from, const size_t n, const size_t toStride, const size_t fromStride)</argsstring>
        <name>objthrowcp2</name>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="50" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="50" bodyend="55" declfile="casa/Utilities/Copy.h" declline="108" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a30f63da37e09621a32a4ab49a4c68646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objthrowfl1</definition>
        <argsstring>(const void *to, const size_t n)</argsstring>
        <name>objthrowfl1</name>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="57" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="57" bodyend="61" declfile="casa/Utilities/Copy.h" declline="110" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c8bebbaa0f2c074a52c1b4fa2d63c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objthrowfl2</definition>
        <argsstring>(const void *to, const size_t n, const size_t toStride)</argsstring>
        <name>objthrowfl2</name>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>toStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="63" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="63" bodyend="68" declfile="casa/Utilities/Copy.h" declline="111" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d0b5760035f3e6cf83c22ab2cfc3039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::objtestmv</definition>
        <argsstring>(size_t &amp;nLeft, size_t &amp;startLeft, size_t &amp;startRight, const void *to, const void *from, const size_t n, const size_t toStride, const size_t fromStride, const void *toPn, const void *fromPn, const size_t fromMto, const size_t toMfrom)</argsstring>
        <name>objtestmv</name>
        <param>
          <type>size_t &amp;</type>
          <declname>nLeft</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>startLeft</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>startRight</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fromStride</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>toPn</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>fromPn</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fromMto</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>toMfrom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy2.cc" line="70" column="8" bodyfile="casa/Utilities/Copy2.cc" bodystart="70" bodyend="121" declfile="casa/Utilities/Copy.h" declline="118" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a326ab149c115808802d15b37d35bf39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objmove</definition>
        <argsstring>(T *to, const T *from, size_t n)</argsstring>
        <name>objmove</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="143" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8f40c12cfa41f1f7fe135f8c6652ff23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objmove</definition>
        <argsstring>(T *to, const T *from, size_t n, size_t toStride, size_t fromStride)</argsstring>
        <name>objmove</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="147" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="147" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a27e1d55a6fc80816959c9b807f4b501f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objcopy</definition>
        <argsstring>(T *to, const T *from, size_t n)</argsstring>
        <name>objcopy</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="196" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="196" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af216b21f5627d4d76df79b0631dae130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objcopy</definition>
        <argsstring>(T *to, const T *from, size_t n, size_t toStride, size_t fromStride)</argsstring>
        <name>objcopy</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="198" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aba22600e34b54b84463c2a82649d5903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objcopyctor</definition>
        <argsstring>(T *to, const T *from, size_t n)</argsstring>
        <name>objcopyctor</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="203" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="203" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a552ee2bd64072104eb5e27e4ed5f8a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objcopyctor</definition>
        <argsstring>(T *to, const T *from, size_t n, size_t toStride, size_t fromStride)</argsstring>
        <name>objcopyctor</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>toStride</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>fromStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="217" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="217" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2a165620a587e48f2c4daf3d0787f28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objset</definition>
        <argsstring>(T *to, const T fillValue, size_t n)</argsstring>
        <name>objset</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>fillValue</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="250" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="250" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8cf29452b95c5667f928ed34dfffe3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::objset</definition>
        <argsstring>(T *to, const T fillValue, size_t n, size_t toStride)</argsstring>
        <name>objset</name>
        <param>
          <type>T *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>fillValue</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>toStride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Copy.h" line="253" column="19" bodyfile="casa/Utilities/Copy.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac84d4b21b244b3b41ab103f46d34d9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::throw_Null_CountedPtr_dereference_error</definition>
        <argsstring>()</argsstring>
        <name>throw_Null_CountedPtr_dereference_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/CountedPtr2.cc" line="31" column="6" bodyfile="casa/Utilities/CountedPtr2.cc" bodystart="31" bodyend="33" declfile="casa/Utilities/CountedPtr.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9cf064b7edb50832b5dcdaef6c3d1815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::countedPtrShared</definition>
        <argsstring>()</argsstring>
        <name>countedPtrShared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/CountedPtr.h" line="254" column="13" bodyfile="casa/Utilities/CountedPtr.h" bodystart="254" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9bf88d4a429837d71fcf3ace661e557c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1CountedPtr" kindref="compound">CountedPtr</ref>&lt; T &gt;</type>
        <definition>CountedPtr&lt;T&gt; casacore::static_pointer_cast</definition>
        <argsstring>(const CountedPtr&lt; U &gt; &amp;that)</argsstring>
        <name>static_pointer_cast</name>
        <param>
          <type>const <ref refid="classcasacore_1_1CountedPtr" kindref="compound">CountedPtr</ref>&lt; U &gt; &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/CountedPtr.h" line="259" column="12" bodyfile="casa/Utilities/CountedPtr.h" bodystart="259" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6029bc2c761285cfebf268fc7d218440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1CountedPtr" kindref="compound">CountedPtr</ref>&lt; T &gt;</type>
        <definition>CountedPtr&lt;T&gt; casacore::const_pointer_cast</definition>
        <argsstring>(const CountedPtr&lt; U &gt; &amp;that)</argsstring>
        <name>const_pointer_cast</name>
        <param>
          <type>const <ref refid="classcasacore_1_1CountedPtr" kindref="compound">CountedPtr</ref>&lt; U &gt; &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/CountedPtr.h" line="262" column="12" bodyfile="casa/Utilities/CountedPtr.h" bodystart="262" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d88f085c387d32d93151e7f79963b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1CountedPtr" kindref="compound">CountedPtr</ref>&lt; T &gt;</type>
        <definition>CountedPtr&lt;T&gt; casacore::dynamic_pointer_cast</definition>
        <argsstring>(const CountedPtr&lt; U &gt; &amp;that)</argsstring>
        <name>dynamic_pointer_cast</name>
        <param>
          <type>const <ref refid="classcasacore_1_1CountedPtr" kindref="compound">CountedPtr</ref>&lt; U &gt; &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/CountedPtr.h" line="265" column="12" bodyfile="casa/Utilities/CountedPtr.h" bodystart="265" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a36ad3dd1e85d04afcffdb84e0e94f9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, DataType type)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="33" column="1" bodyfile="casa/Utilities/DataType.cc" bodystart="33" bodyend="71" declfile="casa/Utilities/DataType.h" declline="160" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad678eb5439d7f2ff7b7aacdac759d85a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isScalar</definition>
        <argsstring>(DataType type)</argsstring>
        <name>isScalar</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="73" column="6" bodyfile="casa/Utilities/DataType.cc" bodystart="73" bodyend="76" declfile="casa/Utilities/DataType.h" declline="221" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a412cc9136a670c34bf61ce9926612876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isScalarFun</definition>
        <argsstring>(DataType type)</argsstring>
        <name>isScalarFun</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="78" column="6" bodyfile="casa/Utilities/DataType.cc" bodystart="78" bodyend="78" declfile="casa/Utilities/DataType.h" declline="223" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af0b48e9dcbc921808493c75ee188ec73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isArray</definition>
        <argsstring>(DataType type)</argsstring>
        <name>isArray</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="81" column="6" bodyfile="casa/Utilities/DataType.cc" bodystart="81" bodyend="85" declfile="casa/Utilities/DataType.h" declline="222" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aefa58b5374be4bf94206b973135c5e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isReal</definition>
        <argsstring>(DataType type)</argsstring>
        <name>isReal</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="87" column="6" bodyfile="casa/Utilities/DataType.cc" bodystart="87" bodyend="91" declfile="casa/Utilities/DataType.h" declline="229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af476504ab8a63f37d597e9691d7e5f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isComplex</definition>
        <argsstring>(DataType type)</argsstring>
        <name>isComplex</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="93" column="6" bodyfile="casa/Utilities/DataType.cc" bodystart="93" bodyend="97" declfile="casa/Utilities/DataType.h" declline="232" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3f670914917de3476e353f232c7d9c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::isNumeric</definition>
        <argsstring>(DataType type)</argsstring>
        <name>isNumeric</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="99" column="6" bodyfile="casa/Utilities/DataType.cc" bodystart="99" bodyend="102" declfile="casa/Utilities/DataType.h" declline="235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4d733f45207e4bf4b6f7e0ecf2639d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
        <definition>DataType casacore::asScalar</definition>
        <argsstring>(DataType type)</argsstring>
        <name>asScalar</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="105" column="10" bodyfile="casa/Utilities/DataType.cc" bodystart="105" bodyend="120" declfile="casa/Utilities/DataType.h" declline="213" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acf51ab9e3044657336c05e9c06b90cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
        <definition>DataType casacore::asArray</definition>
        <argsstring>(DataType type)</argsstring>
        <name>asArray</name>
        <param>
          <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.cc" line="122" column="10" bodyfile="casa/Utilities/DataType.cc" bodystart="122" bodyend="137" declfile="casa/Utilities/DataType.h" declline="214" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad0aef0370fafe3814ad6366f5b894c13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a81df62ade83d72ba450271cdc021220e" kindref="member">DataType</ref></type>
        <definition>DataType casacore::whatType</definition>
        <argsstring>()</argsstring>
        <name>whatType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DataType.h" line="167" column="17" bodyfile="casa/Utilities/DataType.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a461c91233c07cfa1037d3d83ba54bbef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::defaultValue</definition>
        <argsstring>(T &amp;theValue)</argsstring>
        <name>defaultValue</name>
        <param>
          <type>T &amp;</type>
          <declname>theValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/DefaultValue.h" line="97" column="25" bodyfile="casa/Utilities/DefaultValue.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a89e82caed091c80aa5c28d766ffe30d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::AccessInvalidFallibleObject</definition>
        <argsstring>()</argsstring>
        <name>AccessInvalidFallibleObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Fallible2.cc" line="35" column="6" bodyfile="casa/Utilities/Fallible2.cc" bodystart="35" bodyend="39" declfile="casa/Utilities/Fallible.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7d7656fead45a9e9161b5fdc5ba17214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(T *data, uInt nr, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>nr</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="312" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab9f483a26d07b96609f3095c564df9d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Array&lt; T &gt; &amp;data, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="318" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="318" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0c119d65ef9d3203d293fd56c00c4bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Block&lt; T &gt; &amp;data, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="324" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a899326079717cfa7648d933737da969c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Block&lt; T &gt; &amp;data, uInt nr, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>nr</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="330" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4a0fc56fc5992d2710851ebf3e2d7ab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class INX</type>
            <defval>uInt</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Vector&lt; INX &gt; &amp;indexVector, const T *data, INX nr, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; INX &gt; &amp;</type>
          <declname>indexVector</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>INX</type>
          <declname>nr</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="358" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3769a51db4271b52bafb7304dbe4d26f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class INX</type>
            <defval>uInt</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Vector&lt; INX &gt; &amp;indexVector, const Array&lt; T &gt; &amp;data, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; INX &gt; &amp;</type>
          <declname>indexVector</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="364" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5e4484837ca4d076ef61f44f2d2e9d6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class INX</type>
            <defval>uInt</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Vector&lt; INX &gt; &amp;indexVector, const Block&lt; T &gt; &amp;data, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; INX &gt; &amp;</type>
          <declname>indexVector</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="370" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac361c21c6114e2538b072110b69e987c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class INX</type>
            <defval>uInt</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::genSort</definition>
        <argsstring>(Vector&lt; INX &gt; &amp;indexVector, const Block&lt; T &gt; &amp;data, INX nr, Sort::Order order=Sort::Ascending, int options=0)</argsstring>
        <name>genSort</name>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; INX &gt; &amp;</type>
          <declname>indexVector</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Block" kindref="compound">Block</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>INX</type>
          <declname>nr</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8c" kindref="member">Sort::Order</ref></type>
          <declname>order</declname>
          <defval><ref refid="classcasacore_1_1Sort_1a8c6d6c1ed95e2848332f370b3acf9c8ca673791f898abcfa422fe314bdba2dd2e" kindref="member">Sort::Ascending</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/GenSort.h" line="377" column="6" bodyfile="casa/Utilities/GenSort.h" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8f79175b020d43936ea004b886b7649c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class ElType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::linearSearch1</definition>
        <argsstring>(const Container &amp;container, const ElType &amp;value, uInt lower=0)</argsstring>
        <name>linearSearch1</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const ElType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/LinearSearch.h" line="122" column="5" declfile="casa/Utilities/LinearSearch.h" declline="122" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace6568a6df8476ead2a5383a07343252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class ElType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::linearSearch</definition>
        <argsstring>(Bool &amp;found, const Container &amp;container, const ElType &amp;value, uInt n, uInt lower=0)</argsstring>
        <name>linearSearch</name>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &amp;</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const ElType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/LinearSearch.h" line="125" column="5" declfile="casa/Utilities/LinearSearch.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a93d4e2c68f46f2cd18c2adb30ce4f677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class ElType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::linearSearchBrackets1</definition>
        <argsstring>(const Container &amp;container, const ElType &amp;value, uInt lower=0)</argsstring>
        <name>linearSearchBrackets1</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const ElType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/LinearSearch.h" line="129" column="5" declfile="casa/Utilities/LinearSearch.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43de37a83a4991e34495ee1fd6f45366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class ElType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
        <definition>Int casacore::linearSearchBrackets</definition>
        <argsstring>(Bool &amp;found, const Container &amp;container, const ElType &amp;value, uInt n, uInt lower=0)</argsstring>
        <name>linearSearchBrackets</name>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &amp;</type>
          <declname>found</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const ElType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>lower</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/LinearSearch.h" line="132" column="5" declfile="casa/Utilities/LinearSearch.h" declline="132" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51f82b9c97b9f937270fc4986217d282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const MUString &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MUString" kindref="compound">MUString</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/MUString.cc" line="505" column="1" bodyfile="casa/Utilities/MUString.cc" bodystart="505" bodyend="508" declfile="casa/Utilities/MUString.h" declline="415" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad5904a94f9b09be95dd8446611a17e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        <definition>uInt casacore::precisionForValueErrorPairs</definition>
        <argsstring>(const Vector&lt; Double &gt; &amp;pair1, const Vector&lt; Double &gt; &amp;pair2)</argsstring>
        <name>precisionForValueErrorPairs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>pair1</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt; &amp;</type>
          <declname>pair2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Precision.cc" line="31" column="6" bodyfile="casa/Utilities/Precision.cc" bodystart="31" bodyend="85" declfile="casa/Utilities/Precision.h" declline="45" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a399e1b51031c9db260fd373141532428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;ios, const Regex &amp;exp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Regex" kindref="compound">Regex</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/Regex.cc" line="142" column="1" bodyfile="casa/Utilities/Regex.cc" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a71fddd19f74061e44adb10873b9aa18a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const T *)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const T *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="56" column="26" bodyfile="casa/Utilities/ValTypeId.h" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4664957cf1bac321f73fe3d8ea9aa740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const Bool *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="58" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="58" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af5187b962934f48183d47242a6f52325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const Char *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="60" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="60" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8acb86a1e0cff407f4300fc6c186dc6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const uChar *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="62" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2fbe9c9084585807dd255ff7128dce78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const Short *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="64" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="64" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2501b6d34718a0746722ac921effcbcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const uShort *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="66" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="66" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a610d081e83b860a04f9ffb737ea59022" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const Int *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="68" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="68" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af0ae665144b7fd15dc22589577c0940b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const uInt *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="70" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="70" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a520d07bebc19b3347d0fe95001ed351b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const Int64 *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="72" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="72" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a55492e21c21bb25d60a2909ae23c148d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const float *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const float *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="74" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aae9a5c7ff5f8a29105aa39c2b6aa2066" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const double *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const double *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="76" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="76" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5bb1fab9197ffb47d15b7bc9c3d0184f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const Complex *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="78" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="78" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0edc393255d568a2fbc2f8866fea1cb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const DComplex *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="80" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3bbb46e55539c7e98c571f06c32b8e0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const String *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="82" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="82" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac40fd4085993798030dc466cbdc0bd2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::valDataTypeId</definition>
        <argsstring>(const TableRecord *obj)</argsstring>
        <name>valDataTypeId</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableRecord" kindref="compound">TableRecord</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/Utilities/ValTypeId.h" line="84" column="15" bodyfile="casa/Utilities/ValTypeId.h" bodystart="84" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6b985fb673214522f6bc94c9099c8109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* casacore::getVersion</definition>
        <argsstring>()</argsstring>
        <name>getVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/version.cc" line="31" column="14" bodyfile="casa/version.cc" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa4d3d9489aa074dfcd6a81929e9d75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string casacore::getVersionCASA</definition>
        <argsstring>()</argsstring>
        <name>getVersionCASA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/version.cc" line="37" column="21" bodyfile="casa/version.cc" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aceeaaf4b9d39778fad002c0a5a4db61b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adios2::Params</type>
        <definition>static adios2::Params casacore::to_adios2_params</definition>
        <argsstring>(const Record &amp;record)</argsstring>
        <name>to_adios2_params</name>
        <param>
          <type>const <ref refid="classcasacore_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/Adios2StMan.cc" line="324" column="23" bodyfile="tables/DataMan/Adios2StMan.cc" bodystart="324" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3c0fcc09ea80f8adf6965c60e158f00c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Record" kindref="compound">Record</ref></type>
        <definition>static Record casacore::to_record</definition>
        <argsstring>(const adios2::Params &amp;params)</argsstring>
        <name>to_record</name>
        <param>
          <type>const adios2::Params &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/Adios2StMan.cc" line="334" column="15" bodyfile="tables/DataMan/Adios2StMan.cc" bodystart="334" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac07973675059b818b0dc3fb81903cfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::register_adios2stman</definition>
        <argsstring>()</argsstring>
        <name>register_adios2stman</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/Adios2StMan.cc" line="598" column="6" bodyfile="tables/DataMan/Adios2StMan.cc" bodystart="598" bodyend="601" declfile="tables/DataMan/Adios2StMan.h" declline="122" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2f8c0988e398d4002819df5a66734854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SourceType</type>
          </param>
          <param>
            <type>class TargetType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::retypedArrayEngineSet</definition>
        <argsstring>(Array&lt; SourceType &gt; &amp;out, const Array&lt; TargetType &gt; &amp;in)</argsstring>
        <name>retypedArrayEngineSet</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; SourceType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; TargetType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/RetypedArraySetGet.h" line="81" column="6" declfile="tables/DataMan/RetypedArraySetGet.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae28cc802e332951c3885e3db20cf8576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SourceType</type>
          </param>
          <param>
            <type>class TargetType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::retypedArrayEngineGet</definition>
        <argsstring>(Array&lt; TargetType &gt; &amp;out, const Array&lt; SourceType &gt; &amp;in)</argsstring>
        <name>retypedArrayEngineGet</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; TargetType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; SourceType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/RetypedArraySetGet.h" line="94" column="6" declfile="tables/DataMan/RetypedArraySetGet.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a533d6c13e86b344bb79c4db24c81349c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SourceType</type>
          </param>
          <param>
            <type>class TargetType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::retypedArrayEngineSet</definition>
        <argsstring>(Array&lt; SourceType &gt; &amp;out, const Array&lt; TargetType &gt; &amp;in, const IPosition &amp;shape, const void *extraArgument)</argsstring>
        <name>retypedArrayEngineSet</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; SourceType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; TargetType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>extraArgument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/RetypedArraySetGet.h" line="119" column="6" declfile="tables/DataMan/RetypedArraySetGet.h" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada32e105fa9a6220ee8ce374ef06049b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SourceType</type>
          </param>
          <param>
            <type>class TargetType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::retypedArrayEngineGet</definition>
        <argsstring>(Array&lt; TargetType &gt; &amp;out, const Array&lt; SourceType &gt; &amp;in, const IPosition &amp;shape, const void *extraArgument)</argsstring>
        <name>retypedArrayEngineGet</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; TargetType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; SourceType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>extraArgument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/RetypedArraySetGet.h" line="145" column="6" declfile="tables/DataMan/RetypedArraySetGet.h" declline="145" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3d51fca07c366e7c5e977a3e9a022da7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void casacore::TSMCube_MoveData</definition>
        <argsstring>(char *a, char *b, int n)</argsstring>
        <name>TSMCube_MoveData</name>
        <param>
          <type>char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/TSMCube.cc" line="52" column="13" bodyfile="tables/DataMan/TSMCube.cc" bodystart="52" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a322e4c70dbae063dabb1cc3eaf815de1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::getVirtualScalar</definition>
        <argsstring>(VirtualScalarColumn&lt; T &gt; *col, uInt rownr, T *dataPtr)</argsstring>
        <name>getVirtualScalar</name>
        <param>
          <type><ref refid="classcasacore_1_1VirtualScalarColumn" kindref="compound">VirtualScalarColumn</ref>&lt; T &gt; *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>rownr</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>dataPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/VirtScaCol.h" line="255" column="13" bodyfile="tables/DataMan/VirtScaCol.h" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1add8fa738e17ace9e93def08c60d12a6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::getVirtualScalar</definition>
        <argsstring>(DataManagerColumn *col, uInt, void *)</argsstring>
        <name>getVirtualScalar</name>
        <param>
          <type><ref refid="classcasacore_1_1DataManagerColumn" kindref="compound">DataManagerColumn</ref> *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/VirtScaCol.h" line="258" column="13" bodyfile="tables/DataMan/VirtScaCol.h" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a58b1d2e6b85d1a3a61bf8d9e46fa7b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::putVirtualScalar</definition>
        <argsstring>(VirtualScalarColumn&lt; T &gt; *col, uInt rownr, const T *dataPtr)</argsstring>
        <name>putVirtualScalar</name>
        <param>
          <type><ref refid="classcasacore_1_1VirtualScalarColumn" kindref="compound">VirtualScalarColumn</ref>&lt; T &gt; *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>rownr</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>dataPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/VirtScaCol.h" line="263" column="13" bodyfile="tables/DataMan/VirtScaCol.h" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d2c185d9d513c55f68a3e34e64f78f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::putVirtualScalar</definition>
        <argsstring>(DataManagerColumn *col, uInt, const void *)</argsstring>
        <name>putVirtualScalar</name>
        <param>
          <type><ref refid="classcasacore_1_1DataManagerColumn" kindref="compound">DataManagerColumn</ref> *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/DataMan/VirtScaCol.h" line="266" column="13" bodyfile="tables/DataMan/VirtScaCol.h" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acb82eaacb7c71b45ad6d53490b2f47a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;ios, const ColumnDesc &amp;cd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ColumnDesc" kindref="compound">ColumnDesc</ref> &amp;</type>
          <declname>cd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ColumnDesc.cc" line="172" column="1" bodyfile="tables/Tables/ColumnDesc.cc" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a75701b65d1695508900268425073ce9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;ios, ColumnDesc &amp;cd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1ColumnDesc" kindref="compound">ColumnDesc</ref> &amp;</type>
          <declname>cd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ColumnDesc.cc" line="178" column="8" bodyfile="tables/Tables/ColumnDesc.cc" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a78d037cffde3d7b8ce1ce048e1eb7c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;ios, const ColumnDesc &amp;cd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1ColumnDesc" kindref="compound">ColumnDesc</ref> &amp;</type>
          <declname>cd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ColumnDesc.cc" line="213" column="1" bodyfile="tables/Tables/ColumnDesc.cc" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afde2b7337a38d86b05550a04ef67da5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::readAsciiTable</definition>
        <argsstring>(const String &amp;filein, const String &amp;tableproto, const String &amp;tablename, Bool autoHeader, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine, const IPosition &amp;autoShape)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>autoHeader</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>autoShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1495" column="8" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1495" bodyend="1506" declfile="tables/Tables/ReadAsciiTable.h" declline="213" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5842be2f01921dc11658401972de0d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::readAsciiTable</definition>
        <argsstring>(const String &amp;filein, const String &amp;tableproto, const String &amp;tablename, const Vector&lt; String &gt; &amp;columnNames, const Vector&lt; String &gt; &amp;dataTypes, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>columnNames</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>dataTypes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1508" column="8" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1508" bodyend="1519" declfile="tables/Tables/ReadAsciiTable.h" declline="223" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53fe2c58168d53ee36951fcf633cdc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::readAsciiTable</definition>
        <argsstring>(const String &amp;headerfile, const String &amp;filein, const String &amp;tableproto, const String &amp;tablename, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>headerfile</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1521" column="8" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1521" bodyend="1531" declfile="tables/Tables/ReadAsciiTable.h" declline="254" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a28947f1956e695bba7f0392f34fac20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::readAsciiTable</definition>
        <argsstring>(const String &amp;headerfile, const String &amp;filein, const String &amp;tableproto, const char *tablename, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>headerfile</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1533" column="8" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1533" bodyend="1544" declfile="tables/Tables/ReadAsciiTable.h" declline="261" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a119beb7098e6e0a70af398c157f3425c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Table" kindref="compound">Table</ref></type>
        <definition>Table casacore::readAsciiTable</definition>
        <argsstring>(String &amp;formatString, Table::TableType tableType, const String &amp;filein, const String &amp;tableproto, const String &amp;tablename, Bool autoHeader, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine, const IPosition &amp;autoShape)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>formatString</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Table_1ac8328c6b0f8cfbe9f75ffdd76c618203" kindref="member">Table::TableType</ref></type>
          <declname>tableType</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>autoHeader</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>autoShape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1546" column="7" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1546" bodyend="1559" declfile="tables/Tables/ReadAsciiTable.h" declline="272" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6ae8271b362cd5f84809e7f75eb957b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Table" kindref="compound">Table</ref></type>
        <definition>Table casacore::readAsciiTable</definition>
        <argsstring>(String &amp;formatString, Table::TableType tableType, const String &amp;filein, const String &amp;tableproto, const String &amp;tablename, const Vector&lt; String &gt; &amp;columnNames, const Vector&lt; String &gt; &amp;dataTypes, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>formatString</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Table_1ac8328c6b0f8cfbe9f75ffdd76c618203" kindref="member">Table::TableType</ref></type>
          <declname>tableType</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>columnNames</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>dataTypes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1561" column="7" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1561" bodyend="1574" declfile="tables/Tables/ReadAsciiTable.h" declline="279" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1b8082cdbd764a3962cfa1d9023baf94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Table" kindref="compound">Table</ref></type>
        <definition>Table casacore::readAsciiTable</definition>
        <argsstring>(String &amp;formatString, Table::TableType tableType, const String &amp;headerfile, const String &amp;filein, const String &amp;tableproto, const String &amp;tablename, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>formatString</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Table_1ac8328c6b0f8cfbe9f75ffdd76c618203" kindref="member">Table::TableType</ref></type>
          <declname>tableType</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>headerfile</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1576" column="7" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1576" bodyend="1588" declfile="tables/Tables/ReadAsciiTable.h" declline="286" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a44aacb7857de070fcbed483737db7a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1Table" kindref="compound">Table</ref></type>
        <definition>Table casacore::readAsciiTable</definition>
        <argsstring>(String &amp;formatString, Table::TableType tableType, const String &amp;headerfile, const String &amp;filein, const String &amp;tableproto, const char *tablename, Char separator, const String &amp;commentMarkerRegex, Int firstLine, Int lastLine)</argsstring>
        <name>readAsciiTable</name>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>formatString</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Table_1ac8328c6b0f8cfbe9f75ffdd76c618203" kindref="member">Table::TableType</ref></type>
          <declname>tableType</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>headerfile</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>tableproto</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tablename</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1aee8247dad3ca180405bdb6835513a5ad" kindref="member">Char</ref></type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commentMarkerRegex</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>firstLine</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>lastLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/ReadAsciiTable.cc" line="1590" column="7" bodyfile="tables/Tables/ReadAsciiTable.cc" bodystart="1590" bodyend="1603" declfile="tables/Tables/ReadAsciiTable.h" declline="292" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5b06543c203af6c56711234a8813a2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;ios, const Table &amp;tab)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/Table.cc" line="889" column="1" bodyfile="tables/Tables/Table.cc" bodystart="889" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9a03630667417ba2ce646c0ae3333ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;ios, Table &amp;tab)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/Table.cc" line="901" column="8" bodyfile="tables/Tables/Table.cc" bodystart="901" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4b7c980164663f642be62b23acd5c56a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;ios, const Table &amp;tab)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>ios</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/Table.cc" line="920" column="1" bodyfile="tables/Tables/Table.cc" bodystart="920" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a478b71925b408d276efa837f35fdf66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&lt;&lt;</definition>
        <argsstring>(AipsIO &amp;os, const TableRecord &amp;rec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableRecord" kindref="compound">TableRecord</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TableRecord.cc" line="373" column="1" bodyfile="tables/Tables/TableRecord.cc" bodystart="373" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac05dc1495a9a3ed75fb3c20535daf7c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
        <definition>AipsIO&amp; casacore::operator&gt;&gt;</definition>
        <argsstring>(AipsIO &amp;os, TableRecord &amp;rec)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classcasacore_1_1AipsIO" kindref="compound">AipsIO</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1TableRecord" kindref="compound">TableRecord</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TableRecord.cc" line="379" column="8" bodyfile="tables/Tables/TableRecord.cc" bodystart="379" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a52327b35b7334cc8cb46d8e3cff11f74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allLE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="57" column="10" declfile="tables/Tables/TabVecLogic.h" declline="57" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53dd136c01b63cd210bdc84b7125b5fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allLT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="59" column="10" declfile="tables/Tables/TabVecLogic.h" declline="59" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acb436e487bf217e0978238249b5effdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allGE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="61" column="10" declfile="tables/Tables/TabVecLogic.h" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab6fbab074db4fe265fc04b9d226f5f48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allGT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="63" column="10" declfile="tables/Tables/TabVecLogic.h" declline="63" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a638edaf06533710315cf3ec2b839d282" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allEQ</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="65" column="10" declfile="tables/Tables/TabVecLogic.h" declline="65" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5a7969cc51d6b4153c4243f90a8fad34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="67" column="10" declfile="tables/Tables/TabVecLogic.h" declline="67" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adf38d9aa7c9e51db1b35fc61b0679feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allLE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="91" column="10" declfile="tables/Tables/TabVecLogic.h" declline="91" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a06bdaf178b70273878f64a4e2ea03bf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allLE</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="93" column="10" declfile="tables/Tables/TabVecLogic.h" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afcb53dc1e15ba7c7b30181b6ce8cb374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allLT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="95" column="10" declfile="tables/Tables/TabVecLogic.h" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa448ada331a57726872a3bdc4a118bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allLT</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="97" column="10" declfile="tables/Tables/TabVecLogic.h" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af44dacaefa80ab2468bb4ad515bc645c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allGE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="99" column="10" declfile="tables/Tables/TabVecLogic.h" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6048f00a8b3c982088a73a648b9b3a0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allGE</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="101" column="10" declfile="tables/Tables/TabVecLogic.h" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1913234773f2f8f7850e2636bf9b9b78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allGT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="103" column="10" declfile="tables/Tables/TabVecLogic.h" declline="103" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6fef565b8655045ddb893d2143570f6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allGT</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="105" column="10" declfile="tables/Tables/TabVecLogic.h" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac6a37e080360feacc6738958037d4232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allEQ</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="107" column="10" declfile="tables/Tables/TabVecLogic.h" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aff765ead62279bbab963464a92911532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allEQ</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="109" column="10" declfile="tables/Tables/TabVecLogic.h" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5f5a9d5f23e48c62d1eb713a1fc5700d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>allNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="111" column="10" declfile="tables/Tables/TabVecLogic.h" declline="111" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7b6768e25ff855165751bcb87af635ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allNE</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>allNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="113" column="10" declfile="tables/Tables/TabVecLogic.h" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af8be6df3fa89b67671db7772c16b0038" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyLE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;l, const TableVector&lt; T &gt; &amp;r)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="146" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a255677e89aa105c12eff17d197003479" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyLT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;l, const TableVector&lt; T &gt; &amp;r)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="151" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed4a718d095da4e0ec65f4517e114fa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyGE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;l, const TableVector&lt; T &gt; &amp;r)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="156" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a89456719d16d149ec96b92ac11c4f88d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyGT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;l, const TableVector&lt; T &gt; &amp;r)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="161" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab8ae26cb44aa6096ae66444d074ac599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyEQ</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;l, const TableVector&lt; T &gt; &amp;r)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="166" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8aa7eb8d1cc7a6766316fcab818ef17b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyNE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;l, const TableVector&lt; T &gt; &amp;r)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="171" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adcaa29df8033aef5c21464869b7a15c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyLE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;tv, const T &amp;val)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="184" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5676ca39ac0381bd310700dfd15e8504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyLE</definition>
        <argsstring>(const T &amp;val, const TableVector&lt; T &gt; &amp;tv)</argsstring>
        <name>anyLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="189" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4624e3ec634d48f22b65f04c40576c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyLT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;tv, const T &amp;val)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="194" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad84aa451fbe6c9e6cf6ce02af0bb5504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyLT</definition>
        <argsstring>(const T &amp;val, const TableVector&lt; T &gt; &amp;tv)</argsstring>
        <name>anyLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="199" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a652a49cee46cb7a9daec42297b7ba85b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyGE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;tv, const T &amp;val)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="204" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac58a962f08b1062238ae510f0535e92b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyGE</definition>
        <argsstring>(const T &amp;val, const TableVector&lt; T &gt; &amp;tv)</argsstring>
        <name>anyGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="209" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc53799bb82ff002e20c3681679d4678" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyGT</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;tv, const T &amp;val)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="214" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a740b9515b17131ac55f97df23fc5902f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyGT</definition>
        <argsstring>(const T &amp;val, const TableVector&lt; T &gt; &amp;tv)</argsstring>
        <name>anyGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="219" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab27e8bf9209eb441726ed2a69a2122c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyEQ</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;tv, const T &amp;val)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="224" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9edbcc55767ed82feedaeae165a6731" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyEQ</definition>
        <argsstring>(const T &amp;val, const TableVector&lt; T &gt; &amp;tv)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="229" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a8707e32720ff969b4367f6a873aead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyNE</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;tv, const T &amp;val)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="234" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af779ca7960044a33564974676983db38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyNE</definition>
        <argsstring>(const T &amp;val, const TableVector&lt; T &gt; &amp;tv)</argsstring>
        <name>anyNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>tv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecLogic.h" line="239" column="6" bodyfile="tables/Tables/TabVecLogic.h" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6ddbfa7377cc3b1998de735022149621" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator+=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="61" column="10" declfile="tables/Tables/TabVecMath.h" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7c090b9085856e20458f5710d4f45ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator-=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="64" column="10" declfile="tables/Tables/TabVecMath.h" declline="64" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53a99a0cfbe7b465aeada013b996ba24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator*=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="67" column="10" declfile="tables/Tables/TabVecMath.h" declline="67" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a45076dac31341cd7ce0da98b38c94b81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator/=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="70" column="10" declfile="tables/Tables/TabVecMath.h" declline="70" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2073d5d598a3eef9218ed250ca92696a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator+=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="74" column="10" declfile="tables/Tables/TabVecMath.h" declline="74" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abe8e5ea80e72127ac8c67e5cc08dfda0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator-=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="77" column="10" declfile="tables/Tables/TabVecMath.h" declline="77" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd03173fbf10768fd59a2a068d0a380c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator*=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="80" column="10" declfile="tables/Tables/TabVecMath.h" declline="80" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adcb8f486426d458815e3523b2071abe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::operator/=</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="83" column="10" declfile="tables/Tables/TabVecMath.h" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a310d69c92633bc66432970dcbbb3b046" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="87" column="17" declfile="tables/Tables/TabVecMath.h" declline="87" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5d007e55f131daccac17f4ec70569395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="90" column="17" declfile="tables/Tables/TabVecMath.h" declline="90" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a49cf920c6286378f3b3ae1396f13906d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="94" column="17" declfile="tables/Tables/TabVecMath.h" declline="94" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8a4073f33c6ba6a60c6033d0dbbb4585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="98" column="17" declfile="tables/Tables/TabVecMath.h" declline="98" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae0047cf42db4f02ae5a12870943b4ab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="102" column="17" declfile="tables/Tables/TabVecMath.h" declline="102" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9e454af72d916ea860e1ba4219c17e19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="106" column="17" declfile="tables/Tables/TabVecMath.h" declline="106" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a637ae32d0ae3a5bab41c10c3bb24256e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="112" column="17" declfile="tables/Tables/TabVecMath.h" declline="112" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2fa787df6eb83f7fc752035053aaf19f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="116" column="17" declfile="tables/Tables/TabVecMath.h" declline="116" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a024aa60a2ecc251628f9e17a220f7bbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="120" column="17" declfile="tables/Tables/TabVecMath.h" declline="120" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed6c04ef9175b12f2c659e2fceb3e8d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="124" column="17" declfile="tables/Tables/TabVecMath.h" declline="124" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4fb6ab1c5bdb925006f938d9113eff7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="129" column="17" declfile="tables/Tables/TabVecMath.h" declline="129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad6b5e4ed83cdb8b4bca46c14bd31350e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="133" column="17" declfile="tables/Tables/TabVecMath.h" declline="133" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac62a75476b1baeee94bc36f9ea471945" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="137" column="17" declfile="tables/Tables/TabVecMath.h" declline="137" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a96c49b33631a966d6ddd4796b833e849" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const T &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="141" column="17" declfile="tables/Tables/TabVecMath.h" declline="141" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa51488e0666a1f4f3dd8fd3a6574690e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::cos</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="164" column="31" declfile="tables/Tables/TabVecMath.h" declline="164" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e2022ec09e9bfc59839345b10cf5fcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::cosh</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="165" column="31" declfile="tables/Tables/TabVecMath.h" declline="165" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad6309545f05481ffbf2f8131b08ef22a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::exp</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="166" column="31" declfile="tables/Tables/TabVecMath.h" declline="166" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a684daba801b656602d79ed94bfb4390d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::log</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="167" column="31" declfile="tables/Tables/TabVecMath.h" declline="167" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a191dae0535f34a8b491045ee557761be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::log10</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="168" column="31" declfile="tables/Tables/TabVecMath.h" declline="168" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaeeb4d528565283cb5eb24c8f21f7b23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::pow</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;value, const TableVector&lt; T &gt; &amp;exponent)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="169" column="31" declfile="tables/Tables/TabVecMath.h" declline="169" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ed71cb35c50ddd9afff43371cb15d8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::sin</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="171" column="31" declfile="tables/Tables/TabVecMath.h" declline="171" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad80649e8a5dc723db734a5d21da32216" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::sinh</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="172" column="31" declfile="tables/Tables/TabVecMath.h" declline="172" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3c1397972e698212016e9d37aa43c714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::sqrt</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="173" column="31" declfile="tables/Tables/TabVecMath.h" declline="173" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd251c19fcb597dde5455d6011f0a2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::acos</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="196" column="31" declfile="tables/Tables/TabVecMath.h" declline="196" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad2c930a0a0e3e1fbb6b25f635a2db31b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::asin</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="197" column="31" declfile="tables/Tables/TabVecMath.h" declline="197" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab3311dc915db92590e0ae40aa3731047" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::atan</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="198" column="31" declfile="tables/Tables/TabVecMath.h" declline="198" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af2618cdea87595c0636aa2567ea3950b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;y, const TableVector&lt; T &gt; &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="199" column="31" declfile="tables/Tables/TabVecMath.h" declline="199" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0eb10c05b67cc6f65d5a91dda5f7607d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::ceil</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="201" column="31" declfile="tables/Tables/TabVecMath.h" declline="201" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acef7b42a062ed832c6eb3eeccd877da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::fabs</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="202" column="31" declfile="tables/Tables/TabVecMath.h" declline="202" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0c4de857348f0ae53353781efbfbf4ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::floor</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="203" column="31" declfile="tables/Tables/TabVecMath.h" declline="203" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace9749e3850480024b0073f585300dca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;value, const TableVector&lt; T &gt; &amp;modulo)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>modulo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="204" column="31" declfile="tables/Tables/TabVecMath.h" declline="204" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc21aea5801b2e07335096c7e3b68fc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt; T &gt; casacore::pow</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;value, const double &amp;exponent)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="375" column="13" bodyfile="tables/Tables/TabVecMath.h" bodystart="375" bodyend="376" declfile="tables/Tables/TabVecMath.h" declline="206" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a49ce95c04e847bfd19657b706bd1e6bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::tan</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="208" column="31" declfile="tables/Tables/TabVecMath.h" declline="208" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0fa6e9f16c9d58ce63947ece52abaddb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt;T&gt; casacore::tanh</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="209" column="31" declfile="tables/Tables/TabVecMath.h" declline="209" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8f7e27fb4a9e5d51284440570fc2efba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::minMax</definition>
        <argsstring>(T &amp;min, T &amp;max, const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>minMax</name>
        <param>
          <type>T &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="388" column="6" bodyfile="tables/Tables/TabVecMath.h" bodystart="388" bodyend="389" declfile="tables/Tables/TabVecMath.h" declline="233" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a70d7e0343da7fd3e8dbcc1d0d622cd7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::min</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="391" column="3" bodyfile="tables/Tables/TabVecMath.h" bodystart="391" bodyend="392" declfile="tables/Tables/TabVecMath.h" declline="238" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab02ed431e04c87ea0bc2295840042128" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::max</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="394" column="3" bodyfile="tables/Tables/TabVecMath.h" bodystart="394" bodyend="395" declfile="tables/Tables/TabVecMath.h" declline="243" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8e6a36cab092406c8ed8d9be96a2fa02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;, T start, T inc)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="398" column="6" bodyfile="tables/Tables/TabVecMath.h" bodystart="398" bodyend="399" declfile="tables/Tables/TabVecMath.h" declline="248" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a14ffa6e790c6d557f7821357236acb7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;, T start)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="401" column="6" bodyfile="tables/Tables/TabVecMath.h" bodystart="401" bodyend="402" declfile="tables/Tables/TabVecMath.h" declline="253" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada7a6bbcf76ee0a67e61f11dd9e46b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::indgen</definition>
        <argsstring>(TableVector&lt; T &gt; &amp;)</argsstring>
        <name>indgen</name>
        <param>
          <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="404" column="6" bodyfile="tables/Tables/TabVecMath.h" bodystart="404" bodyend="405" declfile="tables/Tables/TabVecMath.h" declline="258" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab79568c253aa52c6a1ed4f006ab6a20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sum</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="380" column="3" bodyfile="tables/Tables/TabVecMath.h" bodystart="380" bodyend="381" declfile="tables/Tables/TabVecMath.h" declline="262" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc3e0e50b3dc5016ada871404ee45126" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::product</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="383" column="3" bodyfile="tables/Tables/TabVecMath.h" bodystart="383" bodyend="384" declfile="tables/Tables/TabVecMath.h" declline="269" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad49269adf6f2b281fa3d2ee831f4c92f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::innerProduct</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>innerProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="409" column="3" bodyfile="tables/Tables/TabVecMath.h" bodystart="409" bodyend="410" declfile="tables/Tables/TabVecMath.h" declline="292" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2a7480f80383c0c0a57d90e9946fdd92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::norm</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <defname>tv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="412" column="3" bodyfile="tables/Tables/TabVecMath.h" bodystart="412" bodyend="413" declfile="tables/Tables/TabVecMath.h" declline="297" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aabaea183797d971ddb86701224a0614c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt;</type>
        <definition>TableVector&lt; T &gt; casacore::crossProduct</definition>
        <argsstring>(const TableVector&lt; T &gt; &amp;left, const TableVector&lt; T &gt; &amp;right)</argsstring>
        <name>crossProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableVector" kindref="compound">TableVector</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TabVecMath.h" line="415" column="13" bodyfile="tables/Tables/TabVecMath.h" bodystart="415" bodyend="417" declfile="tables/Tables/TabVecMath.h" declline="301" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a816bedd2ae44423df23a6d0509cc9fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecReptvLE</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecReptvLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="62" column="10" declfile="tables/Tables/TVecLogic.h" declline="62" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abf9c908ff685b48e6d5e3f4d12706a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecReptvLT</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecReptvLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="64" column="10" declfile="tables/Tables/TVecLogic.h" declline="64" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a80ff7abd5c74bb2e9c3cd6fea67be775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecReptvGE</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecReptvGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="66" column="10" declfile="tables/Tables/TVecLogic.h" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5f136ea8ed02f09c8b6a6427435c95c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecReptvGT</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecReptvGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="68" column="10" declfile="tables/Tables/TVecLogic.h" declline="68" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a25814e4c0c2295c4a6c47d380d975f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecReptvEQ</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecReptvEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="70" column="10" declfile="tables/Tables/TVecLogic.h" declline="70" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a06d94c3fb6239ea97882b0857f936a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecReptvNE</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecReptvNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="72" column="10" declfile="tables/Tables/TVecLogic.h" declline="72" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae4c6599cf22526a3975ba03769ca1a9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvalrLE</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>tabVecRepvalrLE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="97" column="10" declfile="tables/Tables/TVecLogic.h" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f94323291b6edbe84f8b6abe292f8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvallLE</definition>
        <argsstring>(const T &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecRepvallLE</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="99" column="10" declfile="tables/Tables/TVecLogic.h" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8323f3e21e4222189a0a5ef5d37167ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvalrLT</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>tabVecRepvalrLT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="101" column="10" declfile="tables/Tables/TVecLogic.h" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46cd1563983190ceee88e0bdb1a46866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvallLT</definition>
        <argsstring>(const T &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecRepvallLT</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="103" column="10" declfile="tables/Tables/TVecLogic.h" declline="103" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa85633d9048d37422eeef94d26399460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvalrGE</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>tabVecRepvalrGE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="105" column="10" declfile="tables/Tables/TVecLogic.h" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab83b80bfa61c868cae572f848ec2c861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvallGE</definition>
        <argsstring>(const T &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecRepvallGE</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="107" column="10" declfile="tables/Tables/TVecLogic.h" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa5ac9951a7a062b715bf04a6fb502264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvalrGT</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>tabVecRepvalrGT</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="109" column="10" declfile="tables/Tables/TVecLogic.h" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0a697da7b0c7f8ee81632866ed61fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvallGT</definition>
        <argsstring>(const T &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecRepvallGT</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="111" column="10" declfile="tables/Tables/TVecLogic.h" declline="111" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a80ae2e9ec82f17218f2f3b137231c280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvalrEQ</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>tabVecRepvalrEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="113" column="10" declfile="tables/Tables/TVecLogic.h" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5f22c55f3aaab3e8ea47b3d20c1bca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvallEQ</definition>
        <argsstring>(const T &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecRepvallEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="115" column="10" declfile="tables/Tables/TVecLogic.h" declline="115" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab161794926cd8440bb31838f75e5efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvalrNE</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>tabVecRepvalrNE</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="117" column="10" declfile="tables/Tables/TVecLogic.h" declline="117" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c49eee2505a7870f68f2c47dbf91a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::tabVecRepvallNE</definition>
        <argsstring>(const T &amp;left, const TabVecRep&lt; T &gt; &amp;right)</argsstring>
        <name>tabVecRepvallNE</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecLogic.h" line="119" column="10" declfile="tables/Tables/TVecLogic.h" declline="119" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a139ccab33ba60681d46fd1e2056ac110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecReptvassadd</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvassadd</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="57" column="17" declfile="tables/Tables/TVecMath.h" declline="57" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab622fb6dd2983a278276b6f1f5f4b0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecReptvasssub</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvasssub</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="59" column="17" declfile="tables/Tables/TVecMath.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9c6b1f49a66687ddde715fab18f9d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecReptvasstim</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvasstim</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="61" column="17" declfile="tables/Tables/TVecMath.h" declline="61" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a011246c8c5ebd4de85800370d171ad79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecReptvassdiv</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvassdiv</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="63" column="17" declfile="tables/Tables/TVecMath.h" declline="63" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed6bf636d8288be6b4b2e3491082fda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecRepvalassadd</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalassadd</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="66" column="17" declfile="tables/Tables/TVecMath.h" declline="66" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2dfa6edfa6e79519c448c9ae9db7b41d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecRepvalasssub</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalasssub</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="68" column="17" declfile="tables/Tables/TVecMath.h" declline="68" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3b6d1b64524d25e3f32ef33e9a9e8fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecRepvalasstim</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalasstim</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="70" column="17" declfile="tables/Tables/TVecMath.h" declline="70" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a47bb7aef278f7d006b94ea4614675a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecRepvalassdiv</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalassdiv</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="72" column="17" declfile="tables/Tables/TVecMath.h" declline="72" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a876b91301b2e792ccf4afd433114ddaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepnegate</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepnegate</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="79" column="22" declfile="tables/Tables/TVecMath.h" declline="79" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51ba863354e597dfda3995862c86d4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReptvadd</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvadd</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="82" column="22" declfile="tables/Tables/TVecMath.h" declline="82" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6ab1129daf00e5f745387c4b45705828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReptvsub</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvsub</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="85" column="22" declfile="tables/Tables/TVecMath.h" declline="85" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a48ef6b11c6eff6b706f0301760260e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReptvtim</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvtim</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="88" column="22" declfile="tables/Tables/TVecMath.h" declline="88" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a558e47240696ddf68ae562e60fcb26db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReptvdiv</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptvdiv</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="91" column="22" declfile="tables/Tables/TVecMath.h" declline="91" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ab74295a4e963a56523503f43be51d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalradd</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalradd</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="96" column="22" declfile="tables/Tables/TVecMath.h" declline="96" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a71d57bbe4258882d3a531ef240243d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalrsub</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalrsub</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="100" column="22" declfile="tables/Tables/TVecMath.h" declline="100" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af357f9b98eb0ab7705a4ea8c6bf25c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalrtim</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalrtim</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="104" column="22" declfile="tables/Tables/TVecMath.h" declline="104" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a13e81cc941667ffa42350f2cec90e697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalrdiv</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const T &amp;)</argsstring>
        <name>tabVecRepvalrdiv</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="108" column="22" declfile="tables/Tables/TVecMath.h" declline="108" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abbc84ee2f147b369c81f13462f34cbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalladd</definition>
        <argsstring>(const T &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepvalladd</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="113" column="22" declfile="tables/Tables/TVecMath.h" declline="113" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3d243763fd17aa8b930c95987226c241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvallsub</definition>
        <argsstring>(const T &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepvallsub</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="117" column="22" declfile="tables/Tables/TVecMath.h" declline="117" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af99190a2e4820d908ae63f6a73bffb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalltim</definition>
        <argsstring>(const T &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepvalltim</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="121" column="22" declfile="tables/Tables/TVecMath.h" declline="121" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a03088bd383b64e87d2020d7a55229bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepvalldiv</definition>
        <argsstring>(const T &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepvalldiv</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="125" column="22" declfile="tables/Tables/TVecMath.h" declline="125" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7baba21976f8fa4a9cbd6c953e94fa2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepcos</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepcos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="149" column="22" declfile="tables/Tables/TVecMath.h" declline="149" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a83eb1da55cf994f47cc28f9da9eae8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepcosh</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepcosh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="150" column="22" declfile="tables/Tables/TVecMath.h" declline="150" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a373074b811480076402760f928c3e72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepexp</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepexp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="151" column="22" declfile="tables/Tables/TVecMath.h" declline="151" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a016e3ea551a34ee043aad057bb116ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReplog</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReplog</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="152" column="22" declfile="tables/Tables/TVecMath.h" declline="152" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a70315d856525b9dd1e0776b271f41c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReplog10</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReplog10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="153" column="22" declfile="tables/Tables/TVecMath.h" declline="153" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaacd3d7382cd300a7f7a866f42c24e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReppow</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReppow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="154" column="22" declfile="tables/Tables/TVecMath.h" declline="154" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7ca630ebae95bfb83ea3f98ce6815bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepsin</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepsin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="156" column="22" declfile="tables/Tables/TVecMath.h" declline="156" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd686d00ddee01f12431fa2a2770d931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepsinh</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepsinh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="157" column="22" declfile="tables/Tables/TVecMath.h" declline="157" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e3b0ce6b85f693f86b992f9c529e29e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepsqrt</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepsqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="158" column="22" declfile="tables/Tables/TVecMath.h" declline="158" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8c35c200880cbcd66ae0d957ef5b384b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepacos</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepacos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="181" column="22" declfile="tables/Tables/TVecMath.h" declline="181" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aff9f1adcf68a40979b02a82f74b73916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepasin</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepasin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="182" column="22" declfile="tables/Tables/TVecMath.h" declline="182" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2222a0f30db9f6d67b3cce57122df74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepatan</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepatan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="183" column="22" declfile="tables/Tables/TVecMath.h" declline="183" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53f69740d19385c25d59ef8d3827a83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepatan2</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepatan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="184" column="22" declfile="tables/Tables/TVecMath.h" declline="184" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0a1393de5f3be61323c661212cfb4b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepceil</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="186" column="22" declfile="tables/Tables/TVecMath.h" declline="186" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afcd2472aded444d18ab45bac08d35adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepfabs</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepfabs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="187" column="22" declfile="tables/Tables/TVecMath.h" declline="187" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa4c342d22d4efb19f1aee52c4c364911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepfloor</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepfloor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="188" column="22" declfile="tables/Tables/TVecMath.h" declline="188" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a09592b3d6c7bf81b4556a58c20471a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepfmod</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepfmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="189" column="22" declfile="tables/Tables/TVecMath.h" declline="189" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8c7d9835b947d65356534fac026dc2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReppow</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const double &amp;)</argsstring>
        <name>tabVecReppow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const double &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="191" column="22" declfile="tables/Tables/TVecMath.h" declline="191" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2a176f46c6a2061810e9de81302dda26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReptan</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="193" column="22" declfile="tables/Tables/TVecMath.h" declline="193" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a84b4a077a3598d02fc788b2c0acc5b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecReptanh</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecReptanh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="194" column="22" declfile="tables/Tables/TVecMath.h" declline="194" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab290b22ecd3e86695f1cb01cda888e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecRepminmax</definition>
        <argsstring>(T &amp;min, T &amp;max, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepminmax</name>
        <param>
          <type>T &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="216" column="17" declfile="tables/Tables/TVecMath.h" declline="216" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abf1fd1d574d3cce808525724d812b5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::tabVecRepindgen</definition>
        <argsstring>(TabVecRep&lt; T &gt; &amp;, T start, T inc)</argsstring>
        <name>tabVecRepindgen</name>
        <param>
          <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="220" column="17" declfile="tables/Tables/TVecMath.h" declline="220" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3061051a1a6bbbf75ae83c2fa6e4c07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::tabVecRepsum</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepsum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="223" column="14" declfile="tables/Tables/TVecMath.h" declline="223" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a823d27ba5893bdddb1b7094b4f68f715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::tabVecRepproduct</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepproduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="229" column="14" declfile="tables/Tables/TVecMath.h" declline="229" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9c27dd3d27ef90298d4ff2771b2879a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::tabVecRepinnerproduct</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepinnerproduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="250" column="14" declfile="tables/Tables/TVecMath.h" declline="250" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa3759045038f17b947f6ee67aa580618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::tabVecRepnorm</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepnorm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="254" column="14" declfile="tables/Tables/TVecMath.h" declline="254" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb351e6d6dd0f7287bd5266f90d8c319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        <definition>TabVecRep&lt;T&gt;&amp; casacore::tabVecRepcrossproduct</definition>
        <argsstring>(const TabVecRep&lt; T &gt; &amp;, const TabVecRep&lt; T &gt; &amp;)</argsstring>
        <name>tabVecRepcrossproduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TabVecRep" kindref="compound">TabVecRep</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Tables/TVecMath.h" line="257" column="22" declfile="tables/Tables/TVecMath.h" declline="257" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9df5840806c475512a12fd0b79e31a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEFNAFillArray</definition>
        <argsstring>(Array&lt; T &gt; &amp;res, Array&lt; T &gt; arr)</argsstring>
        <name>TEFNAFillArray</name>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprFuncNodeArray.cc" line="45" column="8" bodyfile="tables/TaQL/ExprFuncNodeArray.cc" bodystart="45" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a151d52a319c027664cc09a534601776b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEFNAiifExec</definition>
        <argsstring>(const Bool *cond, const T *left, int incrLeft, const T *right, int incrRight, T *result, size_t nr)</argsstring>
        <name>TEFNAiifExec</name>
        <param>
          <type>const <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incrLeft</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>right</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incrRight</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprFuncNodeArray.cc" line="64" column="8" bodyfile="tables/TaQL/ExprFuncNodeArray.cc" bodystart="64" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae8acdf161f8fe2d16bec8ae2ddf3b6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::TEFNAiifAS</definition>
        <argsstring>(Bool useArray, const MArray&lt; T &gt; &amp;arr, const TENShPtr &amp;node, const TableExprId &amp;id)</argsstring>
        <name>TEFNAiifAS</name>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>useArray</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aa815a14d0f8f37331312c9db29bf31d9" kindref="member">TENShPtr</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprId" kindref="compound">TableExprId</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprFuncNodeArray.cc" line="86" column="10" bodyfile="tables/TaQL/ExprFuncNodeArray.cc" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4fbe40455065e1f02ad8b4502fdd4592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::TEFNAiif</definition>
        <argsstring>(const vector&lt; TENShPtr &gt; &amp;operands, const TableExprId &amp;id)</argsstring>
        <name>TEFNAiif</name>
        <param>
          <type>const vector&lt; <ref refid="namespacecasacore_1aa815a14d0f8f37331312c9db29bf31d9" kindref="member">TENShPtr</ref> &gt; &amp;</type>
          <declname>operands</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprId" kindref="compound">TableExprId</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprFuncNodeArray.cc" line="102" column="10" bodyfile="tables/TaQL/ExprFuncNodeArray.cc" bodystart="102" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a82c644f8047f02030606061c7d63e062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::TEFMASKneg</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;arr)</argsstring>
        <name>TEFMASKneg</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprFuncNodeArray.cc" line="213" column="10" bodyfile="tables/TaQL/ExprFuncNodeArray.cc" bodystart="213" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af7fc63dfa48fab1eb14289e62505405c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::TEFMASKrepl</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;arr, const TENShPtr &amp;operand2, const TableExprId &amp;id, Bool maskValue)</argsstring>
        <name>TEFMASKrepl</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecasacore_1aa815a14d0f8f37331312c9db29bf31d9" kindref="member">TENShPtr</ref> &amp;</type>
          <declname>operand2</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprId" kindref="compound">TableExprId</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>maskValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprFuncNodeArray.cc" line="224" column="10" bodyfile="tables/TaQL/ExprFuncNodeArray.cc" bodystart="224" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af42c2be4a01b1006a6afb7b73b40c1d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGClearMasked</definition>
        <argsstring>(MArray&lt; T &gt; &amp;arr)</argsstring>
        <name>TEGClearMasked</name>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="44" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="44" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a80db8297dbade6a70f331eb19ef5df4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGMin</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;src, MArray&lt; T &gt; &amp;dst)</argsstring>
        <name>TEGMin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="56" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="56" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adaefb366be046cfcc01386f6105e023d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGMax</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;src, MArray&lt; T &gt; &amp;dst)</argsstring>
        <name>TEGMax</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="78" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="78" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad23ccadbc2049e7158eb94bd7e694544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGSum</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;src, MArray&lt; T &gt; &amp;dst)</argsstring>
        <name>TEGSum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="100" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="100" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5dd2fb8fc0bff25549295f5f345c5adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGProduct</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;src, MArray&lt; T &gt; &amp;dst)</argsstring>
        <name>TEGProduct</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="119" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="119" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a820188d24ba7d8777513c545e614e641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGSumSqr</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;src, MArray&lt; T &gt; &amp;dst)</argsstring>
        <name>TEGSumSqr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="138" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="138" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d5d6a74a4b176ab0261430df5480e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGMeanAdd</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;src, Array&lt; T &gt; &amp;dst, Array&lt; Int64 &gt; &amp;nr)</argsstring>
        <name>TEGMeanAdd</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref> &gt; &amp;</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="161" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="161" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af5b74a4f910ecc235eb79e0935bd74f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::TEGMeanFinish</definition>
        <argsstring>(MArray&lt; T &gt; &amp;val, const Array&lt; Int64 &gt; &amp;nr)</argsstring>
        <name>TEGMeanFinish</name>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref> &gt; &amp;</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprGroupAggrFuncArray.cc" line="185" column="8" bodyfile="tables/TaQL/ExprGroupAggrFuncArray.cc" bodystart="185" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a030b53c64dd0d0cd59a0e373a6b7ca6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator&amp;&amp;</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.cc" line="257" column="15" bodyfile="tables/TaQL/ExprNode.cc" bodystart="257" bodyend="263" declfile="tables/TaQL/ExprNode.h" declline="755" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac4e7eb47a8e7be3e979b138c13ddd5fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator||</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.cc" line="265" column="15" bodyfile="tables/TaQL/ExprNode.cc" bodystart="265" bodyend="271" declfile="tables/TaQL/ExprNode.h" declline="757" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a58826481be665d399612cc39468c74d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::diagonal</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNode &amp;firstAxis)</argsstring>
        <name>diagonal</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>firstAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.cc" line="1234" column="15" bodyfile="tables/TaQL/ExprNode.cc" bodystart="1234" bodyend="1241" declfile="tables/TaQL/ExprNode.h" declline="1120" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a125dbd9ab7d5f09df19cbb4139de29bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::diagonal</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNode &amp;firstAxis, const TableExprNode &amp;diag)</argsstring>
        <name>diagonal</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>firstAxis</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.cc" line="1242" column="15" bodyfile="tables/TaQL/ExprNode.cc" bodystart="1242" bodyend="1251" declfile="tables/TaQL/ExprNode.h" declline="1122" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a99379c892f35be2e487e06b4dd0040ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator+</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1160" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1160" bodyend="1164" declfile="tables/TaQL/ExprNode.h" declline="714" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a43958ad73fe9a88fb84f58b184d2ab17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator-</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1165" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1165" bodyend="1169" declfile="tables/TaQL/ExprNode.h" declline="716" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1affcb8f943e5990c16a5b41624e24ba1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator*</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1170" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1170" bodyend="1174" declfile="tables/TaQL/ExprNode.h" declline="718" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a641e2c99fceeef750aaac36666147026" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator/</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1175" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1175" bodyend="1179" declfile="tables/TaQL/ExprNode.h" declline="720" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d54c6ec20f1713e0203e17e8167dba6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator%</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1180" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1180" bodyend="1184" declfile="tables/TaQL/ExprNode.h" declline="722" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a454b08c136e52e4f9d85eba822ecae98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator&amp;</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1185" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1185" bodyend="1189" declfile="tables/TaQL/ExprNode.h" declline="724" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c753104c349bd82a3192e0bb3be05f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator|</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1190" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1190" bodyend="1194" declfile="tables/TaQL/ExprNode.h" declline="726" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ada28032642116cc0ac872bf3f3d17acf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator^</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1195" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1195" bodyend="1199" declfile="tables/TaQL/ExprNode.h" declline="728" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afe5a5078aaa3246dd189aa209afc972a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator==</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1200" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1200" bodyend="1204" declfile="tables/TaQL/ExprNode.h" declline="734" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a196698620d9dc6fd9372329696425eff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator!=</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1205" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1205" bodyend="1209" declfile="tables/TaQL/ExprNode.h" declline="736" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1965080552bcdf662849b82d43264729" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator&gt;=</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1215" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1215" bodyend="1219" declfile="tables/TaQL/ExprNode.h" declline="740" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8abfa4cd9f57cac4af83d447cafdcd0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator&gt;</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1210" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1210" bodyend="1214" declfile="tables/TaQL/ExprNode.h" declline="742" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab5194cf74751d5a0001bbadad97b95c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator&lt;=</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1220" column="8" bodyfile="tables/TaQL/ExprNode.h" bodystart="1220" bodyend="1224" declfile="tables/TaQL/ExprNode.h" declline="744" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a29e3f75205ac93783711f33d26db4761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::operator&lt;</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1225" column="8" bodyfile="tables/TaQL/ExprNode.h" bodystart="1225" bodyend="1229" declfile="tables/TaQL/ExprNode.h" declline="746" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d1c8ba08a9f402f414194fe49458161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::near</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1241" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1241" bodyend="1246" declfile="tables/TaQL/ExprNode.h" declline="770" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1fe6de9bd820f78f84890c1306370b3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::near</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right, const TableExprNode &amp;tolerance)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1247" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1247" bodyend="1253" declfile="tables/TaQL/ExprNode.h" declline="772" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5353fddda00934dba958e0b8f712c226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::nearAbs</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1254" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1254" bodyend="1259" declfile="tables/TaQL/ExprNode.h" declline="775" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a55df0927e97f15ab546b709e495a5dc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::nearAbs</definition>
        <argsstring>(const TableExprNode &amp;left, const TableExprNode &amp;right, const TableExprNode &amp;tolerance)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1260" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1260" bodyend="1266" declfile="tables/TaQL/ExprNode.h" declline="777" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2630b715a60b89bfbca78ed91834ea7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::angdist</definition>
        <argsstring>(const TableExprNode &amp;pos1, const TableExprNode &amp;pos2)</argsstring>
        <name>angdist</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>pos1</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>pos2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1267" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1267" bodyend="1272" declfile="tables/TaQL/ExprNode.h" declline="788" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7576028e316fff679ed5de10c7017e5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::angdistx</definition>
        <argsstring>(const TableExprNode &amp;pos1, const TableExprNode &amp;pos2)</argsstring>
        <name>angdistx</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>pos1</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>pos2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1273" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1273" bodyend="1278" declfile="tables/TaQL/ExprNode.h" declline="793" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a277fcc3d779b6b27e28f8ad002bcf8fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cones</definition>
        <argsstring>(const TableExprNode &amp;sourcePos, const TableExprNode &amp;cones)</argsstring>
        <name>cones</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1279" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1279" bodyend="1284" declfile="tables/TaQL/ExprNode.h" declline="806" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6efe46f5e5536b136a612e398b7e91e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::anyCone</definition>
        <argsstring>(const TableExprNode &amp;sourcePos, const TableExprNode &amp;cones)</argsstring>
        <name>anyCone</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1285" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1285" bodyend="1290" declfile="tables/TaQL/ExprNode.h" declline="810" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a946fc3323218ee7870dd5cfe5cddad5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::findCone</definition>
        <argsstring>(const TableExprNode &amp;sourcePos, const TableExprNode &amp;cones)</argsstring>
        <name>findCone</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>cones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1291" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1291" bodyend="1296" declfile="tables/TaQL/ExprNode.h" declline="816" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a69e95201e7f262278b5c9bab2b47abd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cones</definition>
        <argsstring>(const TableExprNode &amp;sourcePos, const TableExprNode &amp;conePos, const TableExprNode &amp;radii)</argsstring>
        <name>cones</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>conePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>radii</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1297" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1297" bodyend="1303" declfile="tables/TaQL/ExprNode.h" declline="825" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5372096c77f326b2e611f2b0ad75bb93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::anyCone</definition>
        <argsstring>(const TableExprNode &amp;sourcePos, const TableExprNode &amp;conePos, const TableExprNode &amp;radii)</argsstring>
        <name>anyCone</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>conePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>radii</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1304" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1304" bodyend="1310" declfile="tables/TaQL/ExprNode.h" declline="828" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6241f2fa0f8c2aa5ab18d7b765326dda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::findCone</definition>
        <argsstring>(const TableExprNode &amp;sourcePos, const TableExprNode &amp;conePos, const TableExprNode &amp;radii)</argsstring>
        <name>findCone</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>conePos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>radii</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1311" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1311" bodyend="1317" declfile="tables/TaQL/ExprNode.h" declline="831" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af5e7fa8698e2ca0be8f725388737ec9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sin</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1342" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1342" bodyend="1345" declfile="tables/TaQL/ExprNode.h" declline="839" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6398482658f241eadc644035e465a543" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sinh</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1346" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1346" bodyend="1349" declfile="tables/TaQL/ExprNode.h" declline="840" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad0508f86ecd08ebb6e11b34d21fd264b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cos</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1318" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1318" bodyend="1321" declfile="tables/TaQL/ExprNode.h" declline="841" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8bdcc66bddfe5a2dc3f1d6a87bdb0566" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cosh</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1322" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1322" bodyend="1325" declfile="tables/TaQL/ExprNode.h" declline="842" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a94a1402654ab807df68056b95173f05f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::exp</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1326" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1326" bodyend="1329" declfile="tables/TaQL/ExprNode.h" declline="843" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa4e285dbcb6ab6b6fd80e7a8fd3781e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::log</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1330" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1330" bodyend="1333" declfile="tables/TaQL/ExprNode.h" declline="844" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad31f3e5a967f4a26a68d3ece2dc33306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::log10</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1334" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1334" bodyend="1337" declfile="tables/TaQL/ExprNode.h" declline="845" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a290418bd8ded4005318cade5b28379a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::pow</definition>
        <argsstring>(const TableExprNode &amp;x, const TableExprNode &amp;exp)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1338" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1338" bodyend="1341" declfile="tables/TaQL/ExprNode.h" declline="846" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a81061defb229f93e7422132122ea28c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::square</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1350" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1350" bodyend="1354" declfile="tables/TaQL/ExprNode.h" declline="847" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa10fb9d446a5cfc13cc5fdc05648c3e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cube</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1355" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1355" bodyend="1359" declfile="tables/TaQL/ExprNode.h" declline="848" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa0c1a7d4a16fffa8b97a62737c9d9688" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sqrt</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1360" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1360" bodyend="1363" declfile="tables/TaQL/ExprNode.h" declline="849" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9fe417821dd97276cd32049d56a68942" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::norm</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1364" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1364" bodyend="1367" declfile="tables/TaQL/ExprNode.h" declline="850" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a838aa66565dc16c76cd379283b414a48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::asin</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1372" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1372" bodyend="1375" declfile="tables/TaQL/ExprNode.h" declline="857" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac6ce49aed71c77ba667e1840132c75dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::acos</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1368" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1368" bodyend="1371" declfile="tables/TaQL/ExprNode.h" declline="858" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2a69190f436fdff253e21e08ee7cc4a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::atan</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1376" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1376" bodyend="1379" declfile="tables/TaQL/ExprNode.h" declline="859" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a90b95003cc80e2b24cb21ccf6256ae39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::atan2</definition>
        <argsstring>(const TableExprNode &amp;y, const TableExprNode &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1380" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1380" bodyend="1383" declfile="tables/TaQL/ExprNode.h" declline="860" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51db2e01f98103540035eda8d4d67edb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::tan</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1408" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1408" bodyend="1411" declfile="tables/TaQL/ExprNode.h" declline="862" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60fb2b3bd412d0070086dbb517cbc99c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::tanh</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1412" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1412" bodyend="1415" declfile="tables/TaQL/ExprNode.h" declline="863" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a10da2ee60007f3af2e2b4eb75a0ddec2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sign</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1384" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1384" bodyend="1387" declfile="tables/TaQL/ExprNode.h" declline="864" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a77a1238b14877511ffd519138c3cd533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::round</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1388" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1388" bodyend="1391" declfile="tables/TaQL/ExprNode.h" declline="865" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a86228ff45b513c9d08ada0bc5e7591c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ceil</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1392" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1392" bodyend="1395" declfile="tables/TaQL/ExprNode.h" declline="866" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af11682fb892ac9a626e0530bcea7a848" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::abs</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1396" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1396" bodyend="1399" declfile="tables/TaQL/ExprNode.h" declline="867" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac6a4c53ff1259cd4e83a2687dbdc6aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::floor</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1400" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1400" bodyend="1403" declfile="tables/TaQL/ExprNode.h" declline="868" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaae519183f669f485456a1d4b9dae05c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::fmod</definition>
        <argsstring>(const TableExprNode &amp;x, const TableExprNode &amp;y)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1404" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1404" bodyend="1407" declfile="tables/TaQL/ExprNode.h" declline="869" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af375b21cdba3f30e0300bce4f688292b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::strlength</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>strlength</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1467" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1467" bodyend="1471" declfile="tables/TaQL/ExprNode.h" declline="875" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a31d647cd1570ed5ba1c394e956d748f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::upcase</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>upcase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1472" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1472" bodyend="1476" declfile="tables/TaQL/ExprNode.h" declline="876" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7bcc9fba9410f594fc9cf8c23510db11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::downcase</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>downcase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1477" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1477" bodyend="1481" declfile="tables/TaQL/ExprNode.h" declline="877" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7baa464019ec620af15fb7dc4704018e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::capitalize</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>capitalize</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1482" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1482" bodyend="1486" declfile="tables/TaQL/ExprNode.h" declline="878" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9be3adf26f72d5a639cb9959deeb907" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::trim</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>trim</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1588" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1588" bodyend="1591" declfile="tables/TaQL/ExprNode.h" declline="879" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a78334857e9e099690a40bef5a9f6e1b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ltrim</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>ltrim</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1592" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1592" bodyend="1595" declfile="tables/TaQL/ExprNode.h" declline="880" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8d59288f7b627c9b382783dfb3df4362" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::rtrim</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>rtrim</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1596" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1596" bodyend="1599" declfile="tables/TaQL/ExprNode.h" declline="881" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1e61d03b922cfe22394b2cbd711216e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::substr</definition>
        <argsstring>(const TableExprNode &amp;str, const TableExprNode &amp;pos)</argsstring>
        <name>substr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1600" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1600" bodyend="1605" declfile="tables/TaQL/ExprNode.h" declline="882" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a67dc921ede390888d55186ed931c00c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::substr</definition>
        <argsstring>(const TableExprNode &amp;str, const TableExprNode &amp;pos, const TableExprNode &amp;npos)</argsstring>
        <name>substr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>npos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1606" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1606" bodyend="1612" declfile="tables/TaQL/ExprNode.h" declline="884" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a785aa8b0e3186a9be719433b8a8e7d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::replace</definition>
        <argsstring>(const TableExprNode &amp;str, const TableExprNode &amp;patt)</argsstring>
        <name>replace</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>patt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1613" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1613" bodyend="1618" declfile="tables/TaQL/ExprNode.h" declline="887" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0d82e73295f1913680b9e37307d4f5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::replace</definition>
        <argsstring>(const TableExprNode &amp;str, const TableExprNode &amp;patt, const TableExprNode &amp;repl)</argsstring>
        <name>replace</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>patt</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>repl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1619" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1619" bodyend="1625" declfile="tables/TaQL/ExprNode.h" declline="889" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aba01d0ffd02a1540e17f26d8ae7e908b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::regex</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>regex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1487" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1487" bodyend="1490" declfile="tables/TaQL/ExprNode.h" declline="899" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0d2a955b56ada3d73024058ac50b350f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::pattern</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>pattern</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1491" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1491" bodyend="1495" declfile="tables/TaQL/ExprNode.h" declline="900" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa935cebb208a46bafb8450e9948235b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sqlpattern</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>sqlpattern</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1496" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1496" bodyend="1500" declfile="tables/TaQL/ExprNode.h" declline="901" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2f5745e4b62f97720ecb9bef9ec59113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::datetime</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>datetime</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1501" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1501" bodyend="1505" declfile="tables/TaQL/ExprNode.h" declline="908" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4166c04deda0b108b8addc66dff1c1ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::mjdtodate</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>mjdtodate</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1506" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1506" bodyend="1510" declfile="tables/TaQL/ExprNode.h" declline="909" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa3865b508680592eaa605a694aa0e140" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::mjd</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>mjd</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1511" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1511" bodyend="1514" declfile="tables/TaQL/ExprNode.h" declline="910" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8ba52ce5c5f5520dc78c4c6a169d4d0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::date</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>date</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1515" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1515" bodyend="1518" declfile="tables/TaQL/ExprNode.h" declline="911" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8507e45215715fb2aa7cf6bdb1464d2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::year</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>year</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1519" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1519" bodyend="1522" declfile="tables/TaQL/ExprNode.h" declline="912" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7b9b48e7df1c10cfea12ea417bef6fa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::month</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>month</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1523" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1523" bodyend="1526" declfile="tables/TaQL/ExprNode.h" declline="913" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6e2030dac1c9272a856814cfe4a42f49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::day</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>day</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1527" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1527" bodyend="1530" declfile="tables/TaQL/ExprNode.h" declline="914" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a431e8cd807cabb753cb2edadd67d9285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cmonth</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>cmonth</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1531" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1531" bodyend="1535" declfile="tables/TaQL/ExprNode.h" declline="915" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5cd1b93bed6d1463f1b866be9c590caa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::weekday</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>weekday</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1536" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1536" bodyend="1540" declfile="tables/TaQL/ExprNode.h" declline="916" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4a24500dacdb6812d06c37e688bb9035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cdow</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>cdow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1541" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1541" bodyend="1544" declfile="tables/TaQL/ExprNode.h" declline="917" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd0b366d6594225551dc4b3d81d4b450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ctodt</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>ctodt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1545" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1545" bodyend="1548" declfile="tables/TaQL/ExprNode.h" declline="918" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a983cc5270dcaa1bd8b528cbea2a7172b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::cdate</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>cdate</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1549" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1549" bodyend="1552" declfile="tables/TaQL/ExprNode.h" declline="919" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4df2768d0356f2145861efdf2f6143c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ctime</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>ctime</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1553" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1553" bodyend="1556" declfile="tables/TaQL/ExprNode.h" declline="920" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0768565c40c5ff3732c839dac8d766c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::week</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>week</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1580" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1580" bodyend="1583" declfile="tables/TaQL/ExprNode.h" declline="921" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46ef7060e7e3008633c2867c9b9b6c99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::time</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>time</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1584" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1584" bodyend="1587" declfile="tables/TaQL/ExprNode.h" declline="922" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af7a6decf71dee977d8fd2e595702be2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::hms</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>hms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1557" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1557" bodyend="1560" declfile="tables/TaQL/ExprNode.h" declline="928" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7200d02d16ddffe27a6a9bce4563e1dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::dms</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>dms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1561" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1561" bodyend="1564" declfile="tables/TaQL/ExprNode.h" declline="929" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af0763693d292cbdf679c7dbbc5aedb6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::hdms</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>hdms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1565" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1565" bodyend="1568" declfile="tables/TaQL/ExprNode.h" declline="930" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a33068afcd52b46c6e75a8ddeaf320e34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::toString</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>toString</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1569" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1569" bodyend="1573" declfile="tables/TaQL/ExprNode.h" declline="936" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a55cec57c48e2548d2f0316f2c0f10abf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::toString</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNode &amp;format)</argsstring>
        <name>toString</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1574" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1574" bodyend="1579" declfile="tables/TaQL/ExprNode.h" declline="937" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac363acaa41fea37316a4e9a37312dece" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::isNaN</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>isNaN</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1626" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1626" bodyend="1629" declfile="tables/TaQL/ExprNode.h" declline="943" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a39d4279b5383b5a577d248dab6e29471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::isFinite</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1634" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1634" bodyend="1638" declfile="tables/TaQL/ExprNode.h" declline="947" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a27b3e0f471884a290a563647e6bcdd68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::min</definition>
        <argsstring>(const TableExprNode &amp;a, const TableExprNode &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1416" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1416" bodyend="1419" declfile="tables/TaQL/ExprNode.h" declline="954" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2478781a250067d1e3bca66c24d715be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::max</definition>
        <argsstring>(const TableExprNode &amp;a, const TableExprNode &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1420" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1420" bodyend="1423" declfile="tables/TaQL/ExprNode.h" declline="955" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a023d936cd3a800f4400c90d10d714650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::conj</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1440" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1440" bodyend="1443" declfile="tables/TaQL/ExprNode.h" declline="960" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a489ca19843f65c90ae4769ada663c07b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::real</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1424" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1424" bodyend="1427" declfile="tables/TaQL/ExprNode.h" declline="964" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0521278d3689334d0cbb081dc52d771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::imag</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1428" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1428" bodyend="1431" declfile="tables/TaQL/ExprNode.h" declline="968" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaf8875c5845d8fee6983509e9e2f5f35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::integer</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>integer</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1432" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1432" bodyend="1435" declfile="tables/TaQL/ExprNode.h" declline="971" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d21f202b715bfb8d64795eb5736f8ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boolean</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>boolean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1436" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1436" bodyend="1439" declfile="tables/TaQL/ExprNode.h" declline="974" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a64ba63ccd5dbd91633e89594147aac30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::amplitude</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>amplitude</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1444" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1444" bodyend="1447" declfile="tables/TaQL/ExprNode.h" declline="979" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a676200d2a5633a40f15d72617d4111c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::phase</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>phase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1452" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1452" bodyend="1455" declfile="tables/TaQL/ExprNode.h" declline="984" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a84d492611f18871b821d8165fd47b33c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::arg</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>arg</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1448" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1448" bodyend="1451" declfile="tables/TaQL/ExprNode.h" declline="988" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc48c20edcc25bb66e275981c2e78ddf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::formComplex</definition>
        <argsstring>(const TableExprNode &amp;real, const TableExprNode &amp;imag)</argsstring>
        <name>formComplex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>imag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1456" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1456" bodyend="1461" declfile="tables/TaQL/ExprNode.h" declline="992" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0e637f631ae1137a036e72e80512276a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::formComplex</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>formComplex</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1462" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1462" bodyend="1466" declfile="tables/TaQL/ExprNode.h" declline="996" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60f80b87bd1dc2ddb17e4c5f28343fe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sum</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1649" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1649" bodyend="1653" declfile="tables/TaQL/ExprNode.h" declline="1001" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a44e7127537aaee08fd4b3a047e46d1dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::product</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1654" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1654" bodyend="1658" declfile="tables/TaQL/ExprNode.h" declline="1002" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a584a758e44e768dadbdfdd382718018f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sumSquare</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>sumSquare</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1659" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1659" bodyend="1663" declfile="tables/TaQL/ExprNode.h" declline="1003" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68f0f9952ef75029fefc487aabe1f413" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::min</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1639" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1639" bodyend="1643" declfile="tables/TaQL/ExprNode.h" declline="1009" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa4d208ac3a7d004712cef665741fdfc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::max</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1644" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1644" bodyend="1648" declfile="tables/TaQL/ExprNode.h" declline="1010" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa22043cc9c6a1f20854291f676df68cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::mean</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1664" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1664" bodyend="1668" declfile="tables/TaQL/ExprNode.h" declline="1011" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa95d743fb5b698deb045f7a3215c89a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::variance</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1669" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1669" bodyend="1673" declfile="tables/TaQL/ExprNode.h" declline="1012" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa03145cd2a3a9c3a49352cf9998b7c64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::stddev</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1674" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1674" bodyend="1678" declfile="tables/TaQL/ExprNode.h" declline="1013" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc8c6f4c5b7d2f317c0a6dbc0b715fbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::avdev</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1679" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1679" bodyend="1683" declfile="tables/TaQL/ExprNode.h" declline="1014" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afec024863ef2b74a601bad1091b3177a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::rms</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>rms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1684" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1684" bodyend="1688" declfile="tables/TaQL/ExprNode.h" declline="1015" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af26dd60fb4bb91e6ebb002e135c68a2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::median</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1689" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1689" bodyend="1693" declfile="tables/TaQL/ExprNode.h" declline="1016" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae3d32a8cba5bce4b0a224226d75a5dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::fractile</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNode &amp;fraction)</argsstring>
        <name>fractile</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1694" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1694" bodyend="1699" declfile="tables/TaQL/ExprNode.h" declline="1017" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a818171d299e1f0091e47d04131f07842" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::any</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1700" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1700" bodyend="1703" declfile="tables/TaQL/ExprNode.h" declline="1022" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a965d541181135946d3e15b74c3d06cb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::all</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>all</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1704" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1704" bodyend="1707" declfile="tables/TaQL/ExprNode.h" declline="1023" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a32ba2a421b5b3f95c27263243e2266f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ntrue</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>ntrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1708" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1708" bodyend="1711" declfile="tables/TaQL/ExprNode.h" declline="1024" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6743e06cff79b382fb687b748f21c91d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::nfalse</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>nfalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1712" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1712" bodyend="1715" declfile="tables/TaQL/ExprNode.h" declline="1025" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0d33bf56b692f8f824b4dfb8e27cbc86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sums</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>sums</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1716" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1716" bodyend="1721" declfile="tables/TaQL/ExprNode.h" declline="1033" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaf524bb01ca0fbaf0e0f41f87d3189e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::products</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>products</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1722" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1722" bodyend="1727" declfile="tables/TaQL/ExprNode.h" declline="1035" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a14673c5b02115d5d75ad2bdb2bc30c63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::sumSquares</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>sumSquares</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1728" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1728" bodyend="1733" declfile="tables/TaQL/ExprNode.h" declline="1037" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad4b24f9eb9753a3d43e6a99ab4cb134b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::mins</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>mins</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1734" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1734" bodyend="1739" declfile="tables/TaQL/ExprNode.h" declline="1039" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0dcf37a85b68df15dddd53a992275d31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::maxs</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>maxs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1740" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1740" bodyend="1745" declfile="tables/TaQL/ExprNode.h" declline="1041" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a29f3de51f6dc2cd5cf0f7f70c5f50662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::means</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>means</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1746" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1746" bodyend="1751" declfile="tables/TaQL/ExprNode.h" declline="1043" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc952721ffff76b018b41e0857d91f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::variances</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>variances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1752" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1752" bodyend="1757" declfile="tables/TaQL/ExprNode.h" declline="1045" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9fa3850c9626e594db2a106cbba54a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::stddevs</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>stddevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1758" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1758" bodyend="1763" declfile="tables/TaQL/ExprNode.h" declline="1047" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab08bf508cee6e6256245e5e65286b94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::avdevs</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>avdevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1764" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1764" bodyend="1769" declfile="tables/TaQL/ExprNode.h" declline="1049" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a045cee8795f5e2c181a20def551096c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::rmss</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>rmss</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1770" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1770" bodyend="1775" declfile="tables/TaQL/ExprNode.h" declline="1051" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0f27fca9ecf9879c1940792963933e5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::medians</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>medians</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1776" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1776" bodyend="1781" declfile="tables/TaQL/ExprNode.h" declline="1053" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9c8f1a230ca0468334924f2ac14b2bc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::fractiles</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNode &amp;fraction, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>fractiles</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1782" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1782" bodyend="1788" declfile="tables/TaQL/ExprNode.h" declline="1055" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a69bf85d30ecb1bea5caba5326277868f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::anys</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>anys</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1789" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1789" bodyend="1794" declfile="tables/TaQL/ExprNode.h" declline="1058" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac23abfc8867ada291b4f23f2e0b20720" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::alls</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>alls</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1795" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1795" bodyend="1800" declfile="tables/TaQL/ExprNode.h" declline="1060" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd98c7d52dfc66a0b536f726eae3f4e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ntrues</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>ntrues</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1801" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1801" bodyend="1806" declfile="tables/TaQL/ExprNode.h" declline="1062" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a70ab6f7ad4e364e71877dac3d745f8c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::nfalses</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;collapseAxes)</argsstring>
        <name>nfalses</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1807" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1807" bodyend="1812" declfile="tables/TaQL/ExprNode.h" declline="1064" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a15e1ce51058a87210f5b2ede691abb23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningMin</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningMin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1813" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1813" bodyend="1818" declfile="tables/TaQL/ExprNode.h" declline="1071" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaebaa29838080deefed9bdf858a2791c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningMax</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningMax</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1819" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1819" bodyend="1824" declfile="tables/TaQL/ExprNode.h" declline="1073" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c36892095359344b454af333f04d19c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningMean</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningMean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1825" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1825" bodyend="1830" declfile="tables/TaQL/ExprNode.h" declline="1075" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad95172d0e84f2e33e0800042665c1b77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningVariance</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningVariance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1831" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1831" bodyend="1836" declfile="tables/TaQL/ExprNode.h" declline="1077" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a80e27e5b358de3bcad4c9a8bdee59861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningStddev</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningStddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1837" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1837" bodyend="1842" declfile="tables/TaQL/ExprNode.h" declline="1079" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afbd1cc94954dddfb8fea5f5c0354211a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningAvdev</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningAvdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1843" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1843" bodyend="1848" declfile="tables/TaQL/ExprNode.h" declline="1081" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeb533eed2976f60f37a529c5639bf344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningRms</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningRms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1849" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1849" bodyend="1854" declfile="tables/TaQL/ExprNode.h" declline="1083" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af398f162397bdc2e2a0e8d76b6e7885c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningMedian</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningMedian</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1855" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1855" bodyend="1860" declfile="tables/TaQL/ExprNode.h" declline="1085" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a02b0bc30cd82d3758de06fa028ad19e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningAny</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningAny</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1861" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1861" bodyend="1866" declfile="tables/TaQL/ExprNode.h" declline="1087" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8e8d81bc4ec7425424a8c5e26de59804" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::runningAll</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>runningAll</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1867" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1867" bodyend="1872" declfile="tables/TaQL/ExprNode.h" declline="1089" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::array</definition>
        <argsstring>(const TableExprNode &amp;values, const TableExprNodeSet &amp;shape)</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1933" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1933" bodyend="1938" declfile="tables/TaQL/ExprNode.h" declline="1095" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac570e761f6a12e7166c7bbd30f465ff3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::marray</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNode &amp;mask)</argsstring>
        <name>marray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1939" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1939" bodyend="1944" declfile="tables/TaQL/ExprNode.h" declline="1099" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afc3e4f85f5aad10783643bdc52981f4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::arrayData</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>arrayData</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1945" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1945" bodyend="1949" declfile="tables/TaQL/ExprNode.h" declline="1103" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a93eb676ab6f3f3e62043ca08cfda69e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::arrayFlatten</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>arrayFlatten</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1955" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1955" bodyend="1959" declfile="tables/TaQL/ExprNode.h" declline="1106" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afc642a3c77222f9fa76dab1834aa1e95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::arrayMask</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>arrayMask</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1950" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1950" bodyend="1954" declfile="tables/TaQL/ExprNode.h" declline="1110" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9698bd6f402b9c1e47a5906080b8965" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::diagonal</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>diagonal</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1973" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1973" bodyend="1978" declfile="tables/TaQL/ExprNode.h" declline="1119" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4b4f3717ca957967982a98f18287a657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::transpose</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1960" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1960" bodyend="1966" declfile="tables/TaQL/ExprNode.h" declline="1127" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3471fa19a717637c78e1cd9d79ab0a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::transpose</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNode &amp;axes)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>axes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1129" column="19" declfile="tables/TaQL/ExprNode.h" declline="1129" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6af15fb5d4e404dc92c4aeff40a671cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::isdefined</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>isdefined</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1979" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1979" bodyend="1982" declfile="tables/TaQL/ExprNode.h" declline="1135" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::nelements</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>nelements</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1983" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1983" bodyend="1986" declfile="tables/TaQL/ExprNode.h" declline="1140" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::ndim</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>ndim</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1987" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1987" bodyend="1990" declfile="tables/TaQL/ExprNode.h" declline="1141" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::shape</definition>
        <argsstring>(const TableExprNode &amp;array)</argsstring>
        <name>shape</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1991" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1991" bodyend="1994" declfile="tables/TaQL/ExprNode.h" declline="1146" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6f97ff1cfa7c57aaa17ac430b7b9603d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::iif</definition>
        <argsstring>(const TableExprNode &amp;condition, const TableExprNode &amp;arg1, const TableExprNode &amp;arg2)</argsstring>
        <name>iif</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1995" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1995" bodyend="2001" declfile="tables/TaQL/ExprNode.h" declline="1153" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5dadef8ddb41ab930845e4fe86881020" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::isInf</definition>
        <argsstring>(const TableExprNode &amp;node)</argsstring>
        <name>isInf</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1630" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1630" bodyend="1633"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac525212e630cd4f5e1aface82322a2e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedMin</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedMin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1873" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1873" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aca7d8e114cb9a1822cac717637f9bc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedMax</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedMax</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1879" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1879" bodyend="1884"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab67c774b0fd8be22bfb1e3b5c65eae59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedMean</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedMean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1885" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1885" bodyend="1890"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2339f6f44321d8c9556e0459dab6d6ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedVariance</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedVariance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1891" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1891" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6791c0a1bfa85212f44cd280f70f5c42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedStddev</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedStddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1897" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1897" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ab3e5f72c7ae909c36196853be6c70f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedAvdev</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedAvdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1903" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1903" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5ca29582065b545ac51d358316b29ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedRms</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedRms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1909" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1909" bodyend="1914"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9853190e33b0ac741b86fcfe10cce6fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedMedian</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedMedian</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1915" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1915" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a128604e6249baf1f4e20832e5da93aff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedAny</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedAny</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1921" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1921" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1396bd1577d345f2569466cd10a8557c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::boxedAll</definition>
        <argsstring>(const TableExprNode &amp;node, const TableExprNodeSet &amp;halfBoxWidth)</argsstring>
        <name>boxedAll</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>halfBoxWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1927" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1927" bodyend="1932"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab4d3d5a6cc6416afb890174c46fb708c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::transpose</definition>
        <argsstring>(const TableExprNode &amp;array, const TableExprNodeSet &amp;axes)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TableExprNodeSet" kindref="compound">TableExprNodeSet</ref> &amp;</type>
          <declname>axes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/ExprNode.h" line="1967" column="22" bodyfile="tables/TaQL/ExprNode.h" bodystart="1967" bodyend="1972"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a726d90672a1b5467d510e306baafd172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator==</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="122" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb426786ef771608de3285ef1f8bfef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&lt;=</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="122" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5b6f3895a911e11eef6b4d0b5c8132e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&lt;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="122" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0a1ba8679e68800412599e371ac085a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&gt;=</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="140" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6222d2b1b5cf927919b6d42639c1fc60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&gt;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="146" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acc9f11b95d36944252f9fc9dcb7aac11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator!=</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="152" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0f0c388a28011088936d716e3fa29f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator||</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="158" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab9b247c25b20afd1407cf3538914a56a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&amp;&amp;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="164" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab101c58664ace5c7d0f82faf9cf9c98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator==</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="170" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="170" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a35026b22db525c0616adae52f8ccfcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&lt;=</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="170" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="174" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad94c9efa0f4e6c3c1d2ab5bfe01704b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&lt;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="170" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="178" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af9a27945c361a367352dfd0ba745a661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&gt;=</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="182" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="182" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a18c1381cd4a524b063ac1180a58e0c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&gt;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="186" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="186" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f086253704cd44c07fcca7192ed68b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator!=</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="190" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="190" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aee894acfc1d29a9de6db5abcf567a5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator||</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="194" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="194" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad903033c90e79b4b73e76868594233a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&amp;&amp;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="198" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="198" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6c80636a31bd3c69a00880c082ef66d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator==</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="202" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="202" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a577eb5ddf9ef37e7154e0c102e92b4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&lt;=</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="202" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="206" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a75d6e3acec2e3e8971b06ed04734d098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&lt;</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="202" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="210" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a17c7bb6abdba1e8accc70f2088371f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&gt;=</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="214" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="214" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a950954fd159338adf07ad4c36fbfe8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&gt;</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="218" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="218" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1b518f7e2f3f12c8ff537dfef16e7ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator!=</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="222" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="222" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9156e89dee67331ef758fafa551c20dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator||</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator||</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="228" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="228" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac0e639180faea37c92a5ee6a21f46390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator&amp;&amp;</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="233" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="233" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a38649d00df628da13bba3ab8fe25d55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::operator!</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="238" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="238" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8ea0bfd5f44efbd00bdbc3bca95be4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::near</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="245" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68131a213ddb3ea1045297b9b7c5e884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::nearAbs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="252" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adb298ade2f1041adba2a02994d4907a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::near</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="259" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad18a5109f5386c7fc39ab36a2480f425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::nearAbs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="264" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaf026efa934f6ba74a9e9d57ab76d046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::near</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right, Double tol)</argsstring>
        <name>near</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="269" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abec85cafb90ee3c2d2e01679c5e0d4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::nearAbs</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right, Double tol)</argsstring>
        <name>nearAbs</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="274" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae00a4d39a69c7a90f65bc7cf145746f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::isNaN</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;arr)</argsstring>
        <name>isNaN</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="282" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="282" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acced3d0620b906f652eba5041f475194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::isInf</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;arr)</argsstring>
        <name>isInf</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="287" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="287" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5b2c8dab25958c3fadf48b8a9fc208d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::isFinite</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;arr)</argsstring>
        <name>isFinite</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="292" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="292" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa658937aaaa4eb68757884d6511d9281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allEQ</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="300" column="8" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="300" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5217e512d814ce01a0d2f568ca62b1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allEQ</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;array, const T &amp;value)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="321" column="8" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5a64a4ad622f01ce664511d9d55fc17c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allEQ</definition>
        <argsstring>(const T &amp;value, const MArray&lt; T &gt; &amp;array)</argsstring>
        <name>allEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="329" column="15" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="329" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaad8e82b5888199feb235bfaf652c3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyEQ</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="337" column="8" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="337" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5c633c5cad773fa5cee77669b0c1e096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyEQ</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;array, const T &amp;value)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="358" column="8" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acd373072dd7be865f7c828faefef1540" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyEQ</definition>
        <argsstring>(const T &amp;value, const MArray&lt; T &gt; &amp;array)</argsstring>
        <name>anyEQ</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="366" column="15" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="366" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae960a7fdedd6a54dd93244af94ac9a3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::allTrue</definition>
        <argsstring>(const MArray&lt; Bool &gt; &amp;array)</argsstring>
        <name>allTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="371" column="15" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="371" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46a8e13a917bcc7ce86c99cc558ddaaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
        <definition>Bool casacore::anyTrue</definition>
        <argsstring>(const MArray&lt; Bool &gt; &amp;array)</argsstring>
        <name>anyTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="375" column="15" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="375" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9a9216c182798de7a7103188716f0b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t casacore::ntrue</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>ntrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="380" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="380" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab4f66a41d0af33bd3aa8656b9f897c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t casacore::nfalse</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>nfalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="394" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="394" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad0962b993c88bc5f751041931f9f8094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; size_t &gt;</type>
        <definition>MArray&lt;size_t&gt; casacore::partialNTrue</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialNTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="409" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="409" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a18cdaaeaaaa5e5a0b5b66954a337695c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; size_t &gt;</type>
        <definition>MArray&lt;size_t&gt; casacore::partialNFalse</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialNFalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="423" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="423" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad16c10b465aa0d4d94daace2ae7a205d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::partialAlls</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialAlls</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="437" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="437" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adc64d9871ccf618ef4561cfe667dcaa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::partialAnys</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialAnys</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="453" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="453" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af6750e31afe7ca995579cb4be7e25854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref> &gt;</type>
        <definition>MArray&lt;uInt&gt; casacore::slidingNTrue</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingNTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="470" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="470" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abf2657f135b366fc89300583808c7e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref> &gt;</type>
        <definition>MArray&lt;uInt&gt; casacore::slidingNFalse</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingNFalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="487" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="487" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acbd1cb2b720ad52e02eb3def09ba4e9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::slidingAlls</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingAlls</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="504" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="504" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad2f26c120da774fce4b946f8d7129894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::slidingAnys</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingAnys</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="520" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="520" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a19fe0f3e94c792517bbaa5be95b9186a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref> &gt;</type>
        <definition>MArray&lt;uInt&gt; casacore::boxedNTrue</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedNTrue</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="537" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="537" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7ae7de4b51edf97970be7d2167e50357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref> &gt;</type>
        <definition>MArray&lt;uInt&gt; casacore::boxedNFalse</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedNFalse</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="553" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="553" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab35614e4910702dd62cfb70da8e6fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::boxedAlls</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedAlls</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="569" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="569" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ade5d0f695073a00515e7e0e350914fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref> &gt;</type>
        <definition>MArray&lt;Bool&gt; casacore::boxedAnys</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedAnys</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayLogical.h" line="585" column="10" bodyfile="tables/TaQL/MArrayLogical.h" bodystart="585" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68244b46dc36fc99580ebaf126b69ecb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialArrayMath</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, const MArrayFunctorBase&lt; T &gt; &amp;funcObj)</argsstring>
        <name>partialArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArrayFunctorBase" kindref="compound">MArrayFunctorBase</ref>&lt; T &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="186" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad33abbcda327444545c6c66fd562681c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::partialArrayMath</definition>
        <argsstring>(MArray&lt; RES &gt; &amp;res, const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, const MArrayFunctorBase&lt; T, RES &gt; &amp;funcObj)</argsstring>
        <name>partialArrayMath</name>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; RES &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArrayFunctorBase" kindref="compound">MArrayFunctorBase</ref>&lt; T, RES &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> shape(<ref refid="namespacecasacore_1a72e8481a74e808b5facfb20a2352d075" kindref="member">a.array()</ref>.<ref refid="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" kindref="member">shape()</ref>.removeAxes (collapseAxes));</para>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="195" column="8" bodyfile="tables/TaQL/MArrayMath.h" bodystart="195" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1a7c83a88558f94b150d5fa7cbeb15c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedArrayMath</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxShape, const MArrayFunctorBase&lt; T &gt; &amp;funcObj)</argsstring>
        <name>boxedArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArrayFunctorBase" kindref="compound">MArrayFunctorBase</ref>&lt; T &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="249" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="249" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafb51ffceff851f288e3b0c7402eef1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::boxedArrayMath</definition>
        <argsstring>(MArray&lt; RES &gt; &amp;res, const MArray&lt; T &gt; &amp;array, const IPosition &amp;boxShape, const MArrayFunctorBase&lt; T, RES &gt; &amp;funcObj)</argsstring>
        <name>boxedArrayMath</name>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; RES &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArrayFunctorBase" kindref="compound">MArrayFunctorBase</ref>&lt; T, RES &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="258" column="8" bodyfile="tables/TaQL/MArrayMath.h" bodystart="258" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac103415f46fcea98d03b0bb302b7c68e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingArrayMath</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;array, const IPosition &amp;halfBoxShape, const MArrayFunctorBase&lt; T &gt; &amp;funcObj, Bool fillEdge=True)</argsstring>
        <name>slidingArrayMath</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArrayFunctorBase" kindref="compound">MArrayFunctorBase</ref>&lt; T &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="305" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="305" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a332b1fdc8ad2605073ffcb2d3baa403c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename RES</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void casacore::slidingArrayMath</definition>
        <argsstring>(MArray&lt; RES &gt; &amp;res, const MArray&lt; T &gt; &amp;array, const IPosition &amp;halfBoxShape, const MArrayFunctorBase&lt; T, RES &gt; &amp;funcObj, Bool fillEdge=True)</argsstring>
        <name>slidingArrayMath</name>
        <param>
          <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; RES &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxShape</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArrayFunctorBase" kindref="compound">MArrayFunctorBase</ref>&lt; T, RES &gt; &amp;</type>
          <declname>funcObj</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="315" column="8" bodyfile="tables/TaQL/MArrayMath.h" bodystart="315" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2ad4dbf6dbfab9685941d05aa9538cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="381" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a877575b5b7d552ec9eda3af7e6121242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="387" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a20075450e3b231cc532b33e7d679edec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="393" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae77e2b18dd319f394b275a3772c18442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="399" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4e825dd8cfb02f3d8cabcb7b5c294c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator%</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="405" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab643d0229f05d682e6ca945d0ed8226d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator&amp;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="411" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a55fcb18969dc645733fa16fc90270226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator|</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="417" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5a57db570b618ce1fb82e1340c5f14ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator^</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="423" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a20ff0f8c4a6d224b672ac9f6b16022f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="429" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="429" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68260f6334f30b7113b68792efc3df8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="433" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="433" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aed011d6d627214d9b60ea35e64554099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="437" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="437" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8b49b7de3adb5ab1f9087c58097a8cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="441" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="441" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aad8a3c2344275c16107e38f42ca610d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator%</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="445" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="445" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a09dd9ae93e38c634c05ea959881ddbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator&amp;</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="449" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="449" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a79756f83e6a2c67c14de45c9decf04a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator|</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="453" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="453" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adf523554cddc3efdc62f09af04f73421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator^</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="457" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="457" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aedc3edcc6f9f55b9983f379e09039713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator+</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="461" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="461" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae2341f89c45d517ed19593e2f1ca1c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="465" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="465" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a005d5215a0bd1abff0ae414936b5670f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator*</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="469" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="469" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6ed6ebc48af3ccb55a55db691df8c02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator/</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="473" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="473" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4384a3fbc477d4a0d117a2bda290f72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator%</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator%</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="477" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="477" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae62efe2ee2bb55a265d4daeb530f1a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator&amp;</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="481" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="481" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a929694f314533d3d13d479bc01dec1ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator|</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="485" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="485" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a419e599070bb75f387850e4a1ca0059a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator^</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>operator^</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="489" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="489" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7ecf0483e28b1b0045551b88e4d9853a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator-</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="495" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="495" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aea836cf4ecc50ac471c1f784cae2ca03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::operator~</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>operator~</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="500" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="500" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0d510e35a3ffd099ee68a92de4d4fc5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::sin</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="506" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="506" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a21262a185fa4d3e43bb3548992309c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::cos</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="510" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="510" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2bb5de7516f48d22cdfc451f4c1424d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::tan</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="514" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="514" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab8a903f4b0d5cca5425121cbee7515da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::sinh</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="518" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="518" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aaea65636098e18e2d8e4990bb532eb10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::cosh</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="522" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="522" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7eee4693765c10929522a3eeb2d6821a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::tanh</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="526" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="526" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae9cae904bcda64aaeb2f3ffbcf3441e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::asin</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="530" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="530" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6fc59c4c0207cb0643b216bddcee5211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::acos</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="534" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="534" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3fc39eda2624b758036e929db3dbc505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::atan</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="538" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="538" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa3b42500ddef7f3512b4f63342b3b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="542" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc65365bd4d9e88993938a61f3e74443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="548" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="548" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6bdb28b5be1d9e7a15ddcdb32055bd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::atan2</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>atan2</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="552" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="552" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a03a884b6ec6f9b745f2cdf4a96cbe2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::exp</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="556" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="556" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a99d75cbd51e0cff329deb3860eda08dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::log</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="560" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="560" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2e78d2c24d5dd450536f36e23357b1bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::log10</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="564" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="564" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0b3aff57ac563e337803464f1d3c6fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::sqrt</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="568" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="568" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae308c1c2b8d78bfb2d71417f0706dc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::square</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>square</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="572" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="572" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae50970156988d5457f9a02a4e6d97035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::cube</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>cube</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="576" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="576" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a20e2ba622443128876499b4f7703f353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const MArray&lt; T &gt; &amp;exp)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="580" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a383fc364e56b375f2f057e090ee87505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const T &amp;a, const MArray&lt; T &gt; &amp;exp)</argsstring>
        <name>pow</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="586" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="586" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46395e2a43d0009755f098dbf42da6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::pow</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const T &amp;exp)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="590" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="590" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac59f35fddd3b5af8f67c4ccf7b026b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; std::complex&lt; T &gt; &gt;</type>
        <definition>MArray&lt;std::complex&lt;T&gt; &gt; casacore::pow</definition>
        <argsstring>(const MArray&lt; std::complex&lt; T &gt;&gt; &amp;a, const T &amp;exp)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; std::complex&lt; T &gt;&gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="594" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="594" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2721e17fa88075500ff9136f1da70e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="598" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="598" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aee8428bec32e3181ddd63129ae23b3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="604" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="604" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a36dcc62a35636bb70c12a2b7cb216a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::min</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="608" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="608" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3cb03c75d409329b140b68b848949a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="612" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="612" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8a27e1faa9ff4b59b9377300707768b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="618" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="618" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa30aa9a345c1f5fbe59ccdcf6596a7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::max</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="622" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="622" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a86e72a220be68d44fa3902ca92005ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::ceil</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="626" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="626" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab88f1d5eab2e67d3fb08ccb6e9143201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::floor</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="630" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="630" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a7fe339f76b1a591b44c45b3928d50e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::round</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="634" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="634" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9d25da12289a73550626fe1944f2c4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::sign</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="638" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="638" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5e6c0717bd6148db21725b53c88e0aad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::abs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="642" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="642" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad60c7a2e3f2f8a06baabeaa087ecf3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::fabs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>fabs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="646" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="646" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a60a30ec00901871976682b9ca362ee39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="650" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="650" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3ab70079528635aa712417ee5c0b6093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="656" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="656" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abc4c953cea5d9fa1765096007b022736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::fmod</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>fmod</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="660" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="660" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1affab7fece6a6990c65a5b7c56d69975b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::floormod</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>floormod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="664" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="664" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a53fc039551a8f9ac9df25e78246de805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::floormod</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;left, const T &amp;right)</argsstring>
        <name>floormod</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="670" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="670" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ace079515470aebe2ba97492ca5fe6d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::floormod</definition>
        <argsstring>(const T &amp;left, const MArray&lt; T &gt; &amp;right)</argsstring>
        <name>floormod</name>
        <param>
          <type>const T &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="674" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="674" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3c750acbfc915cc26eb98e9098c4b4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::conj</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;arr)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="678" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="678" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afb9b66013160d28efc66630c260ad23d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>MArray&lt;Float&gt; casacore::real</definition>
        <argsstring>(const MArray&lt; Complex &gt; &amp;arr)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="681" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="681" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a674e5d2e2fd80eea0402c7fc91cd5f8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>MArray&lt;Float&gt; casacore::imag</definition>
        <argsstring>(const MArray&lt; Complex &gt; &amp;arr)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="684" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="684" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adeff4b2ff47dbd7ec7de16406b012d4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>MArray&lt;Float&gt; casacore::amplitude</definition>
        <argsstring>(const MArray&lt; Complex &gt; &amp;arr)</argsstring>
        <name>amplitude</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="687" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="687" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a84b1e9986621c45640fa17b8de9e393f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref> &gt;</type>
        <definition>MArray&lt;Float&gt; casacore::phase</definition>
        <argsstring>(const MArray&lt; Complex &gt; &amp;arr)</argsstring>
        <name>phase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ab81d263ab360e9922913a80bae6d7695" kindref="member">Complex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="690" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="690" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad9baa969508458cd6b4d6298202f5eb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>MArray&lt;Double&gt; casacore::real</definition>
        <argsstring>(const MArray&lt; DComplex &gt; &amp;arr)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="693" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="693" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c5df667a805294026a68d4cb420c0c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>MArray&lt;Double&gt; casacore::imag</definition>
        <argsstring>(const MArray&lt; DComplex &gt; &amp;arr)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="696" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="696" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a356383b26c405a3eab61366c9fd7282c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>MArray&lt;Double&gt; casacore::amplitude</definition>
        <argsstring>(const MArray&lt; DComplex &gt; &amp;arr)</argsstring>
        <name>amplitude</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="699" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="699" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5708d89c47f18afb8209d48c70f2033d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref> &gt;</type>
        <definition>MArray&lt;Double&gt; casacore::phase</definition>
        <argsstring>(const MArray&lt; DComplex &gt; &amp;arr)</argsstring>
        <name>phase</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; <ref refid="namespacecasacore_1a2a9616f801f0f94ac5c480453377e268" kindref="member">DComplex</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="702" column="17" bodyfile="tables/TaQL/MArrayMath.h" bodystart="702" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4a10ee578d8f611b23e8ccf30a5a45b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sum</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="711" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="711" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0cf188234436f94a90229dc0a8eb0fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::sumsqr</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>sumsqr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="724" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="724" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab687a46de349d76fc16ab3465346a1c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::product</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>product</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="737" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="737" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a38e556ea2e8405e2e95d1d943f8dffa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::min</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="750" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="750" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4ea6add50c6b4c583a893b410555abc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::max</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="763" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="763" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a16a021f970fa8fca56cd1d9b69b00b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::mean</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="776" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="776" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ade0f501bd89bc12c276628f2bba453ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::variance</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, T mean, uInt ddof)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="785" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="785" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adae9ac7791ad331a83d1a8c9b63179e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::variance</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, uInt ddof)</argsstring>
        <name>variance</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="799" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa636852db5e5113dce3176c7dbc87f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::stddev</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, uInt ddof)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="805" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="805" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0a108c0b753d70199b3f69526589ca46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::stddev</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, T mean, uInt ddof)</argsstring>
        <name>stddev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="811" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="811" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a39f7521c449503547de1b8b76ea4b533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::avdev</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, T mean)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="817" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="817" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afe8f1c757916ab4479c453997c25441d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::avdev</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>avdev</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="831" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="831" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adbee3b3de1ff9116f56ea46b9b2567a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::rms</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>rms</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="837" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="837" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0ad2a36c38b33448d01968d5e617047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, Bool sorted, Bool takeEvenMean, Bool inPlace=False)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>sorted</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>takeEvenMean</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="851" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="851" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab57859f3ede4d3553e9dfd11730fb4cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="865" column="12" bodyfile="tables/TaQL/MArrayMath.h" bodystart="865" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a59c061ebb23d63714bd83bc1effb6aee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::median</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, Bool sorted)</argsstring>
        <name>median</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>sorted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="868" column="12" bodyfile="tables/TaQL/MArrayMath.h" bodystart="868" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ab0ca3b52b860b7739216769ce8dce2f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::medianInPlace</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, Bool sorted=False)</argsstring>
        <name>medianInPlace</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>sorted</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="871" column="12" bodyfile="tables/TaQL/MArrayMath.h" bodystart="871" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa22f30ff3363eb77a12bf3f33d558bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::fractile</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, Float fraction, Bool sorted=False, Bool inPlace=False)</argsstring>
        <name>fractile</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>fraction</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>sorted</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="880" column="5" bodyfile="tables/TaQL/MArrayMath.h" bodystart="880" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeef191ca933bdd2831d4c2af54fab57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialSums</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialSums</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="897" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="897" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a703b33a4cf0eb57685158737a3fbccf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialSumSqrs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialSumSqrs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="908" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="908" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af8c4e5b90d7f5508613c4f81fa4f090c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialProducts</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialProducts</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="920" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="920" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3827190945e8aae60845f427852a1ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialMins</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialMins</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="931" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="931" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2377141b3580654d508f686572773a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialMaxs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialMaxs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="942" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="942" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0e03757e20f144965470accd084dab13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialMeans</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialMeans</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="953" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="953" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a89102f51c8972504256397b27ebc426d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialVariances</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, uInt ddof)</argsstring>
        <name>partialVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="964" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="964" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aafa00d889314f9139a4e5d6eda32c0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialStddevs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, uInt ddof)</argsstring>
        <name>partialStddevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="976" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="976" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a65b17429eb03a582b1e870c15b18ba1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialAvdevs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialAvdevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="988" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="988" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa6a3215bd480f2550adc50683a262b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialRmss</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes)</argsstring>
        <name>partialRmss</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="999" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="999" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3b88fda31012d64407e439c061c377cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialMedians</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, Bool takeEvenMean=False, Bool inPlace=False)</argsstring>
        <name>partialMedians</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>takeEvenMean</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1010" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1010" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a0112030e80e9155ebe5881d1b1501249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::partialFractiles</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;collapseAxes, Float fraction, Bool inPlace=False)</argsstring>
        <name>partialFractiles</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>collapseAxes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>fraction</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1025" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1025" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9f9d99463f562e21921e3cb2059b3ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingSums</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingSums</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1044" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1044" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a41df6859ed1c0ba2069bf7582c878d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingSumSqrs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingSumSqrs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1056" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1056" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af4d8740f54962ffd751da3047d339eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingProducts</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingProducts</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1068" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1068" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acf092468970258ae4fcc2a46aba2b2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingMins</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingMins</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1080" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1080" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a37b40d9eb83d6d7d258ae25fafdd174b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingMaxs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingMaxs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1092" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1092" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae6cfef2d3568b8cda8893932eaaaa73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingMeans</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingMeans</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1104" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1104" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a150cfca82402aa704292c67e7167e96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingVariances</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, uInt ddof, Bool fillEdge=True)</argsstring>
        <name>slidingVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1116" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1116" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac5b6228da64f2cf9b16ca29f8ddeb480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingStddevs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, uInt ddof, Bool fillEdge=True)</argsstring>
        <name>slidingStddevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1130" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1130" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae2d6dc2eeb089fd7240361398615f416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingAvdevs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingAvdevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1144" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1144" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a40c5cae214a73fae5e3141069e85d687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingRmss</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool fillEdge=True)</argsstring>
        <name>slidingRmss</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1156" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1156" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a13af5cf4da7e8cb954078c92150e215c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingMedians</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Bool takeEvenMean=False, Bool inPlace=False, Bool fillEdge=True)</argsstring>
        <name>slidingMedians</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>takeEvenMean</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1168" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1168" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6194cfa1fbcef4993c76b32e74f8ab06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::slidingFractiles</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;halfBoxSize, Float fraction, Bool inPlace=False, Bool fillEdge=True)</argsstring>
        <name>slidingFractiles</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>halfBoxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>fraction</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>fillEdge</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1187" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1187" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ae14399344491aa096536a77747dad2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedSums</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedSums</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1210" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1210" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a6befaf67d2f33880d30d70ac1aeb6a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedSumSqrs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedSumSqrs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1221" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1221" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aeae003c3aef30ae53d3bbfdaf90618ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedProducts</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedProducts</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1232" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1232" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a64327ea3fd48c6e9221a4c257f3ecd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedMins</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedMins</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1243" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1243" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a337fe9fe2d6b33abd930fa294c2a1c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedMaxs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedMaxs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1254" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1254" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acea510f123f74b0783a84e2ca7a44049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedMeans</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedMeans</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1265" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1265" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a9e62c5ebc5a94bbca45b6e1244050fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedVariances</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize, uInt ddof)</argsstring>
        <name>boxedVariances</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1276" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1276" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4707c5c61637b57748ed2f95b3d8b588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedStddevs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize, uInt ddof)</argsstring>
        <name>boxedStddevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a5c559d8d8bf2ae7f67b439955d6be88a" kindref="member">uInt</ref></type>
          <declname>ddof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1288" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1288" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a549a54d10fed8b34664caaa59e7ff64f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedAvdevs</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedAvdevs</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1300" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1300" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a288d297e089f9419f835f21bece3a59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedRmss</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize)</argsstring>
        <name>boxedRmss</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1311" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1311" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a51dbe35265511b75aa6b9e45d82d50d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedMedians</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize, Bool takeEvenMean=False, Bool inPlace=False)</argsstring>
        <name>boxedMedians</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>takeEvenMean</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1322" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1322" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a52249d0cce0d00b373171df0be1001aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::boxedFractiles</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;a, const IPosition &amp;boxSize, Float fraction, Bool inPlace=False)</argsstring>
        <name>boxedFractiles</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>boxSize</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref></type>
          <declname>fraction</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>inPlace</declname>
          <defval><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMath.h" line="1338" column="10" bodyfile="tables/TaQL/MArrayMath.h" bodystart="1338" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1afa7b3f01fa6c31ad6892b828eb295e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ARRAYITER</type>
          </param>
          <param>
            <type>typename MASKITER</type>
          </param>
          <param>
            <type>typename OPER</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::accumulateMasked</definition>
        <argsstring>(ARRAYITER abegin, ARRAYITER aend, MASKITER mbegin, OPER oper)</argsstring>
        <name>accumulateMasked</name>
        <param>
          <type>ARRAYITER</type>
          <declname>abegin</declname>
        </param>
        <param>
          <type>ARRAYITER</type>
          <declname>aend</declname>
        </param>
        <param>
          <type>MASKITER</type>
          <declname>mbegin</declname>
        </param>
        <param>
          <type>OPER</type>
          <declname>oper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="71" column="5" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af289bc00fc054760631aff2c9a2a22b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ARRAYITER</type>
          </param>
          <param>
            <type>typename MASKITER</type>
          </param>
          <param>
            <type>typename OPER</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T casacore::accumulateMasked</definition>
        <argsstring>(ARRAYITER abegin, ARRAYITER aend, MASKITER mbegin, T accum, OPER oper)</argsstring>
        <name>accumulateMasked</name>
        <param>
          <type>ARRAYITER</type>
          <declname>abegin</declname>
        </param>
        <param>
          <type>ARRAYITER</type>
          <declname>aend</declname>
        </param>
        <param>
          <type>MASKITER</type>
          <declname>mbegin</declname>
        </param>
        <param>
          <type>T</type>
          <declname>accum</declname>
        </param>
        <param>
          <type>OPER</type>
          <declname>oper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="87" column="5" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a271e534002e7844e5aaa499df6c1b22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ARRAYITER</type>
          </param>
          <param>
            <type>typename MASKITER</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t casacore::countMasked</definition>
        <argsstring>(ARRAYITER abegin, ARRAYITER aend, MASKITER mbegin, const T &amp;value)</argsstring>
        <name>countMasked</name>
        <param>
          <type>ARRAYITER</type>
          <declname>abegin</declname>
        </param>
        <param>
          <type>ARRAYITER</type>
          <declname>aend</declname>
        </param>
        <param>
          <type>MASKITER</type>
          <declname>mbegin</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="100" column="12" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a22e6dc43ac45d47f19a2401edfa00493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ARRAYITER</type>
          </param>
          <param>
            <type>typename MASKITER</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t casacore::countNEMasked</definition>
        <argsstring>(ARRAYITER abegin, ARRAYITER aend, MASKITER mbegin, const T &amp;value)</argsstring>
        <name>countNEMasked</name>
        <param>
          <type>ARRAYITER</type>
          <declname>abegin</declname>
        </param>
        <param>
          <type>ARRAYITER</type>
          <declname>aend</declname>
        </param>
        <param>
          <type>MASKITER</type>
          <declname>mbegin</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="113" column="12" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="113" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1f32760b55cbce80185f1d8a5d38a9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAllMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, MaskIterator mask1, MaskIterator mask2, CompareOperator op)</argsstring>
        <name>compareAllMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask2</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="130" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="130" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a2aa6e67ccb16117b46004fbef6c21edc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAllMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, MaskIterator mask1, CompareOperator op)</argsstring>
        <name>compareAllMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="144" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="144" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a83a5d0c0e553d2486337be6925cdba61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAllLeftMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T left, MaskIterator mask1, CompareOperator op)</argsstring>
        <name>compareAllLeftMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="161" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="161" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aedb5c1dbbbbe6bc419ad03192992edc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAllRightMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T right, MaskIterator mask1, CompareOperator op)</argsstring>
        <name>compareAllRightMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="177" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="177" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a801fc0b8a001b3e614898b9a7f7f9d69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAnyMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, MaskIterator mask1, MaskIterator mask2, CompareOperator op)</argsstring>
        <name>compareAnyMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask2</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="197" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="197" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a106afb2b882416dce63130611e0b8260" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename InputIterator2</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAnyMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, MaskIterator mask1, CompareOperator op)</argsstring>
        <name>compareAnyMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>InputIterator2</type>
          <declname>first2</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="211" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abb5fd04df150fed990dc73bb8579989c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAnyLeftMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T left, MaskIterator mask1, CompareOperator op)</argsstring>
        <name>compareAnyLeftMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>left</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="228" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="228" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a30711841d4410aabc7f603dd4f4372d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator1</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename MaskIterator</type>
          </param>
          <param>
            <type>typename CompareOperator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool casacore::compareAnyRightMasked</definition>
        <argsstring>(InputIterator1 first1, InputIterator1 last1, T right, MaskIterator mask1, CompareOperator op)</argsstring>
        <name>compareAnyRightMasked</name>
        <param>
          <type>InputIterator1</type>
          <declname>first1</declname>
        </param>
        <param>
          <type>InputIterator1</type>
          <declname>last1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>right</declname>
        </param>
        <param>
          <type>MaskIterator</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>CompareOperator</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayMathBase.h" line="244" column="15" bodyfile="tables/TaQL/MArrayMathBase.h" bodystart="244" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a21236766e0010e882abf931907a62efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::reorderArray</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;array, const IPosition &amp;newAxisOrder, Bool alwaysCopy=True)</argsstring>
        <name>reorderArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>newAxisOrder</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>alwaysCopy</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayUtil.h" line="74" column="8" bodyfile="tables/TaQL/MArrayUtil.h" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5b47f94183a5e7db6303646048589675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt;</type>
        <definition>MArray&lt;T&gt; casacore::reverseArray</definition>
        <argsstring>(const MArray&lt; T &gt; &amp;array, const IPosition &amp;reversedAxes, Bool alwaysCopy=True)</argsstring>
        <name>reverseArray</name>
        <param>
          <type>const <ref refid="classcasacore_1_1MArray" kindref="compound">MArray</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1IPosition" kindref="compound">IPosition</ref> &amp;</type>
          <declname>reversedAxes</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref></type>
          <declname>alwaysCopy</declname>
          <defval><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/MArrayUtil.h" line="116" column="8" bodyfile="tables/TaQL/MArrayUtil.h" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aca6ceccc9f618541800c94326117f844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::makeRecordExpr</definition>
        <argsstring>(const RecordDesc &amp;desc, Int fieldNumber)</argsstring>
        <name>makeRecordExpr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RecordDesc" kindref="compound">RecordDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>fieldNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordExpr.cc" line="39" column="15" bodyfile="tables/TaQL/RecordExpr.cc" bodystart="39" bodyend="52" declfile="tables/TaQL/RecordExpr.h" declline="63" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a8262e1b39032fdcd4b8e6dc4d9363ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::makeRecordExpr</definition>
        <argsstring>(const RecordDesc &amp;desc, const String &amp;fieldName)</argsstring>
        <name>makeRecordExpr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RecordDesc" kindref="compound">RecordDesc</ref> &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordExpr.cc" line="55" column="15" bodyfile="tables/TaQL/RecordExpr.cc" bodystart="55" bodyend="64" declfile="tables/TaQL/RecordExpr.h" declline="65" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c88efe961e8bab7c7c28865d0dae2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::makeRecordExpr</definition>
        <argsstring>(const RecordInterface &amp;record, const String &amp;fieldName)</argsstring>
        <name>makeRecordExpr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RecordInterface" kindref="compound">RecordInterface</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordExpr.cc" line="67" column="15" bodyfile="tables/TaQL/RecordExpr.cc" bodystart="67" bodyend="104" declfile="tables/TaQL/RecordExpr.h" declline="81" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa46d801fcc5d3beea417e6cb7638c13f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TableExprNode" kindref="compound">TableExprNode</ref></type>
        <definition>TableExprNode casacore::makeRecordExpr</definition>
        <argsstring>(const RecordInterface &amp;record, Int fieldNumber)</argsstring>
        <name>makeRecordExpr</name>
        <param>
          <type>const <ref refid="classcasacore_1_1RecordInterface" kindref="compound">RecordInterface</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <param>
          <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref></type>
          <declname>fieldNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordExpr.h" line="70" column="22" bodyfile="tables/TaQL/RecordExpr.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a74e056dd6fc117b94fbe9c8b1806a207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::recordGramParseCommand</definition>
        <argsstring>(const String &amp;command)</argsstring>
        <name>recordGramParseCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.cc" line="128" column="5" bodyfile="tables/TaQL/RecordGram.cc" bodystart="128" bodyend="135" declfile="tables/TaQL/RecordGram.h" declline="80" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1abd69d758f8e467503ccfabe8c9da9728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &amp;</type>
        <definition>Int &amp; casacore::recordGramPosition</definition>
        <argsstring>()</argsstring>
        <name>recordGramPosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.cc" line="138" column="5" bodyfile="tables/TaQL/RecordGram.cc" bodystart="138" bodyend="141" declfile="tables/TaQL/RecordGram.h" declline="88" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad6e2c6ba7183c9a32b0fcfd75f501ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::recordGramInput</definition>
        <argsstring>(char *buf, int max_size)</argsstring>
        <name>recordGramInput</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.cc" line="144" column="5" bodyfile="tables/TaQL/RecordGram.cc" bodystart="144" bodyend="154" declfile="tables/TaQL/RecordGram.h" declline="91" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a3ac98bebcfd6783c4761a404aa70523b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::RecordGramerror</definition>
        <argsstring>(const char *)</argsstring>
        <name>RecordGramerror</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.cc" line="156" column="6" bodyfile="tables/TaQL/RecordGram.cc" bodystart="156" bodyend="160" declfile="tables/TaQL/RecordGram.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1adfbd6d61223206d298d5251426d60285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::recordGramRemoveEscapes</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>recordGramRemoveEscapes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.h" line="94" column="15" bodyfile="tables/TaQL/RecordGram.h" bodystart="94" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a46e0c1ce8da1707095bed6a0c79a7f28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::recordGramRemoveQuotes</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>recordGramRemoveQuotes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/RecordGram.h" line="98" column="15" bodyfile="tables/TaQL/RecordGram.h" bodystart="98" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a5d9f23a8bfa2e370eb7237bb1e90d6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::tableGramParseCommand</definition>
        <argsstring>(const String &amp;command)</argsstring>
        <name>tableGramParseCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="99" column="5" bodyfile="tables/TaQL/TableGram.cc" bodystart="99" bodyend="121" declfile="tables/TaQL/TableGram.h" declline="72" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a79f5e675b5aa809768e80e6493102a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1abb6e2c1bac472ca1ebadadf96cc8426f" kindref="member">Int</ref> &amp;</type>
        <definition>Int &amp; casacore::tableGramPosition</definition>
        <argsstring>()</argsstring>
        <name>tableGramPosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="124" column="5" bodyfile="tables/TaQL/TableGram.cc" bodystart="124" bodyend="127" declfile="tables/TaQL/TableGram.h" declline="80" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a962e8244d6c7ee655d56f7b23b06f7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int casacore::tableGramInput</definition>
        <argsstring>(char *buf, int max_size)</argsstring>
        <name>tableGramInput</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="130" column="5" bodyfile="tables/TaQL/TableGram.cc" bodystart="130" bodyend="140" declfile="tables/TaQL/TableGram.h" declline="83" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ac9a2dfabd9e644b203839226e0b2c981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::TableGramerror</definition>
        <argsstring>(const char *)</argsstring>
        <name>TableGramerror</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="142" column="6" bodyfile="tables/TaQL/TableGram.cc" bodystart="142" bodyend="145" declfile="tables/TaQL/TableGram.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a68e75c3036136fd14bcecb331ff26963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::tableGramRemoveEscapes</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>tableGramRemoveEscapes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="147" column="8" bodyfile="tables/TaQL/TableGram.cc" bodystart="147" bodyend="158" declfile="tables/TaQL/TableGram.h" declline="86" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a02bee307761a6a936f19f2525dbf8898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::tableGramRemoveEscapesQuotes</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>tableGramRemoveEscapesQuotes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="160" column="8" bodyfile="tables/TaQL/TableGram.cc" bodystart="160" bodyend="182" declfile="tables/TaQL/TableGram.h" declline="89" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aca6244729e172bba021d687a1e8cf117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::tableGramRemoveQuotes</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>tableGramRemoveQuotes</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="184" column="8" bodyfile="tables/TaQL/TableGram.cc" bodystart="184" bodyend="202" declfile="tables/TaQL/TableGram.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a985e2dfa9da644bdc071bc36ff783e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref></type>
        <definition>Double casacore::tableGramParseTime</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>tableGramParseTime</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="204" column="8" bodyfile="tables/TaQL/TableGram.cc" bodystart="204" bodyend="216" declfile="tables/TaQL/TableGram.h" declline="99" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1c1291e4a40896da11129640f6ebeee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1MVTime" kindref="compound">MVTime</ref></type>
        <definition>MVTime casacore::tableGramParseDateTime</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>tableGramParseDateTime</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableGram.cc" line="218" column="8" bodyfile="tables/TaQL/TableGram.cc" bodystart="218" bodyend="226" declfile="tables/TaQL/TableGram.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aa257df64894da00e2502d0de7901b680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="39" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="39" bodyend="43" declfile="tables/TaQL/TableParse.h" declline="52" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1aab5c830308974468cd20527d55022af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str, const Table &amp;tempTable)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> &amp;</type>
          <declname>tempTable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="44" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="44" bodyend="49" declfile="tables/TaQL/TableParse.h" declline="54" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1acaaa9aa0771ca03c78a07f0ee9704544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str, const std::vector&lt; const Table * &gt; &amp;tempTables)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> * &gt; &amp;</type>
          <declname>tempTables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="50" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="50" bodyend="55" declfile="tables/TaQL/TableParse.h" declline="56" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4805eebbb41d6a83894d06a6cbe6d209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str, Vector&lt; String &gt; &amp;cols)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="56" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="56" bodyend="60" declfile="tables/TaQL/TableParse.h" declline="58" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1af1db46706082ce004adb848dcc180719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str, Vector&lt; String &gt; &amp;cols, String &amp;commandType)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>cols</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commandType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="62" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="62" bodyend="68" declfile="tables/TaQL/TableParse.h" declline="60" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad1cefe785ca5d53e8906171686b6147a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str, const std::vector&lt; const Table * &gt; &amp;tempTables, Vector&lt; String &gt; &amp;cols)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> * &gt; &amp;</type>
          <declname>tempTables</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="70" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="70" bodyend="76" declfile="tables/TaQL/TableParse.h" declline="63" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1ad56c58e8e54b83ffa60c829d21c7aa4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1TaQLResult" kindref="compound">TaQLResult</ref></type>
        <definition>TaQLResult casacore::tableCommand</definition>
        <argsstring>(const String &amp;str, const std::vector&lt; const Table * &gt; &amp;tempTables, Vector&lt; String &gt; &amp;cols, String &amp;commandType)</argsstring>
        <name>tableCommand</name>
        <param>
          <type>const <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classcasacore_1_1Table" kindref="compound">Table</ref> * &gt; &amp;</type>
          <declname>tempTables</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classcasacore_1_1String" kindref="compound">String</ref> &gt; &amp;</type>
          <declname>cols</declname>
        </param>
        <param>
          <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>commandType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TableParse.cc" line="79" column="12" bodyfile="tables/TaQL/TableParse.cc" bodystart="79" bodyend="108" declfile="tables/TaQL/TableParse.h" declline="66" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a4754bedc7c75935fbcfedbe774f5dcf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void casacore::showWithTables</definition>
        <argsstring>(ostream &amp;os, const TaQLMultiNode &amp;with)</argsstring>
        <name>showWithTables</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcasacore_1_1TaQLMultiNode" kindref="compound">TaQLMultiNode</ref> &amp;</type>
          <declname>with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLNodeDer.cc" line="39" column="6" bodyfile="tables/TaQL/TaQLNodeDer.cc" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacecasacore_1a1dcb56e81f87b6646b2146234eaf220e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcasacore_1_1String" kindref="compound">String</ref></type>
        <definition>String casacore::concHelp</definition>
        <argsstring>(const char *str[], size_t n)</argsstring>
        <name>concHelp</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/TaQL/TaQLShow.cc" line="42" column="10" bodyfile="tables/TaQL/TaQLShow.cc" bodystart="42" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>#include &lt;<ref refid="BlockIO_8h" kindref="compound">casacore/casa/Containers/BlockIO.h</ref>&gt; </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="casa/aips.cc" line="28" column="1"/>
  </compounddef>
</doxygen>
