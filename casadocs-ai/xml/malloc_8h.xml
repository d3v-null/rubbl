<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="malloc_8h" kind="file" language="C++">
    <compoundname>malloc.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includedby refid="Memory_8cc" local="no">casa/OS/Memory.cc</includedby>
    <includedby refid="Unit_8cc" local="no">casa/Quanta/Unit.cc</includedby>
    <incdepgraph>
      <node id="1">
        <label>casa/OS/malloc.h</label>
        <link refid="malloc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>casa/OS/malloc.h</label>
        <link refid="malloc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>casa/OS/Memory.cc</label>
        <link refid="Memory_8cc"/>
      </node>
      <node id="3">
        <label>casa/Quanta/Unit.cc</label>
        <link refid="Unit_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmallinfo" prot="public">mallinfo</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="malloc_8h_1a04d74d43f06e684ac211304659402c7a" prot="public" static="no">
        <name>MALLOC_280_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="84" column="9" bodyfile="casa/OS/malloc.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1aeb595638a14befbd356f77f8ec2a5c0d" prot="public" static="no">
        <name>ONLY_MSPACES</name>
        <initializer>0     /* define to a value */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="93" column="9" bodyfile="casa/OS/malloc.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1abdaef093c0ac7f4ffca5df2d2b2f0560" prot="public" static="no">
        <name>NO_MALLINFO</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="96" column="9" bodyfile="casa/OS/malloc.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1aeb507216612dc43759952dd835e7596d" prot="public" static="no">
        <name>dlcalloc</name>
        <initializer>calloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="103" column="9" bodyfile="casa/OS/malloc.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1aa2f5410ccf57ee1ae49df754b44be9e3" prot="public" static="no">
        <name>dlfree</name>
        <initializer>free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="104" column="9" bodyfile="casa/OS/malloc.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a86195c783178093d895874a07a15dce1" prot="public" static="no">
        <name>dlmalloc</name>
        <initializer>malloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="105" column="9" bodyfile="casa/OS/malloc.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a41b3d891bf7fa5e5ca08f7898b4fd9e8" prot="public" static="no">
        <name>dlmemalign</name>
        <initializer>memalign</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="106" column="9" bodyfile="casa/OS/malloc.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a0498e36f6b1a4293efe80b18b48e86b9" prot="public" static="no">
        <name>dlrealloc</name>
        <initializer>realloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="107" column="9" bodyfile="casa/OS/malloc.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1af99ef0a6df3de021fcc2b48da5ced844" prot="public" static="no">
        <name>dlvalloc</name>
        <initializer>valloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="108" column="9" bodyfile="casa/OS/malloc.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a9bfff55fd0c29554b7140954b38a54d4" prot="public" static="no">
        <name>dlpvalloc</name>
        <initializer>pvalloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="109" column="9" bodyfile="casa/OS/malloc.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1abf412c713d3ec5ac7f33663fb22e26ca" prot="public" static="no">
        <name>dlmallinfo</name>
        <initializer><ref refid="structmallinfo" kindref="compound">mallinfo</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="110" column="9" bodyfile="casa/OS/malloc.h" bodystart="110" bodyend="-1" declfile="casa/OS/malloc.h" declline="254" declcolumn="8"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a3dde31382dc8652ffb98335aecd248ab" prot="public" static="no">
        <name>dlmallopt</name>
        <initializer>mallopt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="111" column="9" bodyfile="casa/OS/malloc.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a72a0e1e6edf9ef91c042680574560732" prot="public" static="no">
        <name>dlmalloc_trim</name>
        <initializer>malloc_trim</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="112" column="9" bodyfile="casa/OS/malloc.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a523dae557d3a1c150198a2d91c31d0f5" prot="public" static="no">
        <name>dlmalloc_stats</name>
        <initializer>malloc_stats</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="113" column="9" bodyfile="casa/OS/malloc.h" bodystart="113" bodyend="-1" declfile="casa/OS/malloc.h" declline="448" declcolumn="7"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1abdfd656c28f59dc708ce3dabfade2408" prot="public" static="no">
        <name>dlmalloc_usable_size</name>
        <initializer>malloc_usable_size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="114" column="9" bodyfile="casa/OS/malloc.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1ae98e99f811abc5fcc542d1f0372e86b4" prot="public" static="no">
        <name>dlmalloc_footprint</name>
        <initializer>malloc_footprint</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="115" column="9" bodyfile="casa/OS/malloc.h" bodystart="115" bodyend="-1" declfile="casa/OS/malloc.h" declline="254" declcolumn="8"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a17816165d27e812d18ed032f9ced9ad4" prot="public" static="no">
        <name>dlindependent_calloc</name>
        <initializer>independent_calloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="116" column="9" bodyfile="casa/OS/malloc.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1aa4e5c5d50e0cd7dc44b2defcae6226d7" prot="public" static="no">
        <name>dlindependent_comalloc</name>
        <initializer>independent_comalloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="117" column="9" bodyfile="casa/OS/malloc.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" prot="public" static="no">
        <name>MALLINFO_FIELD_TYPE</name>
        <initializer>size_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="123" column="9" bodyfile="casa/OS/malloc.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a73031e8be1f35c837c74bee1d205a929" prot="public" static="no">
        <name>STRUCT_MALLINFO_DECLARED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="126" column="9" bodyfile="casa/OS/malloc.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1ae5e96ee9e20ef7cfcbbb690877fc9fb2" prot="public" static="no">
        <name>M_TRIM_THRESHOLD</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="240" column="9" bodyfile="casa/OS/malloc.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a1ff5e3f74801d4cbb5e97ab2d3b8f2e3" prot="public" static="no">
        <name>M_GRANULARITY</name>
        <initializer>(-2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="241" column="9" bodyfile="casa/OS/malloc.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8h_1a0dd09b97e3eb71f8256b8bd441828175" prot="public" static="no">
        <name>M_MMAP_THRESHOLD</name>
        <initializer>(-3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="242" column="9" bodyfile="casa/OS/malloc.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="malloc_8h_1ae2f5da475dd284c1bf1e6a64a1581143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dlmalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlmalloc</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="158" column="6" bodyfile="casa/OS/malloc.cc" bodystart="4620" bodyend="4754" declfile="casa/OS/malloc.h" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a1b80f9ee2d497077e4741029c8e23700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dlfree</definition>
        <argsstring>(void *)</argsstring>
        <name>dlfree</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="167" column="7" bodyfile="casa/OS/malloc.cc" bodystart="4756" bodyend="4863" declfile="casa/OS/malloc.h" declline="167" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a2fcace452c6d99a7bd5639f534cf3b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dlcalloc</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>dlcalloc</name>
        <param>
          <type>size_t</type>
          <declname>n_elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elem_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="174" column="6" bodyfile="casa/OS/malloc.cc" bodystart="4865" bodyend="4878" declfile="casa/OS/malloc.h" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a602d2efa311606d8a6fb781db3220ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dlrealloc</definition>
        <argsstring>(void *, size_t)</argsstring>
        <name>dlrealloc</name>
        <param>
          <type>void *</type>
          <declname>oldmem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="199" column="6" bodyfile="casa/OS/malloc.cc" bodystart="4880" bodyend="4901" declfile="casa/OS/malloc.h" declline="199" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a15d20fecdfd12477ae67b571a14ec6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dlmemalign</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>dlmemalign</name>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="213" column="6" bodyfile="casa/OS/malloc.cc" bodystart="4903" bodyend="4905" declfile="casa/OS/malloc.h" declline="213" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1aeb23e7c3cd66b56b8fd5ab48801c2e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dlvalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlvalloc</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="220" column="6" bodyfile="casa/OS/malloc.cc" bodystart="4918" bodyend="4923" declfile="casa/OS/malloc.h" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a5fa93d3a16f6cd853ca26b8796112770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dlmallopt</definition>
        <argsstring>(int, int)</argsstring>
        <name>dlmallopt</name>
        <param>
          <type>int</type>
          <declname>param_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="238" column="5" bodyfile="casa/OS/malloc.cc" bodystart="4960" bodyend="4962" declfile="casa/OS/malloc.h" declline="238" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1ad846767c4337a54652e8dec4e0bed7c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** dlindependent_calloc</definition>
        <argsstring>(size_t, size_t, void **)</argsstring>
        <name>dlindependent_calloc</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="335" column="6" declfile="casa/OS/malloc.h" declline="335" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a8c2ac6dd0af7f018766729dd191a739e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** dlindependent_comalloc</definition>
        <argsstring>(size_t, size_t *, void **)</argsstring>
        <name>dlindependent_comalloc</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>size_t *</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="396" column="6" declfile="casa/OS/malloc.h" declline="396" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a735381ae2806ffad02f0c73d5fe4da7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* dlpvalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlpvalloc</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="404" column="7" bodyfile="casa/OS/malloc.cc" bodystart="4925" bodyend="4930" declfile="casa/OS/malloc.h" declline="404" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a0cb0780a1d244f7541f85d2ece3999fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dlmalloc_trim</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlmalloc_trim</name>
        <param>
          <type>size_t</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="427" column="6" bodyfile="casa/OS/malloc.cc" bodystart="4932" bodyend="4940" declfile="casa/OS/malloc.h" declline="427" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8h_1a8923af8a1039983906f9617a57022e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dlmalloc_usable_size</definition>
        <argsstring>(void *)</argsstring>
        <name>dlmalloc_usable_size</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/malloc.h" line="466" column="8" bodyfile="casa/OS/malloc.cc" bodystart="4966" bodyend="4973" declfile="casa/OS/malloc.h" declline="466" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#<sp/>malloc.h:<sp/>malloc<sp/>functions<sp/>from<sp/>Doug<sp/>Lea</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Copyright<sp/>(C)<sp/>1996,1999,2001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(AIPS_NO_LEA_MALLOC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CASA_MALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CASA_MALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>A<sp/>version<sp/>of<sp/>malloc/free/realloc<sp/>written<sp/>by<sp/>Doug<sp/>Lea<sp/>and<sp/>released<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>public<sp/>domain.<sp/><sp/>Send<sp/>questions/comments/complaints/performance<sp/>data</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>to<sp/>dl@cs.oswego.edu</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">*<sp/>VERSION<sp/>2.6.5<sp/><sp/>Wed<sp/>Jun<sp/>17<sp/>15:55:16<sp/>1998<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>only<sp/>changes<sp/>from<sp/>the<sp/>distribution<sp/>are:</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>1.<sp/>Added<sp/>Casacore<sp/>copyright<sp/>notice<sp/>and<sp/>guard.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>2.<sp/>Compile<sp/>to<sp/>nothing<sp/>for<sp/>linux<sp/>since<sp/>we<sp/>already<sp/>get<sp/>GNU<sp/>malloc<sp/>there.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>If<sp/>AIPS_DEBUG<sp/>is<sp/>set<sp/>compile<sp/>this<sp/>malloc<sp/>with<sp/>DEBUG<sp/>on.</highlight></codeline>
<codeline lineno="44"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AIPS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IS<sp/>linux.<sp/>Include<sp/>malloc.h<sp/>so<sp/>we<sp/>only<sp/>have<sp/>to<sp/>include<sp/>casa/OS/malloc.h<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>without<sp/>an<sp/>ifdef<sp/>on<sp/>OS.</highlight></codeline>
<codeline lineno="49"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="malloc_8h" kindref="compound">malloc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOT<sp/>linux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AIPS_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hopefully<sp/>not<sp/>too<sp/>expensive.<sp/>If<sp/>so<sp/>we<sp/>can<sp/>turn<sp/>it<sp/>off.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>Default<sp/>header<sp/>file<sp/>for<sp/>malloc-2.8.x,<sp/>written<sp/>by<sp/>Doug<sp/>Lea</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>and<sp/>released<sp/>to<sp/>the<sp/>public<sp/>domain,<sp/>as<sp/>explained<sp/>at</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/>http://creativecommons.org/licenses/publicdomain.<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>last<sp/>update:<sp/>Wed<sp/>May<sp/>27<sp/>14:25:17<sp/>2009<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>This<sp/>header<sp/>is<sp/>for<sp/>ANSI<sp/>C/C++<sp/>only.<sp/><sp/>You<sp/>can<sp/>set<sp/>any<sp/>of</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>the<sp/>following<sp/>#defines<sp/>before<sp/>including:</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>USE_DL_PREFIX<sp/>is<sp/>defined,<sp/>it<sp/>is<sp/>assumed<sp/>that<sp/>malloc.c<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>was<sp/>also<sp/>compiled<sp/>with<sp/>this<sp/>option,<sp/>so<sp/>all<sp/>routines</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>have<sp/>names<sp/>starting<sp/>with<sp/>&quot;dl&quot;.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>is<sp/>defined,<sp/>it<sp/>is<sp/>assumed<sp/>that<sp/>this</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>file<sp/>will<sp/>be<sp/>#included<sp/>AFTER<sp/>&lt;malloc.h&gt;.<sp/>This<sp/>is<sp/>needed<sp/>only<sp/>if</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>your<sp/>system<sp/>defines<sp/>a<sp/>struct<sp/>mallinfo<sp/>that<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>standard<sp/>one<sp/>declared<sp/>here.<sp/><sp/>Otherwise,<sp/>you<sp/>can<sp/>include<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>INSTEAD<sp/>of<sp/>your<sp/>system<sp/>system<sp/>&lt;malloc.h&gt;.<sp/><sp/>At<sp/>least<sp/>on<sp/>ANSI,<sp/>all</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>declarations<sp/>should<sp/>be<sp/>compatible<sp/>with<sp/>system<sp/>versions</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>MSPACES<sp/>is<sp/>defined,<sp/>declarations<sp/>for<sp/>mspace<sp/>versions<sp/>are<sp/>included.</highlight></codeline>
<codeline lineno="81"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLOC_280_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="malloc_8h_1a04d74d43f06e684ac211304659402c7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MALLOC_280_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>size_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ONLY_MSPACES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="malloc_8h_1aeb595638a14befbd356f77f8ec2a5c0d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ONLY_MSPACES<sp/>0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>define<sp/>to<sp/>a<sp/>value<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_MALLINFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="malloc_8h_1abdaef093c0ac7f4ffca5df2d2b2f0560" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NO_MALLINFO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_DL_PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="malloc_8h_1aeb507216612dc43759952dd835e7596d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlcalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="malloc_8h_1aa2f5410ccf57ee1ae49df754b44be9e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlfree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="malloc_8h_1a86195c783178093d895874a07a15dce1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="malloc_8h_1a41b3d891bf7fa5e5ca08f7898b4fd9e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmemalign<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memalign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="malloc_8h_1a0498e36f6b1a4293efe80b18b48e86b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlrealloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="malloc_8h_1af99ef0a6df3de021fcc2b48da5ced844" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlvalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="malloc_8h_1a9bfff55fd0c29554b7140954b38a54d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlpvalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvalloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="malloc_8h_1abf412c713d3ec5ac7f33663fb22e26ca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmallinfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mallinfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="malloc_8h_1a3dde31382dc8652ffb98335aecd248ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmallopt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mallopt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="malloc_8h_1a72a0e1e6edf9ef91c042680574560732" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_trim<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc_trim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="malloc_8h_1a523dae557d3a1c150198a2d91c31d0f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_stats<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc_stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="malloc_8h_1abdfd656c28f59dc708ce3dabfade2408" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_usable_size<sp/><sp/><sp/>malloc_usable_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="malloc_8h_1ae98e99f811abc5fcc542d1f0372e86b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_footprint<sp/><sp/><sp/><sp/><sp/>malloc_footprint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="malloc_8h_1a17816165d27e812d18ed032f9ced9ad4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlindependent_calloc<sp/><sp/><sp/>independent_calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="malloc_8h_1aa4e5c5d50e0cd7dc44b2defcae6226d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dlindependent_comalloc<sp/>independent_comalloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_DL_PREFIX<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_USR_INCLUDE_MALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MALLOC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLINFO_FIELD_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MALLINFO_FIELD_TYPE<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLINFO_FIELD_TYPE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STRUCT_MALLINFO_DECLARED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="malloc_8h_1a73031e8be1f35c837c74bee1d205a929" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRUCT_MALLINFO_DECLARED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a2dd8e574430e788f53919db129f2a2ff" kindref="member">arena</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>non-mmapped<sp/>space<sp/>allocated<sp/>from<sp/>system<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1afaac6d1e005097fa1ed835684e23bfa7" kindref="member">ordblks</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>free<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a93076145f3f542dfe5e4e6d1e3feaf0b" kindref="member">smblks</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1aaf01c52dcd016834ae176885fa32b550" kindref="member">hblks</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1ab78bcaeb59449f1a9c292bfe3dde8dbb" kindref="member">hblkhd</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>in<sp/>mmapped<sp/>regions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a470a5e18a1f5eb3cac48020268ca49b8" kindref="member">usmblks</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>total<sp/>allocated<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a6b1a33ff0fc95bdab9c79ce271f58003" kindref="member">fsmblks</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a4676f74c10d8bf8b79585b04d520356f" kindref="member">uordblks</ref>;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>allocated<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a2fc75bf31817d4a64d0a6970aa5278dd" kindref="member">fordblks</ref>;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>free<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a53688562ed3d2eda132ae91de874cd98" kindref="member">MALLINFO_FIELD_TYPE</ref><sp/><ref refid="structmallinfo_1a9cd2ce910ff603217426d9b1b7c0e430" kindref="member">keepcost</ref>;<sp/></highlight><highlight class="comment">/*<sp/>releasable<sp/>(via<sp/>malloc_trim)<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STRUCT_MALLINFO_DECLARED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>_MALLOC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>!NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/>malloc(size_t<sp/>n)</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>newly<sp/>allocated<sp/>chunk<sp/>of<sp/>at<sp/>least<sp/>n<sp/>bytes,<sp/>or</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>null<sp/>if<sp/>no<sp/>space<sp/>is<sp/>available,<sp/>in<sp/>which<sp/>case<sp/>errno<sp/>is<sp/>set<sp/>to<sp/>ENOMEM</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>on<sp/>ANSI<sp/>C<sp/>systems.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/>If<sp/>n<sp/>is<sp/>zero,<sp/>malloc<sp/>returns<sp/>a<sp/>minimum-sized<sp/>chunk.<sp/>(The<sp/>minimum</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>size<sp/>is<sp/>16<sp/>bytes<sp/>on<sp/>most<sp/>32bit<sp/>systems,<sp/>and<sp/>32<sp/>bytes<sp/>on<sp/>64bit</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>systems.)<sp/><sp/>Note<sp/>that<sp/>size_t<sp/>is<sp/>an<sp/>unsigned<sp/>type,<sp/>so<sp/>calls<sp/>with</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>arguments<sp/>that<sp/>would<sp/>be<sp/>negative<sp/>if<sp/>signed<sp/>are<sp/>interpreted<sp/>as</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>requests<sp/>for<sp/>huge<sp/>amounts<sp/>of<sp/>space,<sp/>which<sp/>will<sp/>often<sp/>fail.<sp/>The</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>maximum<sp/>supported<sp/>value<sp/>of<sp/>n<sp/>differs<sp/>across<sp/>systems,<sp/>but<sp/>is<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>cases<sp/>less<sp/>than<sp/>the<sp/>maximum<sp/>representable<sp/>value<sp/>of<sp/>a<sp/>size_t.</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="malloc_8h_1a86195c783178093d895874a07a15dce1" kindref="member">dlmalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>free(void*<sp/>p)</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>Releases<sp/>the<sp/>chunk<sp/>of<sp/>memory<sp/>pointed<sp/>to<sp/>by<sp/>p,<sp/>that<sp/>had<sp/>been<sp/>previously</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>allocated<sp/>using<sp/>malloc<sp/>or<sp/>a<sp/>related<sp/>routine<sp/>such<sp/>as<sp/>realloc.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>It<sp/>has<sp/>no<sp/>effect<sp/>if<sp/>p<sp/>is<sp/>null.<sp/>If<sp/>p<sp/>was<sp/>not<sp/>malloced<sp/>or<sp/>already</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>freed,<sp/>free(p)<sp/>will<sp/>by<sp/>default<sp/>cuase<sp/>the<sp/>current<sp/>program<sp/>to<sp/>abort.</highlight></codeline>
<codeline lineno="166"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1aa2f5410ccf57ee1ae49df754b44be9e3" kindref="member">dlfree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>calloc(size_t<sp/>n_elements,<sp/>size_t<sp/>element_size);</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>n_elements<sp/>*<sp/>element_size<sp/>bytes,<sp/>with<sp/>all<sp/>locations</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>set<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="173"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="malloc_8h_1aeb507216612dc43759952dd835e7596d" kindref="member">dlcalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/>realloc(void*<sp/>p,<sp/>size_t<sp/>n)</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>chunk<sp/>of<sp/>size<sp/>n<sp/>that<sp/>contains<sp/>the<sp/>same<sp/>data</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/>as<sp/>does<sp/>chunk<sp/>p<sp/>up<sp/>to<sp/>the<sp/>minimum<sp/>of<sp/>(n,<sp/>p&apos;s<sp/>size)<sp/>bytes,<sp/>or<sp/>null</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>if<sp/>no<sp/>space<sp/>is<sp/>available.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>The<sp/>returned<sp/>pointer<sp/>may<sp/>or<sp/>may<sp/>not<sp/>be<sp/>the<sp/>same<sp/>as<sp/>p.<sp/>The<sp/>algorithm</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>prefers<sp/>extending<sp/>p<sp/>in<sp/>most<sp/>cases<sp/>when<sp/>possible,<sp/>otherwise<sp/>it</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/>employs<sp/>the<sp/>equivalent<sp/>of<sp/>a<sp/>malloc-copy-free<sp/>sequence.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/>If<sp/>p<sp/>is<sp/>null,<sp/>realloc<sp/>is<sp/>equivalent<sp/>to<sp/>malloc.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/>If<sp/>space<sp/>is<sp/>not<sp/>available,<sp/>realloc<sp/>returns<sp/>null,<sp/>errno<sp/>is<sp/>set<sp/>(if<sp/>on</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>ANSI)<sp/>and<sp/>p<sp/>is<sp/>NOT<sp/>freed.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/>if<sp/>n<sp/>is<sp/>for<sp/>fewer<sp/>bytes<sp/>than<sp/>already<sp/>held<sp/>by<sp/>p,<sp/>the<sp/>newly<sp/>unused</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>space<sp/>is<sp/>lopped<sp/>off<sp/>and<sp/>freed<sp/>if<sp/>possible.<sp/><sp/>realloc<sp/>with<sp/>a<sp/>size</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>argument<sp/>of<sp/>zero<sp/>(re)allocates<sp/>a<sp/>minimum-sized<sp/>chunk.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>The<sp/>old<sp/>unix<sp/>realloc<sp/>convention<sp/>of<sp/>allowing<sp/>the<sp/>last-free&apos;d<sp/>chunk</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>to<sp/>be<sp/>used<sp/>as<sp/>an<sp/>argument<sp/>to<sp/>realloc<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="197"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="malloc_8h_1a0498e36f6b1a4293efe80b18b48e86b9" kindref="member">dlrealloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>memalign(size_t<sp/>alignment,<sp/>size_t<sp/>n);</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>newly<sp/>allocated<sp/>chunk<sp/>of<sp/>n<sp/>bytes,<sp/>aligned</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>in<sp/>accord<sp/>with<sp/>the<sp/>alignment<sp/>argument.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/>The<sp/>alignment<sp/>argument<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.<sp/>If<sp/>the<sp/>argument<sp/>is</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>not<sp/>a<sp/>power<sp/>of<sp/>two,<sp/>the<sp/>nearest<sp/>greater<sp/>power<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/>8-byte<sp/>alignment<sp/>is<sp/>guaranteed<sp/>by<sp/>normal<sp/>malloc<sp/>calls,<sp/>so<sp/>don&apos;t</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>bother<sp/>calling<sp/>memalign<sp/>with<sp/>an<sp/>argument<sp/>of<sp/>8<sp/>or<sp/>less.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>Overreliance<sp/>on<sp/>memalign<sp/>is<sp/>a<sp/>sure<sp/>way<sp/>to<sp/>fragment<sp/>space.</highlight></codeline>
<codeline lineno="212"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="malloc_8h_1a41b3d891bf7fa5e5ca08f7898b4fd9e8" kindref="member">dlmemalign</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>valloc(size_t<sp/>n);</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>Equivalent<sp/>to<sp/>memalign(pagesize,<sp/>n),<sp/>where<sp/>pagesize<sp/>is<sp/>the<sp/>page</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>size<sp/>of<sp/>the<sp/>system.<sp/>If<sp/>the<sp/>pagesize<sp/>is<sp/>unknown,<sp/>4096<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="219"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="malloc_8h_1af99ef0a6df3de021fcc2b48da5ced844" kindref="member">dlvalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/>mallopt(int<sp/>parameter_number,<sp/>int<sp/>parameter_value)</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/>Sets<sp/>tunable<sp/>parameters<sp/>The<sp/>format<sp/>is<sp/>to<sp/>provide<sp/>a</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>(parameter-number,<sp/>parameter-value)<sp/>pair.<sp/><sp/>mallopt<sp/>then<sp/>sets<sp/>the</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/>corresponding<sp/>parameter<sp/>to<sp/>the<sp/>argument<sp/>value<sp/>if<sp/>it<sp/>can<sp/>(i.e.,<sp/>so</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/>long<sp/>as<sp/>the<sp/>value<sp/>is<sp/>meaningful),<sp/>and<sp/>returns<sp/>1<sp/>if<sp/>successful<sp/>else</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>0.<sp/><sp/>SVID/XPG/ANSI<sp/>defines<sp/>four<sp/>standard<sp/>param<sp/>numbers<sp/>for<sp/>mallopt,</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/>normally<sp/>defined<sp/>in<sp/>malloc.h.<sp/><sp/>None<sp/>of<sp/>these<sp/>are<sp/>use<sp/>in<sp/>this<sp/>malloc,</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/>so<sp/>setting<sp/>them<sp/>has<sp/>no<sp/>effect.<sp/>But<sp/>this<sp/>malloc<sp/>also<sp/>supports<sp/>other</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>options<sp/>in<sp/>mallopt:</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/>Symbol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>#<sp/><sp/>default<sp/><sp/><sp/><sp/>allowed<sp/>param<sp/>values</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>M_TRIM_THRESHOLD<sp/><sp/><sp/><sp/><sp/>-1<sp/><sp/><sp/>2*1024*1024<sp/><sp/><sp/>any<sp/><sp/><sp/>(-1U<sp/>disables<sp/>trimming)</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>M_GRANULARITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/><sp/><sp/><sp/><sp/>page<sp/>size<sp/><sp/><sp/>any<sp/>power<sp/>of<sp/>2<sp/>&gt;=<sp/>page<sp/>size</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/>M_MMAP_THRESHOLD<sp/><sp/><sp/><sp/><sp/>-3<sp/><sp/><sp/><sp/><sp/><sp/>256*1024<sp/><sp/><sp/>any<sp/><sp/><sp/>(or<sp/>0<sp/>if<sp/>no<sp/>MMAP<sp/>support)</highlight></codeline>
<codeline lineno="237"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="malloc_8h_1a3dde31382dc8652ffb98335aecd248ab" kindref="member">dlmallopt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="malloc_8h_1ae5e96ee9e20ef7cfcbbb690877fc9fb2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_TRIM_THRESHOLD<sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="malloc_8h_1a1ff5e3f74801d4cbb5e97ab2d3b8f2e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_GRANULARITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="malloc_8h_1a0dd09b97e3eb71f8256b8bd441828175" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_MMAP_THRESHOLD<sp/><sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>malloc_footprint();</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>obtained<sp/>from<sp/>the<sp/>system.<sp/><sp/>The<sp/>total</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>number<sp/>of<sp/>bytes<sp/>allocated<sp/>by<sp/>malloc,<sp/>realloc<sp/>etc.,<sp/>is<sp/>less<sp/>than<sp/>this</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>value.<sp/>Unlike<sp/>mallinfo,<sp/>this<sp/>function<sp/>returns<sp/>only<sp/>a<sp/>precomputed</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>result,<sp/>so<sp/>can<sp/>be<sp/>called<sp/>frequently<sp/>to<sp/>monitor<sp/>memory<sp/>consumption.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>Even<sp/>if<sp/>locks<sp/>are<sp/>otherwise<sp/>defined,<sp/>this<sp/>function<sp/>does<sp/>not<sp/>use<sp/>them,</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/>so<sp/>results<sp/>might<sp/>not<sp/>be<sp/>up<sp/>to<sp/>date.</highlight></codeline>
<codeline lineno="253"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="malloc_8h_1ae98e99f811abc5fcc542d1f0372e86b4" kindref="member">dlmalloc_footprint</ref>();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/>mallinfo()</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/>Returns<sp/>(by<sp/>copy)<sp/>a<sp/>struct<sp/>containing<sp/>various<sp/>summary<sp/>statistics:</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/>arena:<sp/><sp/><sp/><sp/><sp/>current<sp/>total<sp/>non-mmapped<sp/>bytes<sp/>allocated<sp/>from<sp/>system</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/>ordblks:<sp/><sp/><sp/>the<sp/>number<sp/>of<sp/>free<sp/>chunks</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/>smblks:<sp/><sp/><sp/><sp/>always<sp/>zero.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>hblks:<sp/><sp/><sp/><sp/><sp/>current<sp/>number<sp/>of<sp/>mmapped<sp/>regions</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/>hblkhd:<sp/><sp/><sp/><sp/>total<sp/>bytes<sp/>held<sp/>in<sp/>mmapped<sp/>regions</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>usmblks:<sp/><sp/><sp/>the<sp/>maximum<sp/>total<sp/>allocated<sp/>space.<sp/>This<sp/>will<sp/>be<sp/>greater</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>than<sp/>current<sp/>total<sp/>if<sp/>trimming<sp/>has<sp/>occurred.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>fsmblks:<sp/><sp/><sp/>always<sp/>zero</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>uordblks:<sp/><sp/>current<sp/>total<sp/>allocated<sp/>space<sp/>(normal<sp/>or<sp/>mmapped)</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>fordblks:<sp/><sp/>total<sp/>free<sp/>space</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>keepcost:<sp/><sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>could<sp/>ideally<sp/>be<sp/>released</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>to<sp/>system<sp/>via<sp/>malloc_trim.<sp/>(&quot;ideally&quot;<sp/>means<sp/>that</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>ignores<sp/>page<sp/>restrictions<sp/>etc.)</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/>Because<sp/>these<sp/>fields<sp/>are<sp/>ints,<sp/>but<sp/>internal<sp/>bookkeeping<sp/>may</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/>be<sp/>kept<sp/>as<sp/>longs,<sp/>the<sp/>reported<sp/>values<sp/>may<sp/>wrap<sp/>around<sp/>zero<sp/>and</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/>thus<sp/>be<sp/>inaccurate.</highlight></codeline>
<codeline lineno="278"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/><ref refid="malloc_8h_1abf412c713d3ec5ac7f33663fb22e26ca" kindref="member">dlmallinfo</ref>(void);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/>independent_calloc(size_t<sp/>n_elements,<sp/>size_t<sp/>element_size,<sp/>void*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="285"><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/>independent_calloc<sp/>is<sp/>similar<sp/>to<sp/>calloc,<sp/>but<sp/>instead<sp/>of<sp/>returning<sp/>a</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/>single<sp/>cleared<sp/>space,<sp/>it<sp/>returns<sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>n_elements</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/>independent<sp/>elements<sp/>that<sp/>can<sp/>hold<sp/>contents<sp/>of<sp/>size<sp/>elem_size,<sp/>each</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/>of<sp/>which<sp/>starts<sp/>out<sp/>cleared,<sp/>and<sp/>can<sp/>be<sp/>independently<sp/>freed,</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/>realloc&apos;ed<sp/>etc.<sp/>The<sp/>elements<sp/>are<sp/>guaranteed<sp/>to<sp/>be<sp/>adjacently</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>allocated<sp/>(this<sp/>is<sp/>not<sp/>guaranteed<sp/>to<sp/>occur<sp/>with<sp/>multiple<sp/>callocs<sp/>or</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/>mallocs),<sp/>which<sp/>may<sp/>also<sp/>improve<sp/>cache<sp/>locality<sp/>in<sp/>some</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/>applications.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>The<sp/>&quot;chunks&quot;<sp/>argument<sp/>is<sp/>optional<sp/>(i.e.,<sp/>may<sp/>be<sp/>null,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/>probably<sp/>the<sp/>most<sp/>typical<sp/>usage).<sp/>If<sp/>it<sp/>is<sp/>null,<sp/>the<sp/>returned<sp/>array</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>is<sp/>itself<sp/>dynamically<sp/>allocated<sp/>and<sp/>should<sp/>also<sp/>be<sp/>freed<sp/>when<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/>no<sp/>longer<sp/>needed.<sp/>Otherwise,<sp/>the<sp/>chunks<sp/>array<sp/>must<sp/>be<sp/>of<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/>n_elements<sp/>in<sp/>length.<sp/>It<sp/>is<sp/>filled<sp/>in<sp/>with<sp/>the<sp/>pointers<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/>chunks.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>In<sp/>either<sp/>case,<sp/>independent_calloc<sp/>returns<sp/>this<sp/>pointer<sp/>array,<sp/>or</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>null<sp/>if<sp/>the<sp/>allocation<sp/>failed.<sp/><sp/>If<sp/>n_elements<sp/>is<sp/>zero<sp/>and<sp/>&quot;chunks&quot;</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>is<sp/>null,<sp/>it<sp/>returns<sp/>a<sp/>chunk<sp/>representing<sp/>an<sp/>array<sp/>with<sp/>zero<sp/>elements</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>(which<sp/>should<sp/>be<sp/>freed<sp/>if<sp/>not<sp/>wanted).</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/>Each<sp/>element<sp/>must<sp/>be<sp/>individually<sp/>freed<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/>needed.<sp/>If<sp/>you&apos;d<sp/>like<sp/>to<sp/>instead<sp/>be<sp/>able<sp/>to<sp/>free<sp/>all<sp/>at<sp/>once,<sp/>you</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>should<sp/>instead<sp/>use<sp/>regular<sp/>calloc<sp/>and<sp/>assign<sp/>pointers<sp/>into<sp/>this</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/>space<sp/>to<sp/>represent<sp/>elements.<sp/><sp/>(In<sp/>this<sp/>case<sp/>though,<sp/>you<sp/>cannot</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/>independently<sp/>free<sp/>elements.)</highlight></codeline>
<codeline lineno="312"><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/>independent_calloc<sp/>simplifies<sp/>and<sp/>speeds<sp/>up<sp/>implementations<sp/>of<sp/>many</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/>kinds<sp/>of<sp/>pools.<sp/><sp/>It<sp/>may<sp/>also<sp/>be<sp/>useful<sp/>when<sp/>constructing<sp/>large<sp/>data</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/>structures<sp/>that<sp/>initially<sp/>have<sp/>a<sp/>fixed<sp/>number<sp/>of<sp/>fixed-sized<sp/>nodes,</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>but<sp/>the<sp/>number<sp/>is<sp/>not<sp/>known<sp/>at<sp/>compile<sp/>time,<sp/>and<sp/>some<sp/>of<sp/>the<sp/>nodes</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/>may<sp/>later<sp/>need<sp/>to<sp/>be<sp/>freed.<sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>struct<sp/>Node<sp/>{<sp/>int<sp/>item;<sp/>struct<sp/>Node*<sp/>next;<sp/>};</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/>struct<sp/>Node*<sp/>build_list()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Node**<sp/>pool;</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>read_number_of_nodes_needed();</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>&lt;=<sp/>0)<sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>(struct<sp/>Node**)(independent_calloc(n,<sp/>sizeof(struct<sp/>Node),<sp/>0);</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(pool<sp/>==<sp/>0)<sp/>die();</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>organize<sp/>into<sp/>a<sp/>linked<sp/>list...</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Node*<sp/>first<sp/>=<sp/>pool[0];</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n-1;<sp/>++i)</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pool[i]-&gt;next<sp/>=<sp/>pool[i+1];</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/>free(pool);<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>now<sp/>free<sp/>the<sp/>array<sp/>(or<sp/>not,<sp/>if<sp/>it<sp/>is<sp/>needed<sp/>later)</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>first;</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="malloc_8h_1ad846767c4337a54652e8dec4e0bed7c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="malloc_8h_1a17816165d27e812d18ed032f9ced9ad4" kindref="member">dlindependent_calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/>independent_comalloc(size_t<sp/>n_elements,<sp/>size_t<sp/>sizes[],<sp/>void*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="339"><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/>independent_comalloc<sp/>allocates,<sp/>all<sp/>at<sp/>once,<sp/>a<sp/>set<sp/>of<sp/>n_elements</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>chunks<sp/>with<sp/>sizes<sp/>indicated<sp/>in<sp/>the<sp/>&quot;sizes&quot;<sp/>array.<sp/><sp/><sp/><sp/>It<sp/>returns</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>these<sp/>elements,<sp/>each<sp/>of<sp/>which<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>independently<sp/>freed,<sp/>realloc&apos;ed<sp/>etc.<sp/>The<sp/>elements<sp/>are<sp/>guaranteed<sp/>to</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/>be<sp/>adjacently<sp/>allocated<sp/>(this<sp/>is<sp/>not<sp/>guaranteed<sp/>to<sp/>occur<sp/>with</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/>multiple<sp/>callocs<sp/>or<sp/>mallocs),<sp/>which<sp/>may<sp/>also<sp/>improve<sp/>cache<sp/>locality</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/>in<sp/>some<sp/>applications.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/>The<sp/>&quot;chunks&quot;<sp/>argument<sp/>is<sp/>optional<sp/>(i.e.,<sp/>may<sp/>be<sp/>null).<sp/>If<sp/>it<sp/>is<sp/>null</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>the<sp/>returned<sp/>array<sp/>is<sp/>itself<sp/>dynamically<sp/>allocated<sp/>and<sp/>should<sp/>also</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/>be<sp/>freed<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed.<sp/>Otherwise,<sp/>the<sp/>chunks<sp/>array</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/>must<sp/>be<sp/>of<sp/>at<sp/>least<sp/>n_elements<sp/>in<sp/>length.<sp/>It<sp/>is<sp/>filled<sp/>in<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/>pointers<sp/>to<sp/>the<sp/>chunks.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/>In<sp/>either<sp/>case,<sp/>independent_comalloc<sp/>returns<sp/>this<sp/>pointer<sp/>array,<sp/>or</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/>null<sp/>if<sp/>the<sp/>allocation<sp/>failed.<sp/><sp/>If<sp/>n_elements<sp/>is<sp/>zero<sp/>and<sp/>chunks<sp/>is</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/>null,<sp/>it<sp/>returns<sp/>a<sp/>chunk<sp/>representing<sp/>an<sp/>array<sp/>with<sp/>zero<sp/>elements</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/>(which<sp/>should<sp/>be<sp/>freed<sp/>if<sp/>not<sp/>wanted).</highlight></codeline>
<codeline lineno="358"><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/>Each<sp/>element<sp/>must<sp/>be<sp/>individually<sp/>freed<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/>needed.<sp/>If<sp/>you&apos;d<sp/>like<sp/>to<sp/>instead<sp/>be<sp/>able<sp/>to<sp/>free<sp/>all<sp/>at<sp/>once,<sp/>you</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/>should<sp/>instead<sp/>use<sp/>a<sp/>single<sp/>regular<sp/>malloc,<sp/>and<sp/>assign<sp/>pointers<sp/>at</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/>particular<sp/>offsets<sp/>in<sp/>the<sp/>aggregate<sp/>space.<sp/>(In<sp/>this<sp/>case<sp/>though,<sp/>you</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/>cannot<sp/>independently<sp/>free<sp/>elements.)</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/>independent_comallac<sp/>differs<sp/>from<sp/>independent_calloc<sp/>in<sp/>that<sp/>each</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/>element<sp/>may<sp/>have<sp/>a<sp/>different<sp/>size,<sp/>and<sp/>also<sp/>that<sp/>it<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/>automatically<sp/>clear<sp/>elements.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"></highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/>independent_comalloc<sp/>can<sp/>be<sp/>used<sp/>to<sp/>speed<sp/>up<sp/>allocation<sp/>in<sp/>cases</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>where<sp/>several<sp/>structs<sp/>or<sp/>objects<sp/>must<sp/>always<sp/>be<sp/>allocated<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/>same<sp/>time.<sp/><sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="372"><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/>struct<sp/>Head<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/>struct<sp/>Foot<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/>void<sp/>send_message(char*<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>msglen<sp/>=<sp/>strlen(msg);</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>sizes[3]<sp/>=<sp/>{<sp/>sizeof(struct<sp/>Head),<sp/>msglen,<sp/>sizeof(struct<sp/>Foot)<sp/>};</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/>void*<sp/>chunks[3];</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(independent_comalloc(3,<sp/>sizes,<sp/>chunks)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>die();</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Head*<sp/>head<sp/>=<sp/>(struct<sp/>Head*)(chunks[0]);</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/>char*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>(char*)(chunks[1]);</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Foot*<sp/>foot<sp/>=<sp/>(struct<sp/>Foot*)(chunks[2]);</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/>In<sp/>general<sp/>though,<sp/>independent_comalloc<sp/>is<sp/>worth<sp/>using<sp/>only<sp/>for</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/>larger<sp/>values<sp/>of<sp/>n_elements.<sp/>For<sp/>small<sp/>values,<sp/>you<sp/>probably<sp/>won&apos;t</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/>detect<sp/>enough<sp/>difference<sp/>from<sp/>series<sp/>of<sp/>malloc<sp/>calls<sp/>to<sp/>bother.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/>Overuse<sp/>of<sp/>independent_comalloc<sp/>can<sp/>increase<sp/>overall<sp/>memory<sp/>usage,</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/>since<sp/>it<sp/>cannot<sp/>reuse<sp/>existing<sp/>noncontiguous<sp/>small<sp/>chunks<sp/>that</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>might<sp/>be<sp/>available<sp/>for<sp/>some<sp/>of<sp/>the<sp/>elements.</highlight></codeline>
<codeline lineno="395"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="malloc_8h_1a8c2ac6dd0af7f018766729dd191a739e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="malloc_8h_1aa4e5c5d50e0cd7dc44b2defcae6226d7" kindref="member">dlindependent_comalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/>pvalloc(size_t<sp/>n);</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>Equivalent<sp/>to<sp/>valloc(minimum-page-that-holds(n)),<sp/>that<sp/>is,</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/>round<sp/>up<sp/>n<sp/>to<sp/>nearest<sp/>pagesize.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><ref refid="malloc_8h_1a9bfff55fd0c29554b7140954b38a54d4" kindref="member">dlpvalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>malloc_trim(size_t<sp/>pad);</highlight></codeline>
<codeline lineno="408"><highlight class="comment"></highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/>If<sp/>possible,<sp/>gives<sp/>memory<sp/>back<sp/>to<sp/>the<sp/>system<sp/>(via<sp/>negative<sp/>arguments</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/>to<sp/>sbrk)<sp/>if<sp/>there<sp/>is<sp/>unused<sp/>memory<sp/>at<sp/>the<sp/>`high&apos;<sp/>end<sp/>of<sp/>the<sp/>malloc</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/>pool<sp/>or<sp/>in<sp/>unused<sp/>MMAP<sp/>segments.<sp/>You<sp/>can<sp/>call<sp/>this<sp/>after<sp/>freeing</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>large<sp/>blocks<sp/>of<sp/>memory<sp/>to<sp/>potentially<sp/>reduce<sp/>the<sp/>system-level<sp/>memory</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/>requirements<sp/>of<sp/>a<sp/>program.<sp/>However,<sp/>it<sp/>cannot<sp/>guarantee<sp/>to<sp/>reduce</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/>memory.<sp/>Under<sp/>some<sp/>allocation<sp/>patterns,<sp/>some<sp/>large<sp/>free<sp/>blocks<sp/>of</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>memory<sp/>will<sp/>be<sp/>locked<sp/>between<sp/>two<sp/>used<sp/>chunks,<sp/>so<sp/>they<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/>given<sp/>back<sp/>to<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/>The<sp/>`pad&apos;<sp/>argument<sp/>to<sp/>malloc_trim<sp/>represents<sp/>the<sp/>amount<sp/>of<sp/>free</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>trailing<sp/>space<sp/>to<sp/>leave<sp/>untrimmed.<sp/>If<sp/>this<sp/>argument<sp/>is<sp/>zero,<sp/>only</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/>the<sp/>minimum<sp/>amount<sp/>of<sp/>memory<sp/>to<sp/>maintain<sp/>internal<sp/>data<sp/>structures</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>will<sp/>be<sp/>left.<sp/>Non-zero<sp/>arguments<sp/>can<sp/>be<sp/>supplied<sp/>to<sp/>maintain<sp/>enough</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/>trailing<sp/>space<sp/>to<sp/>service<sp/>future<sp/>expected<sp/>allocations<sp/>without<sp/>having</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>to<sp/>re-obtain<sp/>memory<sp/>from<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>Malloc_trim<sp/>returns<sp/>1<sp/>if<sp/>it<sp/>actually<sp/>released<sp/>any<sp/>memory,<sp/>else<sp/>0.</highlight></codeline>
<codeline lineno="426"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a72a0e1e6edf9ef91c042680574560732" kindref="member">dlmalloc_trim</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/>malloc_stats();</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>Prints<sp/>on<sp/>stderr<sp/>the<sp/>amount<sp/>of<sp/>space<sp/>obtained<sp/>from<sp/>the<sp/>system<sp/>(both</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>via<sp/>sbrk<sp/>and<sp/>mmap),<sp/>the<sp/>maximum<sp/>amount<sp/>(which<sp/>may<sp/>be<sp/>more<sp/>than</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>current<sp/>if<sp/>malloc_trim<sp/>and/or<sp/>munmap<sp/>got<sp/>called),<sp/>and<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>number<sp/>of<sp/>bytes<sp/>allocated<sp/>via<sp/>malloc<sp/>(or<sp/>realloc,<sp/>etc)<sp/>but<sp/>not<sp/>yet</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>freed.<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>allocated,<sp/>not<sp/>the</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>number<sp/>requested.<sp/>It<sp/>will<sp/>be<sp/>larger<sp/>than<sp/>the<sp/>number<sp/>requested</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/>because<sp/>of<sp/>alignment<sp/>and<sp/>bookkeeping<sp/>overhead.<sp/>Because<sp/>it<sp/>includes</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>alignment<sp/>wastage<sp/>as<sp/>being<sp/>in<sp/>use,<sp/>this<sp/>figure<sp/>may<sp/>be<sp/>greater<sp/>than</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>zero<sp/>even<sp/>when<sp/>no<sp/>user-level<sp/>chunks<sp/>are<sp/>allocated.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>The<sp/>reported<sp/>current<sp/>and<sp/>maximum<sp/>system<sp/>memory<sp/>can<sp/>be<sp/>inaccurate<sp/>if</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/>a<sp/>program<sp/>makes<sp/>other<sp/>calls<sp/>to<sp/>system<sp/>memory<sp/>allocation<sp/>functions</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>(normally<sp/>sbrk)<sp/>outside<sp/>of<sp/>malloc.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>malloc_stats<sp/>prints<sp/>only<sp/>the<sp/>most<sp/>commonly<sp/>interesting<sp/>statistics.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>can<sp/>be<sp/>obtained<sp/>by<sp/>calling<sp/>mallinfo.</highlight></codeline>
<codeline lineno="447"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="malloc_8h_1a523dae557d3a1c150198a2d91c31d0f5" kindref="member">dlmalloc_stats</ref>();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>malloc_usable_size(void*<sp/>p);</highlight></codeline>
<codeline lineno="454"><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>you<sp/>can<sp/>actually<sp/>use<sp/>in</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>an<sp/>allocated<sp/>chunk,<sp/>which<sp/>may<sp/>be<sp/>more<sp/>than<sp/>you<sp/>requested<sp/>(although</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>often<sp/>not)<sp/>due<sp/>to<sp/>alignment<sp/>and<sp/>minimum<sp/>size<sp/>constraints.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/>You<sp/>can<sp/>use<sp/>this<sp/>many<sp/>bytes<sp/>without<sp/>worrying<sp/>about</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>overwriting<sp/>other<sp/>allocated<sp/>objects.<sp/>This<sp/>is<sp/>not<sp/>a<sp/>particularly<sp/>great</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/>programming<sp/>practice.<sp/>malloc_usable_size<sp/>can<sp/>be<sp/>more<sp/>useful<sp/>in</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/>debugging<sp/>and<sp/>assertions,<sp/>for<sp/>example:</highlight></codeline>
<codeline lineno="462"><highlight class="comment"></highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/>p<sp/>=<sp/>malloc(n);</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/>assert(malloc_usable_size(p)<sp/>&gt;=<sp/>256);</highlight></codeline>
<codeline lineno="465"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="malloc_8h_1abdfd656c28f59dc708ce3dabfade2408" kindref="member">dlmalloc_usable_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MSPACES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/>mspace<sp/>is<sp/>an<sp/>opaque<sp/>type<sp/>representing<sp/>an<sp/>independent</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/>region<sp/>of<sp/>space<sp/>that<sp/>supports<sp/>mspace_malloc,<sp/>etc.</highlight></codeline>
<codeline lineno="474"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>create_mspace<sp/>creates<sp/>and<sp/>returns<sp/>a<sp/>new<sp/>independent<sp/>space<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/>given<sp/>initial<sp/>capacity,<sp/>or,<sp/>if<sp/>0,<sp/>the<sp/>default<sp/>granularity<sp/>size.<sp/><sp/>It</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>returns<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>system<sp/>memory<sp/>available<sp/>to<sp/>create<sp/>the</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/>space.<sp/><sp/>If<sp/>argument<sp/>locked<sp/>is<sp/>non-zero,<sp/>the<sp/>space<sp/>uses<sp/>a<sp/>separate</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/>lock<sp/>to<sp/>control<sp/>access.<sp/>The<sp/>capacity<sp/>of<sp/>the<sp/>space<sp/>will<sp/>grow</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/>dynamically<sp/>as<sp/>needed<sp/>to<sp/>service<sp/>mspace_malloc<sp/>requests.<sp/><sp/>You<sp/>can</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/>control<sp/>the<sp/>sizes<sp/>of<sp/>incremental<sp/>increases<sp/>of<sp/>this<sp/>space<sp/>by</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/>compiling<sp/>with<sp/>a<sp/>different<sp/>DEFAULT_GRANULARITY<sp/>or<sp/>dynamically</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/>setting<sp/>with<sp/>mallopt(M_GRANULARITY,<sp/>value).</highlight></codeline>
<codeline lineno="487"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">mspace<sp/>create_mspace(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/>destroy_mspace<sp/>destroys<sp/>the<sp/>given<sp/>space,<sp/>and<sp/>attempts<sp/>to<sp/>return<sp/>all</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>of<sp/>its<sp/>memory<sp/>back<sp/>to<sp/>the<sp/>system,<sp/>returning<sp/>the<sp/>total<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/>bytes<sp/>freed.<sp/>After<sp/>destruction,<sp/>the<sp/>results<sp/>of<sp/>access<sp/>to<sp/>all<sp/>memory</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/>used<sp/>by<sp/>the<sp/>space<sp/>become<sp/>undefined.</highlight></codeline>
<codeline lineno="495"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destroy_mspace(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/>create_mspace_with_base<sp/>uses<sp/>the<sp/>memory<sp/>supplied<sp/>as<sp/>the<sp/>initial<sp/>base</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>of<sp/>a<sp/>new<sp/>mspace.<sp/>Part<sp/>(less<sp/>than<sp/>128*sizeof(size_t)<sp/>bytes)<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/>space<sp/>is<sp/>used<sp/>for<sp/>bookkeeping,<sp/>so<sp/>the<sp/>capacity<sp/>must<sp/>be<sp/>at<sp/>least<sp/>this</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/>large.<sp/>(Otherwise<sp/>0<sp/>is<sp/>returned.)<sp/>When<sp/>this<sp/>initial<sp/>space<sp/>is</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/>exhausted,<sp/>additional<sp/>memory<sp/>will<sp/>be<sp/>obtained<sp/>from<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>Destroying<sp/>this<sp/>space<sp/>will<sp/>deallocate<sp/>all<sp/>additionally<sp/>allocated</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>space<sp/>(if<sp/>possible)<sp/>but<sp/>not<sp/>the<sp/>initial<sp/>base.</highlight></codeline>
<codeline lineno="506"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">mspace<sp/>create_mspace_with_base(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>base,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/>mspace_track_large_chunks<sp/>controls<sp/>whether<sp/>requests<sp/>for<sp/>large<sp/>chunks</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/>are<sp/>allocated<sp/>in<sp/>their<sp/>own<sp/>untracked<sp/>mmapped<sp/>regions,<sp/>separate<sp/>from</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/>others<sp/>in<sp/>this<sp/>mspace.<sp/>By<sp/>default<sp/>large<sp/>chunks<sp/>are<sp/>not<sp/>tracked,</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/>which<sp/>reduces<sp/>fragmentation.<sp/>However,<sp/>such<sp/>chunks<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/>necessarily<sp/>released<sp/>to<sp/>the<sp/>system<sp/>upon<sp/>destroy_mspace.<sp/><sp/>Enabling</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/>tracking<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>may<sp/>increase<sp/>fragmentation,<sp/>but<sp/>avoids</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/>leakage<sp/>when<sp/>relying<sp/>on<sp/>destroy_mspace<sp/>to<sp/>release<sp/>all<sp/>memory</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/>allocated<sp/>using<sp/>this<sp/>space.<sp/><sp/>The<sp/>function<sp/>returns<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/>setting.</highlight></codeline>
<codeline lineno="519"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_track_large_chunks(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/>mspace_malloc<sp/>behaves<sp/>as<sp/>malloc,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="525"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_malloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/>mspace_free<sp/>behaves<sp/>as<sp/>free,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/>If<sp/>compiled<sp/>with<sp/>FOOTERS==1,<sp/>mspace_free<sp/>is<sp/>not<sp/>actually<sp/>needed.</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/>free<sp/>may<sp/>be<sp/>called<sp/>instead<sp/>of<sp/>mspace_free<sp/>because<sp/>freed<sp/>chunks<sp/>from</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/>any<sp/>space<sp/>are<sp/>handled<sp/>by<sp/>their<sp/>originating<sp/>spaces.</highlight></codeline>
<codeline lineno="535"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_free(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/>mspace_realloc<sp/>behaves<sp/>as<sp/>realloc,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="541"><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/>If<sp/>compiled<sp/>with<sp/>FOOTERS==1,<sp/>mspace_realloc<sp/>is<sp/>not<sp/>actually</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/>needed.<sp/><sp/>realloc<sp/>may<sp/>be<sp/>called<sp/>instead<sp/>of<sp/>mspace_realloc<sp/>because</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/>realloced<sp/>chunks<sp/>from<sp/>any<sp/>space<sp/>are<sp/>handled<sp/>by<sp/>their<sp/>originating</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/>spaces.</highlight></codeline>
<codeline lineno="546"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_realloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/>mspace_calloc<sp/>behaves<sp/>as<sp/>calloc,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="552"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_calloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/>mspace_memalign<sp/>behaves<sp/>as<sp/>memalign,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="558"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_memalign(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/>mspace_independent_calloc<sp/>behaves<sp/>as<sp/>independent_calloc,<sp/>but</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/>operates<sp/>within<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="564"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>mspace_independent_calloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/>mspace_independent_comalloc<sp/>behaves<sp/>as<sp/>independent_comalloc,<sp/>but</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/>operates<sp/>within<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="571"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>mspace_independent_comalloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizes[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/>mspace_footprint()<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>obtained<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/>system<sp/>for<sp/>this<sp/>space.</highlight></codeline>
<codeline lineno="578"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_footprint(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/>mspace_mallinfo<sp/>behaves<sp/>as<sp/>mallinfo,<sp/>but<sp/>reports<sp/>properties<sp/>of</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="586"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>mspace_mallinfo(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/>malloc_usable_size(void*<sp/>p)<sp/>behaves<sp/>the<sp/>same<sp/>as<sp/>malloc_usable_size;</highlight></codeline>
<codeline lineno="592"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_usable_size(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/>mspace_malloc_stats<sp/>behaves<sp/>as<sp/>malloc_stats,<sp/>but<sp/>reports</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/>properties<sp/>of<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="598"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_malloc_stats(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/>mspace_trim<sp/>behaves<sp/>as<sp/>malloc_trim,<sp/>but</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/>operates<sp/>within<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="604"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_trim(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pad);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/>An<sp/>alias<sp/>for<sp/>mallopt.</highlight></codeline>
<codeline lineno="609"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_mallopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLOC_280_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AIPS_LINUX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AIPS_MALLOC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AIPS_NO_LEA_MALLOC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="casa/OS/malloc.h"/>
  </compounddef>
</doxygen>
