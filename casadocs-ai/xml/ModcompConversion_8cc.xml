<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ModcompConversion_8cc" kind="file" language="C++">
    <compoundname>ModcompConversion.cc</compoundname>
    <includes refid="ModcompConversion_8h" local="no">casacore/casa/OS/ModcompConversion.h</includes>
    <includes refid="Assert_8h" local="no">casacore/casa/Utilities/Assert.h</includes>
    <includes refid="Error_8h" local="no">casacore/casa/Exceptions/Error.h</includes>
    <incdepgraph>
      <node id="4">
        <label>casacore/casa/aipsenv.h</label>
        <link refid="aipsenv_8h"/>
      </node>
      <node id="9">
        <label>casacore/casa/Exceptions/Error.h</label>
        <link refid="Error_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>casacore/casa/iostream.h</label>
        <link refid="iostream_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>casacore/casa/iosfwd.h</label>
        <link refid="iosfwd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>casacore/casa/aipstype.h</label>
        <link refid="aipstype_8h"/>
      </node>
      <node id="12">
        <label>casacore/casa/iosstrfwd.h</label>
        <link refid="iosstrfwd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="3">
        <label>casacore/casa/aips.h</label>
        <link refid="aips_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>exception</label>
      </node>
      <node id="25">
        <label>casacore/casa/string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>casa/OS/ModcompConversion.cc</label>
        <link refid="ModcompConversion_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>sys/types.h</label>
      </node>
      <node id="22">
        <label>casacore/casa/Utilities/Assert.tcc</label>
        <link refid="Assert_8tcc"/>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>iosfwd</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>casacore/casa/aipsdef.h</label>
        <link refid="aipsdef_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>casacore/casa/OS/Conversion.h</label>
        <link refid="Conversion_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>casacore/casa/OS/CanonicalConversion.h</label>
        <link refid="CanonicalConversion_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>casacore/casa/sstream.h</label>
        <link refid="sstream_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>casacore/casa/OS/ModcompConversion.h</label>
        <link refid="ModcompConversion_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>casacore/casa/Exceptions/Error.tcc</label>
        <link refid="Error_8tcc"/>
      </node>
      <node id="6">
        <label>casacore/casa/aipsxtype.h</label>
        <link refid="aipsxtype_8h"/>
      </node>
      <node id="26">
        <label>cstring</label>
      </node>
      <node id="10">
        <label>casacore/casa/BasicSL/String.h</label>
        <link refid="String_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>casacore/casa/Utilities/Assert.h</label>
        <link refid="Assert_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#<sp/>ModcompConversion.cc:<sp/>Static<sp/>functions<sp/>to<sp/>convert<sp/>Modcomp<sp/>numeric<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Copyright<sp/>(C)<sp/>1998,1999,2001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ModcompConversion_8h" kindref="compound">casacore/casa/OS/ModcompConversion.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Assert_8h" kindref="compound">casacore/casa/Utilities/Assert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Error_8h" kindref="compound">casacore/casa/Exceptions/Error.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecasacore" kindref="compound">casacore</ref><sp/>{<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a6dc8a78fab02369bf8d96f6a3b328dc5" kindref="member">ModcompConversion::toLocal</ref><sp/>(<ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)from;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref>*<sp/>last<sp/>=<sp/>to<sp/>+<sp/>nr;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(to<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="classcasacore_1_1ModcompConversion_1a6dc8a78fab02369bf8d96f6a3b328dc5" kindref="member">toLocal</ref><sp/>(*to++,<sp/>data);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>data<sp/>+=<sp/><ref refid="ModcompConversion_8h_1afdc41d651505e26f61dddf5d9dc3d0f8" kindref="member">SIZE_MODCOMP_INT64</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr*<ref refid="ModcompConversion_8h_1afdc41d651505e26f61dddf5d9dc3d0f8" kindref="member">SIZE_MODCOMP_INT64</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a6dc8a78fab02369bf8d96f6a3b328dc5" kindref="member">ModcompConversion::toLocal</ref><sp/>(<ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)from;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref>*<sp/>last<sp/>=<sp/>to<sp/>+<sp/>nr;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(to<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classcasacore_1_1ModcompConversion_1a6dc8a78fab02369bf8d96f6a3b328dc5" kindref="member">toLocal</ref><sp/>(*to++,<sp/>data);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>data<sp/>+=<sp/><ref refid="ModcompConversion_8h_1a9d9ba7961e5ab5fae3bc88a98557d0e7" kindref="member">SIZE_MODCOMP_UINT64</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr*<ref refid="ModcompConversion_8h_1a9d9ba7961e5ab5fae3bc88a98557d0e7" kindref="member">SIZE_MODCOMP_UINT64</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a0457f62dcb4a9cc7aee859df0c863eaa" kindref="member">ModcompConversion::fromLocal</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref>*<sp/>from,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)to;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref>*<sp/>last<sp/>=<sp/>from<sp/>+<sp/>nr;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(from<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classcasacore_1_1ModcompConversion_1a0457f62dcb4a9cc7aee859df0c863eaa" kindref="member">fromLocal</ref><sp/>(data,<sp/>*from++);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>data<sp/>+=<sp/><ref refid="ModcompConversion_8h_1afdc41d651505e26f61dddf5d9dc3d0f8" kindref="member">SIZE_MODCOMP_INT64</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr*<ref refid="ModcompConversion_8h_1afdc41d651505e26f61dddf5d9dc3d0f8" kindref="member">SIZE_MODCOMP_INT64</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a0457f62dcb4a9cc7aee859df0c863eaa" kindref="member">ModcompConversion::fromLocal</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref>*<sp/>from,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)to;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref>*<sp/>last<sp/>=<sp/>from<sp/>+<sp/>nr;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(from<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classcasacore_1_1ModcompConversion_1a0457f62dcb4a9cc7aee859df0c863eaa" kindref="member">fromLocal</ref><sp/>(data,<sp/>*from++);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>data<sp/>+=<sp/><ref refid="ModcompConversion_8h_1a9d9ba7961e5ab5fae3bc88a98557d0e7" kindref="member">SIZE_MODCOMP_UINT64</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr*<ref refid="ModcompConversion_8h_1a9d9ba7961e5ab5fae3bc88a98557d0e7" kindref="member">SIZE_MODCOMP_UINT64</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modcomp<sp/>has<sp/>one<sp/>more<sp/>bit<sp/>in<sp/>the<sp/>exponent<sp/>than<sp/>IEEE<sp/>and<sp/>because<sp/>it<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>an<sp/>implicit<sp/>bit<sp/>two<sp/>less<sp/>bits<sp/>in<sp/>the<sp/>Mantissa.<sp/>It<sp/>does<sp/>not<sp/>have<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>numbers<sp/>like<sp/>NaN<sp/>or<sp/>Infinity.<sp/>The<sp/>Modcomp<sp/>is<sp/>big-endian<sp/>(like<sp/>Sun&apos;s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a6dc8a78fab02369bf8d96f6a3b328dc5" kindref="member">ModcompConversion::toLocal</ref><sp/>(<ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="Assert_8h_1a3a2841df3d3b6a6443634cdb5d39513d" kindref="member">DebugAssert</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref>)<sp/>&gt;=<sp/>2,<sp/>AipsError);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref><sp/>asByte[<ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>*)<sp/>from;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>to<sp/>+<sp/>nr;<sp/>to<sp/>&lt;<sp/>last;<sp/>to++)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>data<sp/>to<sp/>the<sp/>temporary<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>is<sp/>negative<sp/>then<sp/>its<sp/>positive<sp/>value<sp/>is<sp/>the<sp/>twos<sp/>complement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>isNegative<sp/>=<sp/>((asByte[0]<sp/>&amp;<sp/>0x80)<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>takes<sp/>the<sp/>twos<sp/>complement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>asByte[i]<sp/>=<sp/>~asByte[i];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]++;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(asByte[i]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>asByte[i]++;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>isZero<sp/>=<sp/>(asByte[1]<sp/>&amp;<sp/>0x3f)<sp/>==<sp/>0x00;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isZero<sp/>=<sp/>(asByte[i]<sp/>==<sp/>0x00)<sp/>&amp;&amp;<sp/>isZero;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isZero)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Early<sp/>exit<sp/>if<sp/>the<sp/>number<sp/>is<sp/>zero.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>am<sp/>told<sp/>this<sp/>is<sp/>common<sp/>in<sp/>the<sp/>data<sp/>so<sp/>it<sp/>should<sp/>speed<sp/>things<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>asByte[k]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>signed<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>is<sp/>not<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref><sp/>exponent<sp/>=<sp/>((asByte[0]<sp/>&amp;<sp/>0x7f)<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>((asByte[1]<sp/>&amp;<sp/>0xc0)<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((asByte[1]<sp/>&amp;<sp/>0x20)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>the<sp/>number<sp/>is<sp/>unnormalised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>so<sp/>try<sp/>to<sp/>normalise<sp/>it.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>does<sp/>a<sp/>byte<sp/>by<sp/>byte<sp/>left<sp/>shift<sp/>by<sp/>one<sp/>bit<sp/>(painful).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>-1;<sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>msbIsSet<sp/>=<sp/>(asByte[i]<sp/>&amp;<sp/>(0x80))<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>prevMsbIsSet<sp/>=<sp/>msbIsSet;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msbIsSet<sp/>=<sp/>(asByte[i]<sp/>&amp;<sp/>(0x80))<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevMsbIsSet)<sp/>asByte[i]<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>=<sp/>((asByte[1]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>(asByte[1]<sp/>&amp;<sp/>0xc0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msbIsSet)<sp/>asByte[1]<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>exponent--;<sp/></highlight><highlight class="comment">//<sp/>Because<sp/>the<sp/>exponent<sp/>can<sp/>go<sp/>negative<sp/>it<sp/>must<sp/>be<sp/>signed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;<sp/>384)<sp/>{</highlight><highlight class="comment">//<sp/>exponent<sp/>is<sp/>too<sp/>big.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>asByte[1]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/>0xff;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>negative<sp/>infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/>0x7f;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>positive<sp/>infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&lt;<sp/>108)<sp/>{</highlight><highlight class="comment">//<sp/>exponent<sp/>is<sp/>too<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>=<sp/>0x00;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/>0x80;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>negative<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/>0x00;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>positive<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;<sp/>130)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>A<sp/>normal<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>2<sp/>lines<sp/>assumes<sp/>mantissa<sp/>is<sp/>normalised<sp/>(as<sp/>is<sp/>done<sp/>above)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>exponent<sp/>-=<sp/>130;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>does<sp/>a<sp/>byte<sp/>by<sp/>byte<sp/>left<sp/>shift<sp/>by<sp/>2<sp/>bits<sp/>(painful)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>-1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref><sp/>msbits<sp/>=<sp/>asByte[i]<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref><sp/>prevMsbits<sp/>=<sp/>msbits;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msbits<sp/>=<sp/>asByte[i]<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>|=<sp/>prevMsbits;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>=<sp/>(asByte[1]<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>msbits;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exponent<sp/>&amp;<sp/>0x0001)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>&amp;=<sp/>0x7f;<sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>|=<sp/>0x80;<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>=<sp/>(<ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>)<sp/>exponent<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>asByte[0]<sp/>|=<sp/>0x80;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>IEEE<sp/>format<sp/>effectively<sp/>has<sp/>two<sp/>more<sp/>bits<sp/>in<sp/>the<sp/>mantissa<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>Modcomp<sp/>format.<sp/>The<sp/>least<sp/>significant<sp/>bits<sp/>are<sp/>always<sp/>set<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero.<sp/>Numerically<sp/>it<sp/>would<sp/>be<sp/>better<sp/>to<sp/>set<sp/>them<sp/>randomly<sp/>to<sp/>zero<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>but<sp/>I<sp/>do<sp/>not<sp/>think<sp/>the<sp/>performance<sp/>degradation<sp/>warrents<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>A<sp/>subnormal<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&lt;<sp/>129)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>shift<sp/>mantissa<sp/>to<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref><sp/>shift<sp/>=<sp/>129-exponent;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>a<sp/>series<sp/>of<sp/>8<sp/>or<sp/>less<sp/>bit<sp/>right<sp/>shifts<sp/>(the<sp/>painful<sp/>way).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(shift<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Exponent<sp/>too<sp/>small<sp/>is<sp/>already<sp/>dealt<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref><sp/>thisShift<sp/>=<sp/>shift<sp/>&gt;<sp/>8<sp/>?<sp/>8<sp/>:<sp/>shift;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref><sp/>compShift<sp/>=<sp/>8-thisShift;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[1]<sp/>&amp;=<sp/>0x3f;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref><sp/>lsbits<sp/>=<sp/>asByte[1]<sp/>&lt;&lt;<sp/>compShift;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[1]<sp/>&gt;&gt;=<sp/>thisShift;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>-1)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref><sp/>prevLsbits<sp/>=<sp/>lsbits;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsbits<sp/>=<sp/>asByte[i]<sp/>&lt;&lt;<sp/>compShift;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>&gt;&gt;=<sp/>thisShift;<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>|=<sp/>prevLsbits;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[<ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>-1]<sp/>&gt;&gt;=<sp/>thisShift;<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[<ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>-1]<sp/>|=<sp/>lsbits;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>==<sp/>130)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>shift<sp/>mantissa<sp/>to<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>does<sp/>a<sp/>(painful)<sp/>byte<sp/>by<sp/>byte<sp/>left<sp/>shift<sp/>by<sp/>one<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/><ref refid="ModcompConversion_8h_1a345e2470f142d6f5fabe3781b6e3b573" kindref="member">SIZE_MODCOMP_FLOAT</ref>-1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>msbIsSet<sp/>=<sp/>(asByte[i]<sp/>&amp;<sp/>(0x80))<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>prevMsbIsSet<sp/>=<sp/>msbIsSet;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msbIsSet<sp/>=<sp/>(asByte[i]<sp/>&amp;<sp/>(0x80))<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevMsbIsSet)<sp/>asByte[i]<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>=<sp/>(asByte[1]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msbIsSet)<sp/>asByte[1]<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>exponent<sp/>==<sp/>129.<sp/>No<sp/>need<sp/>to<sp/>shift<sp/>the<sp/>mantissa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>&amp;=<sp/>0x3f;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{</highlight><highlight class="comment">//<sp/>the<sp/>exponent<sp/>is<sp/>always<sp/>zero,<sp/>so<sp/>just<sp/>fixup<sp/>the<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>+=<sp/><ref refid="classcasacore_1_1CanonicalConversion_1a5a076450a389579fac1634d03502ff16" kindref="member">CanonicalConversion::toLocal</ref>(*to,<sp/>asByte);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modcomp<sp/>has<sp/>one<sp/>more<sp/>bit<sp/>in<sp/>the<sp/>exponent<sp/>than<sp/>IEEE<sp/>and<sp/>because<sp/>it<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>an<sp/>implicit<sp/>bit<sp/>two<sp/>less<sp/>bits<sp/>in<sp/>the<sp/>Mantissa.<sp/>It<sp/>does<sp/>not<sp/>have<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>numbers<sp/>like<sp/>NaN<sp/>or<sp/>Infinity.<sp/>The<sp/>Modcomp<sp/>is<sp/>big-endian<sp/>(like<sp/>Sun&apos;s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a6dc8a78fab02369bf8d96f6a3b328dc5" kindref="member">ModcompConversion::toLocal</ref><sp/>(<ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="Assert_8h_1a3a2841df3d3b6a6443634cdb5d39513d" kindref="member">DebugAssert</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref>)<sp/>&gt;=<sp/>2,<sp/>AipsError);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref><sp/>asByte[<ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>retval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>*)<sp/>from;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>to<sp/>+<sp/>nr;<sp/>to<sp/>&lt;<sp/>last;<sp/>to++)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>data<sp/>to<sp/>temporary<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>=<sp/>*data;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>is<sp/>negative<sp/>then<sp/>its<sp/>positive<sp/>value<sp/>is<sp/>the<sp/>twos<sp/>complement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>isNegative<sp/>=<sp/>((asByte[0]<sp/>&amp;<sp/>0x80)<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>takes<sp/>the<sp/>twos<sp/>complement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>asByte[i]<sp/>=<sp/>~asByte[i];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]++;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(asByte[i]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>asByte[i]++;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>isZero<sp/>=<sp/>(asByte[1]<sp/>&amp;<sp/>0x3f)<sp/>==<sp/>0x00;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isZero<sp/>=<sp/>(asByte[i]<sp/>==<sp/>0x00)<sp/>&amp;&amp;<sp/>isZero;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isZero)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Early<sp/>exit<sp/>if<sp/>the<sp/>number<sp/>is<sp/>zero.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>am<sp/>told<sp/>this<sp/>is<sp/>common<sp/>in<sp/>the<sp/>data<sp/>so<sp/>it<sp/>should<sp/>speed<sp/>things<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/><ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>asByte[k]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>signed<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>is<sp/>not<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a53f2a3afd42e85d94a0a009052a442a6" kindref="member">Short</ref><sp/>exponent<sp/>=<sp/>((asByte[0]<sp/>&amp;<sp/>0x7f)<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>((asByte[1]<sp/>&amp;<sp/>0xc0)<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((asByte[1]<sp/>&amp;<sp/>0x20)<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>the<sp/>number<sp/>is<sp/>unnormalised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>so<sp/>try<sp/>to<sp/>normalise<sp/>it.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>does<sp/>a<sp/>byte<sp/>by<sp/>byte<sp/>left<sp/>shift<sp/>by<sp/>one<sp/>bit<sp/>(painful).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/><ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>-1;<sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>msbIsSet<sp/>=<sp/>(asByte[i]<sp/>&amp;<sp/>(0x80))<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1abd5691f9e13acc90d901e4007740ff98" kindref="member">Bool</ref><sp/>prevMsbIsSet<sp/>=<sp/>msbIsSet;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msbIsSet<sp/>=<sp/>(asByte[i]<sp/>&amp;<sp/>(0x80))<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="namespacecasacore_1ad5c850f9e177173e0f7d0ad57091501d" kindref="member">True</ref><sp/>:<sp/><ref refid="namespacecasacore_1a11ef6530f2dc946f54d220fe416bfd41" kindref="member">False</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[i]<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevMsbIsSet)<sp/>asByte[i]<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[1]<sp/>=<sp/>((asByte[1]<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>(asByte[1]<sp/>&amp;<sp/>0xc0);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msbIsSet)<sp/>asByte[1]<sp/>|=<sp/>0x01;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>exponent--;<sp/></highlight><highlight class="comment">//<sp/>Because<sp/>the<sp/>exponent<sp/>can<sp/>go<sp/>negative<sp/>it<sp/>must<sp/>be<sp/>signed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>IEEE<sp/>double<sp/>precision<sp/>the<sp/>exponent<sp/>is<sp/>11<sp/>bits,<sp/>whereas<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modcomp&apos;s<sp/>is<sp/>only<sp/>9<sp/>bits.<sp/>So<sp/>we<sp/>never<sp/>have<sp/>to<sp/>worry<sp/>about:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Numbers<sp/>that<sp/>are<sp/>too<sp/>big<sp/>(overflow).<sp/>Set<sp/>to<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Numbers<sp/>that<sp/>are<sp/>too<sp/>small<sp/>(underflow).<sp/>Set<sp/>to<sp/>zero<sp/>or<sp/>generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>a<sp/>subnormal<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hence,<sp/>unlike<sp/>the<sp/>single<sp/>precision<sp/>code,<sp/>every<sp/>Modcomp<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>number<sp/>can<sp/>be<sp/>represented<sp/>as<sp/>a<sp/>&apos;normal&apos;<sp/>IEEE<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mantissa<sp/>of<sp/>the<sp/>Modcomp<sp/>double<sp/>precision<sp/>number<sp/>is<sp/>54<sp/>bits,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whereas<sp/>it<sp/>is<sp/>52<sp/>bits<sp/>in<sp/>the<sp/>IEEE<sp/>format.<sp/>But<sp/>only<sp/>one<sp/>bit<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>is<sp/>lost<sp/>in<sp/>the<sp/>conversion<sp/>because<sp/>the<sp/>IEEE<sp/>format<sp/>has<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>one<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>mantissa<sp/>whereas<sp/>the<sp/>Modcomp<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>explicit<sp/>one<sp/>(that<sp/>wastes<sp/>a<sp/>bit).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>few<sp/>lines<sp/>assumes<sp/>mantissa<sp/>is<sp/>normalised<sp/>(as<sp/>is<sp/>done<sp/>above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>+=<sp/>766;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>does<sp/>a<sp/>byte<sp/>by<sp/>byte<sp/>right<sp/>shift<sp/>by<sp/>1-bit<sp/>(painful)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a659a7f6002b9b5c7984b02aef64b77ad" kindref="member">uShort</ref><sp/>i<sp/>=<sp/><ref refid="ModcompConversion_8h_1a157d6651df2907929f86a138f210dab7" kindref="member">SIZE_MODCOMP_DOUBLE</ref>-1;<sp/>i<sp/>&gt;<sp/>1;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>asByte[i]<sp/>|=<sp/>(asByte[i-1]<sp/>&amp;<sp/>0x01)<sp/>&lt;&lt;<sp/>7;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>asByte[1]<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[1]<sp/>&amp;=<sp/>0x0f;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[1]<sp/>|=<sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>(exponent<sp/>&amp;<sp/>0x000f)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asByte[0]<sp/>=<sp/><ref refid="namespacecasacore_1a016442aacbe9faceef443b62ab555eb9" kindref="member">uChar</ref>(exponent<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegative)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>|=<sp/>0x80;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>asByte[0]<sp/>&amp;=<sp/>0x7f;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>IEEE<sp/>format<sp/>effectively<sp/>has<sp/>two<sp/>more<sp/>bits<sp/>in<sp/>the<sp/>mantissa<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>Modcomp<sp/>format.<sp/>The<sp/>least<sp/>significant<sp/>bits<sp/>are<sp/>always<sp/>set<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero.<sp/>Numerically<sp/>it<sp/>would<sp/>be<sp/>better<sp/>to<sp/>set<sp/>them<sp/>randomly<sp/>to<sp/>zero<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>but<sp/>I<sp/>do<sp/>not<sp/>think<sp/>the<sp/>performance<sp/>degradation<sp/>warrents<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>+=<sp/><ref refid="classcasacore_1_1CanonicalConversion_1a5a076450a389579fac1634d03502ff16" kindref="member">CanonicalConversion::toLocal</ref>(*to,<sp/>asByte);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a0457f62dcb4a9cc7aee859df0c863eaa" kindref="member">ModcompConversion::fromLocal</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a8e2f856944a61553ab74cd041314f696" kindref="member">Float</ref>*<sp/>from,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dummy<sp/>statements<sp/>to<sp/>suppress<sp/>compiler<sp/>warnings<sp/>about<sp/>unused<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nr<sp/>==<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>==<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>!=<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(AipsError(</highlight><highlight class="stringliteral">&quot;ModcompConversion::fromLocal(Float&amp;,<sp/>const<sp/>void*)<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>convert<sp/>floating<sp/>point<sp/>numbers<sp/>to<sp/>Modcomp<sp/>format&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1ModcompConversion_1a0457f62dcb4a9cc7aee859df0c863eaa" kindref="member">ModcompConversion::fromLocal</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1ada1f75eb2b38067e3eb1af7f5d69ebb2" kindref="member">Double</ref>*<sp/>from,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dummy<sp/>statements<sp/>to<sp/>suppress<sp/>compiler<sp/>warnings<sp/>about<sp/>unused<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nr<sp/>==<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>==<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to<sp/>!=<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(AipsError(</highlight><highlight class="stringliteral">&quot;ModcompConversion::fromLocal(Double&amp;,<sp/>const<sp/>void*)<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>convert<sp/>floating<sp/>point<sp/>numbers<sp/>to<sp/>Modcomp<sp/>format&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size_t<sp/>ModcompConversion::fromLocal<sp/>(void*<sp/>to,<sp/>const<sp/>float*<sp/>from,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert<sp/>(sizeof(uInt)<sp/>==<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert<sp/>(sizeof(float)<sp/>==<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>(char*)to;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>const<sp/>float*<sp/>last<sp/>=<sp/>from<sp/>+<sp/>nr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>while<sp/>(from<sp/>&lt;<sp/>last)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uInt<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>value<sp/>=<sp/>*(uInt*)from;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uInt<sp/>exponent<sp/>=<sp/>(value<sp/>&amp;<sp/>0x7f800000)<sp/>&gt;&gt;<sp/>23;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(exponent<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>+=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(exponent<sp/>&gt;<sp/>255)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>value<sp/>|=<sp/>0x7fffffff;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>value<sp/>=<sp/>(value<sp/>&amp;<sp/>0x807fffff)<sp/>|<sp/>(exponent<sp/>&lt;&lt;<sp/>23);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>moveFloat<sp/>(data,<sp/>&amp;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>data<sp/>+=<sp/>4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>from++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size_t<sp/>ModcompConversion::fromLocal<sp/>(void*<sp/>to,<sp/>const<sp/>double*<sp/>from,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert<sp/>(sizeof(uInt)<sp/>==<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert<sp/>(sizeof(double)<sp/>==<sp/>8);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>(char*)to;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>const<sp/>double*<sp/>last<sp/>=<sp/>from<sp/>+<sp/>nr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>while<sp/>(from<sp/>&lt;<sp/>last)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uInt<sp/>value,<sp/>rest;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#if<sp/>defined(AIPS_LITTLE_ENDIAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>rest<sp/><sp/>=<sp/>((uInt*)from)[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>value<sp/>=<sp/>((uInt*)from)[1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>value<sp/>=<sp/>((uInt*)from)[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>rest<sp/><sp/>=<sp/>((uInt*)from)[1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uInt<sp/>exponent<sp/>=<sp/>(value<sp/>&amp;<sp/>0x7ff00000)<sp/>&gt;&gt;<sp/>20;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>exponent<sp/>-=<sp/>1022-128;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(exponent<sp/>&lt;=<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>rest<sp/><sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(exponent<sp/>&gt;<sp/>255)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>value<sp/>|=<sp/>0x7fffffff;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>rest<sp/><sp/>=<sp/>0xffffffff;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>value<sp/>=<sp/>(value<sp/>&amp;<sp/>0x80000000)<sp/>|<sp/>(exponent<sp/>&lt;&lt;<sp/>23)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&lt;&lt;<sp/>3)<sp/>&amp;<sp/>0x007fffff)<sp/>|<sp/>(rest<sp/>&gt;&gt;<sp/>29);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>rest<sp/>&lt;&lt;=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>moveFloat<sp/>(data,<sp/>&amp;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>moveFloat<sp/>(data+4,<sp/>&amp;rest);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>data<sp/>+=<sp/>8;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>from++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>Variables:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile-command:<sp/>&quot;gmake<sp/>OPTLIB=1<sp/>ModcompConversion;<sp/>cd<sp/>test;<sp/>gmake<sp/>tModcompConversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">}<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="casa/OS/ModcompConversion.cc"/>
  </compounddef>
</doxygen>
