<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Template_8tcc" kind="file" language="C++">
    <compoundname>Template.tcc</compoundname>
    <includedby refid="Template_8h" local="no">casa/Utilities/Template.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>casa/Utilities/Template.tcc</label>
        <link refid="Template_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>casa/Utilities/Template.h</label>
        <link refid="Template_8h"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>Template.cc:<sp/>Canonicalise,<sp/>format<sp/>etc.<sp/>Casacore<sp/>template<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>2001-2005</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_TEMPLATE_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_TEMPLATE_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Includes</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/Template.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/ostream.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/fstream.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/typeinfo.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/stdlib.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/sstream.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Vector.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/Regex.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/Sort.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//#<sp/>Static<sp/>constants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Patterns<sp/>to<sp/>analyse<sp/>an<sp/>input<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::spaces<sp/><sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*$&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::comment<sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*#&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::ifRE<sp/><sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*#if&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::endifRE<sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*#endif[[:space:]]*$&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::elseRE<sp/><sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*#else[[:space:]]*$&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::templateRE<sp/>=<sp/>String(&quot;^[[:space:]]*template[[:space:]&lt;]&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::contRE<sp/><sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::fileRE<sp/><sp/><sp/><sp/><sp/>=<sp/>String(&quot;^[[:space:]]*[[:digit:]]*&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;[[:space:]]*&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;[^.[:space:]]*[.](cc|h)&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::typedefRE<sp/><sp/>=<sp/>String(&quot;^[[:space:]]*typedef[[:space:]]&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::auxtemplRE<sp/>=<sp/>String(&quot;^[[:space:]]*&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;AIPS_[A-Z0-9]*_AUX_TEMPLATES&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;[[:space:](]&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Regex<sp/>Template::namespaceRE=<sp/>String(&quot;^[[:space:]]*#namespace&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Simple<sp/>pattern<sp/>and<sp/>replacements<sp/>to<sp/>make<sp/>canonical<sp/>templates<sp/>files</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATcanon[Ncanon]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:space:]]&quot;),<sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>=&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/><sp/><sp/>*&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;^<sp/>&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>$&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>[(]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>,&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;,&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&amp;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[*][*]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>[*]<sp/>[*]&quot;),<sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[(]<sp/>[*][)]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[(]<sp/>*&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[*]const&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>operator<sp/>&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>operator[<sp/>]*&amp;[<sp/>]*&amp;[(]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>&lt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;<sp/>&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&gt;&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&gt;&gt;&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>20</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;operator&gt;<sp/>&gt;[(]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>template<sp/>*&lt;<sp/>*&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>template<sp/>*&lt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&gt;<sp/>*class<sp/>&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;short<sp/>unsigned<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned<sp/>short<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;short<sp/>signed<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed<sp/>short<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>unsigned<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned<sp/>long<sp/>int&quot;),<sp/><sp/><sp/><sp/>//<sp/>30</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>signed<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed<sp/>long<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned<sp/>char&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed<sp/>char&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned<sp/>short&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;short<sp/>unsigned&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed<sp/>short&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;short<sp/>signed&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;short<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned<sp/>long&quot;),<sp/><sp/><sp/><sp/>//<sp/>40</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>unsigned&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed<sp/>long&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>signed&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>float&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long<sp/>double&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed<sp/>int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/>*;+$&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;<sp/><sp/>*&quot;),<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>50</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&gt;const&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::REPcanon[Ncanon]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>=<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;(&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;,&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;,<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>&amp;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;*<sp/>*&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>**&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;(*)&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;(&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;*<sp/>const&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>operator&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>operator&amp;&amp;(&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&lt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&lt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&gt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&gt;<sp/>&gt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&gt;<sp/>&gt;&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>20</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;operator&gt;&gt;(&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>template<sp/>&lt;&gt;<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>template<sp/>&lt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&gt;<sp/>class<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uShort&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uShort&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Short&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Short&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uLong&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uLong&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>30</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uChar&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Char&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uShort&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uShort&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Short&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Short&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Short&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uLong&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>40</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uLong&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Double&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;lDouble&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uInt&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Int&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>50</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&gt;<sp/>const&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATcanon20[Ncanon2]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]char[^[:alnum:]_]&quot;),<sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]short[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]unsigned[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]signed[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]int[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]long[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]float[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]double[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]complex&lt;Float&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]complex&lt;Double&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;Complex<sp/>&gt;&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;DComplex<sp/>&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]bool[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;std::Complex&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;std::DComplex&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATcanon21[Ncanon2]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;char&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;short&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;unsigned&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;signed&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;int&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;long&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;float&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;double&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;complex&lt;Float&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;complex&lt;Double&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;Complex<sp/>&gt;&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;DComplex<sp/>&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;bool&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;std::Complex&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;std::DComplex&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::REPcanon2[Ncanon2]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Char&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Short&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;uInt&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Int&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Int&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Float&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Double&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Complex&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;DComplex&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&lt;Complex&gt;&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&lt;DComplex&gt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Bool&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;std::complex&lt;Float&gt;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;std::complex&lt;Double&gt;&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/>Make<sp/>canonical<sp/>numbers<sp/>of<sp/>4<sp/>digits<sp/>minimum</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATnmin[Nnmin]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;^[^[:digit:]]&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;^[[:digit:]]<sp/>&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;^[[:digit:]][[:digit:]]<sp/>&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;^[[:digit:]][[:digit:]][[:digit:]]<sp/>&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::REPnmin[Nnmin]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;0000<sp/>&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;000&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;00&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;0&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/>Make<sp/>canonical<sp/>numbers<sp/>of<sp/>4<sp/>digits<sp/>maximum</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATnmax[Nnmax]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;^[[:digit:]][[:digit:]][[:digit:]][[:digit:]][[:digit:]]+<sp/>&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::REPnmax[Nnmax]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:digit:]][[:digit:]][[:digit:]][[:digit:]]<sp/>&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Patterns<sp/>to<sp/>split<sp/>off<sp/>number<sp/>and<sp/>name</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::splitnum<sp/>=<sp/>String(&quot;^[[:digit:]]+<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::splitnam<sp/>=<sp/>String(&quot;^[^<sp/>]+<sp/>&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Patterns<sp/>to<sp/>check<sp/>the<sp/>saved<sp/>template<sp/>line</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sifRE(&quot;^#if&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::stemRE(&quot;^template&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sconstRE(&quot;([(]<sp/>*const|,<sp/>*const|&lt;<sp/>*const)&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sretRE1(&quot;^template<sp/>class<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sretRE2(&quot;^template<sp/>[^<sp/>]*[(]&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sretRE3(&quot;^template<sp/>&lt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sretRE4(&quot;[^t][^o][^r&gt;]&gt;[(]&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::stypedefRE(&quot;^typedef&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::sauxtemplRE(&quot;^AIPS_[A-Z0-9]*_AUX_TEMPLATES&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::snamespaceRE(&quot;^#namespace&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Replacement<sp/>patterns<sp/>for<sp/>ifs<sp/>in<sp/>saved<sp/>line</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::PATinif[Ninif]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&amp;<sp/>&amp;&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;=<sp/>=&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&lt;<sp/>=&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;&gt;&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::REPinif[Ninif]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&amp;&amp;&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;==&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>&lt;<sp/>&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;&lt;=&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>&gt;&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>for<sp/>finding<sp/>real<sp/>templates<sp/>for<sp/>duplicate<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::classprelude(&quot;^.*template[[:space:]]*class[[:space:]]*&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::functionprelude(&quot;^.*template[[:space:]]*&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::forwardprelude(&quot;^.*template[[:space:]]*&lt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::funcnameprelude(&quot;[^[:space:]]*[:(]&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::mylistprelude(&quot;^[[:space:]]*[[:digit:]]+:<sp/>&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Data<sp/>to<sp/>remove<sp/>spaces<sp/>at<sp/>begin,<sp/>end,<sp/>make<sp/>single,<sp/>count/remove<sp/>const</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::leadsp(&quot;^[[:space:]]+&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::endsp(&quot;[[:space:]]+$&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::mulsp(&quot;[[:space:]]+&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::constsp(&quot;const&quot;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::nullsp;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::singlesp(&quot;<sp/>&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Patterns<sp/>to<sp/>make<sp/>all<sp/>typedefs<sp/>comparisons<sp/>for<sp/>duplicates<sp/>possible</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Note<sp/>that<sp/>the<sp/>first<sp/>three<sp/>should<sp/>be<sp/>in<sp/>that<sp/>position<sp/>for<sp/>run-time</highlight></codeline>
<codeline><highlight class="normal">//<sp/>change<sp/>on<sp/>some<sp/>systems.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATtypedef0[Ntypedef]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]FitsLong[^[:alnum:]_]&quot;),<sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[:alnum:]_]lDouble[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[^[[:alnum:]_]Long[^[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]DataStatus[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]LogicalRecord[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]TapeHeader[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Convolver&lt;Double&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Convolver&lt;Float&gt;][[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcValue&lt;Bool&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcValue&lt;Double&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcValue&lt;Int&gt;[[:alnum:]_]&quot;),<sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcVector&lt;Bool&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcVector&lt;Double&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcVector&lt;Int&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]AipsrcVector&lt;String&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]LogicalArrayElem[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Array&lt;Bool&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]MaskedArray&lt;Bool&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Cube&lt;Bool&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Matrix&lt;Bool&gt;[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Vector&lt;Bool&gt;[[:alnum:]_]&quot;),<sp/><sp/><sp/>//<sp/>20</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]MeasurementSet[[:alnum:]_]&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;[[:alnum:]_]Quantum&lt;Double&gt;[[:alnum:]_]&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Regex<sp/>Template::PATtypedef1[Ntypedef]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;FitsLong&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;lDouble&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Long&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;DataStatus&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;LogicalRecord&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;TapeHeader&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Convolver&lt;Double&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Convolver&lt;Float&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcValue&lt;Bool&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcValue&lt;Double&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcValue&lt;Int&gt;&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcVector&lt;Bool&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcVector&lt;Double&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcVector&lt;Int&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;AipsrcVector&lt;String&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;LogicalArrayElem&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Array&lt;Bool&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;MaskedArray&lt;Bool&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Cube&lt;Bool&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Matrix&lt;Bool&gt;&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Vector&lt;Bool&gt;&quot;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>20</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;MeasurementSet&quot;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String(&quot;Quantum&lt;Double&gt;&quot;)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">String<sp/>Template::REPtypedef[Ntypedef]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>00</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;lDouble&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Long&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;DataStatusStructure&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;LogicalRecordStructure&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;TapeHeader&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;DoubleConvolver&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;FloatConvolver&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcBool&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcDouble&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcInt&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcVBool&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcVDouble&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcVInt&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;AipsrcVString&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Bool&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;LogicalArray&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;MaskedArrayLogical&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;LogicalCube&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;LogicalMatrix&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;LogicalVector&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//20</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;MS&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Quantity&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Name<sp/>of<sp/>repository<sp/>files</highlight></codeline>
<codeline><highlight class="normal">const<sp/>String<sp/>Template::reposName<sp/>=<sp/>&quot;/_ReposFiller/templates&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Constructors</highlight></codeline>
<codeline><highlight class="normal">Template::Template()<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_p(100),<sp/>count_p(0),<sp/>tcount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>comout_p(100),<sp/>comptr_p(100),<sp/>ccount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isSplit_p(False),<sp/>dcount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nstring_p(0),<sp/>allstring_p(0),<sp/>namstring_p(0),<sp/>nval_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdflist_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdcount_p(0),<sp/>tdlist_p(100),<sp/>tdfile_p(100),<sp/>tdline_p(100),<sp/>tdname_p(0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reset();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Template::Template(const<sp/>Vector&lt;String&gt;<sp/>&amp;files)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_p(100),<sp/>count_p(0),<sp/>tcount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>comout_p(100),<sp/>comptr_p(100),<sp/>ccount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isSplit_p(False),<sp/>dcount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nstring_p(0),<sp/>allstring_p(0),<sp/>namstring_p(0),<sp/>nval_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdflist_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdcount_p(0),<sp/>tdlist_p(100),<sp/>tdfile_p(100),<sp/>tdline_p(100),<sp/>tdname_p(0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>read(files);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Template::Template(const<sp/>String<sp/>&amp;filename)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_p(100),<sp/>count_p(0),<sp/>tcount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>comout_p(100),<sp/>comptr_p(100),<sp/>ccount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isSplit_p(False),<sp/>dcount_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nstring_p(0),<sp/>allstring_p(0),<sp/>namstring_p(0),<sp/>nval_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdflist_p(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdcount_p(0),<sp/>tdlist_p(100),<sp/>tdfile_p(100),<sp/>tdline_p(100),<sp/>tdname_p(0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>read(filename);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Destructor</highlight></codeline>
<codeline><highlight class="normal">Template::~Template()<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Member<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Template::reset()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count_p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tcount_p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ccount_p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isSplit_p<sp/>=<sp/>False;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dcount_p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdcount_p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdflist_p.resize(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Make<sp/>sure<sp/>all<sp/>(known)<sp/>variable<sp/>typedefs<sp/>are<sp/>catered<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(typeid(FitsLong)<sp/>==<sp/>typeid(Int))<sp/>REPtypedef[0]<sp/>=<sp/>&quot;Int&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(typeid(lDouble)<sp/>==<sp/>typeid(Double))<sp/>REPtypedef[1]<sp/>=<sp/>&quot;Double&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(typeid(Long)<sp/>==<sp/>typeid(Int))<sp/>REPtypedef[2]<sp/>=<sp/>&quot;Int&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::read(const<sp/>Vector&lt;String&gt;<sp/>&amp;files)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>i=0;<sp/>i<sp/>&lt;<sp/>files.nelements();<sp/>i++)<sp/>{<sp/>//<sp/>for<sp/>each<sp/>file...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>read(files(i));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::read(const<sp/>String<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Open<sp/>and<sp/>read<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ifstream<sp/>file(filename.chars(),<sp/>ios::in);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!file)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Cannot<sp/>open<sp/>input<sp/>file<sp/>&quot;<sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Save<sp/>filename<sp/>in<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdflist_p.resize(tdflist_p.nelements()+1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdflist_p[tdflist_p.nelements()-1]<sp/>=<sp/>filename;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>extracted;<sp/><sp/><sp/><sp/><sp/>//<sp/>a<sp/>single<sp/>input<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>combine;<sp/><sp/><sp/><sp/><sp/>//<sp/>a<sp/>full<sp/>combined<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uInt<sp/>c1<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>input<sp/>line<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bool<sp/>ok(True);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(ok<sp/>&amp;&amp;<sp/>(((extracted<sp/>=<sp/>&quot;&quot;),<sp/>(ok<sp/>=<sp/>getline(file,<sp/>extracted)))<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>!combine.empty()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>c1++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Count<sp/>input<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bool<sp/>err<sp/>=<sp/>False;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Skip<sp/>empty<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((extracted.empty()<sp/>||<sp/>extracted.contains(spaces))<sp/>&amp;&amp;<sp/>ok)<sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>correct<sp/>first<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(combine.empty()<sp/>&amp;&amp;<sp/>ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Comment<sp/>allowed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(extracted.contains(comment))<sp/>setComment(extracted,<sp/>combine.empty());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>of<sp/>entry<sp/>allowed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(extracted.contains(fileRE))<sp/>combine<sp/>=<sp/>extracted;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>err<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!err)<sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>regular<sp/>extension<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((extracted.contains(ifRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(endifRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(elseRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(templateRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(contRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(typedefRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(auxtemplRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>extracted.contains(namespaceRE))<sp/>&amp;&amp;<sp/>ok<sp/>&amp;&amp;<sp/>!err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Replace<sp/>a<sp/>continuation<sp/>include<sp/>line<sp/>with<sp/>/=/<sp/>pattern<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(extracted.contains(contRE))<sp/>extracted.gsub(contRE,<sp/>String(&quot;/=/&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>+=<sp/>String(&quot;<sp/>&quot;)<sp/>+<sp/>extracted;<sp/>//<sp/>make<sp/>one<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Find<sp/>proper<sp/>templates<sp/>for<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(extracted.contains(templateRE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(extracted.contains(forwardprelude))<sp/>continue;<sp/>//<sp/>skip<sp/>forward<sp/>declarations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(extracted.contains(mylistprelude))<sp/>{<sp/><sp/><sp/><sp/>//<sp/>special<sp/>nnnn:<sp/>list<sp/>format</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>extracted<sp/>=<sp/>extracted.after(mylistprelude);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(extracted.contains(classprelude))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>extracted<sp/>=<sp/>extracted.after(classprelude);<sp/><sp/><sp/><sp/>//<sp/>template<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(extracted.contains(functionprelude))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>extracted<sp/>=<sp/>extracted.after(functionprelude);<sp/><sp/><sp/>//<sp/>template<sp/>global</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(extracted.contains(funcnameprelude))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extracted<sp/>=<sp/>extracted.from(funcnameprelude);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>continue;<sp/><sp/><sp/><sp/>//<sp/>unknown<sp/>entry</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!extracted.empty())<sp/>{<sp/>//<sp/>save<sp/>the<sp/>entry</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(tdcount_p<sp/>&gt;=<sp/>tdlist_p.nelements())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tdlist_p.resize(tdcount_p+100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tdfile_p.resize(tdcount_p+100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tdline_p.resize(tdcount_p+100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tdlist_p[tdcount_p]<sp/><sp/><sp/>=<sp/>extracted;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tdfile_p[tdcount_p]<sp/><sp/><sp/>=<sp/>tdflist_p.nelements()-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tdline_p[tdcount_p++]<sp/>=<sp/>c1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>comment<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ok<sp/>&amp;&amp;<sp/>!err<sp/>&amp;&amp;<sp/>extracted.contains(comment))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setComment(extracted,<sp/>combine.empty());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>an<sp/>initial<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((ok<sp/>&amp;&amp;<sp/>!err<sp/>&amp;&amp;<sp/>extracted.contains(fileRE))<sp/>||<sp/>!ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!combine.empty())<sp/>setOutput(combine);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>extracted;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>err<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(err)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Warning:<sp/>illegal<sp/>entry<sp/>commented<sp/>out<sp/>near<sp/>line<sp/>&quot;<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c1<sp/>&lt;&lt;<sp/>&quot;<sp/>in<sp/>&quot;<sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/>&quot;:\n\t&quot;<sp/>&lt;&lt;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>extracted(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((extracted.length()<sp/>&lt;=<sp/>60)<sp/>?<sp/>extracted.length()<sp/>:<sp/>60))<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;<sp/>...&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;extracted.length();<sp/>j+=60)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ostringstream<sp/>text;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>text<sp/>&lt;&lt;<sp/>&quot;#.&quot;<sp/>&lt;&lt;<sp/>j/60<sp/>&lt;&lt;<sp/>&quot;.\t&quot;<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>extracted(j,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((extracted.length()-j<sp/>&lt;=<sp/>60)<sp/>?<sp/>extracted.length()<sp/>:<sp/>60));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>setComment(String(text),<sp/>combine.empty());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!ok)<sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::canonical(const<sp/>Bool<sp/>tmplonly)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Reformat<sp/>all<sp/>entries<sp/>using<sp/>the<sp/>replacement<sp/>patterns</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>combine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>lpat;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>A<sp/>run-time<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>lrep;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>A<sp/>run-time<sp/>replacement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!tmplonly)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>i=0;<sp/>i&lt;count_p;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>output_p[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Ncanon;<sp/>j++)<sp/>combine.gsub(PATcanon[j],<sp/>REPcanon[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Ncanon2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(combine.contains(PATcanon20[j]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lpat<sp/>=<sp/>combine.at(PATcanon20[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lpat<sp/>=<sp/>lpat.through(PATcanon20[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lrep<sp/>=<sp/>lpat;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lrep.gsub(PATcanon21[j],<sp/>REPcanon2[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine.gsub(lpat,<sp/>lrep);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Nnmin;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(combine.contains(PATnmin[j]))<sp/>combine<sp/>=<sp/>REPnmin[j]<sp/>+<sp/>combine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Nnmax;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(combine.contains(PATnmax[j]))<sp/>combine<sp/>=<sp/>combine.from(REPnmax[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_p[i]<sp/>=<sp/>combine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>all<sp/>template<sp/>entries</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tdname_p.resize(tdcount_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>i=0;<sp/>i&lt;tdcount_p;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine<sp/>=<sp/>tdlist_p[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Ncanon;<sp/>j++)<sp/>combine.gsub(PATcanon[j],<sp/>REPcanon[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Ncanon2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(combine.contains(PATcanon20[j]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lpat<sp/>=<sp/>combine.at(PATcanon20[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lpat<sp/>=<sp/>lpat.through(PATcanon20[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lrep<sp/>=<sp/>lpat;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lrep.gsub(PATcanon21[j],<sp/>REPcanon2[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>combine.gsub(lpat,<sp/>lrep);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Remove<sp/>leading/trailing<sp/>spaces<sp/>and<sp/>singlefy<sp/>spaces</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine.gsub(leadsp,<sp/>nullsp);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine.gsub(endsp,<sp/>nullsp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine.gsub(mulsp,<sp/>singlesp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tdlist_p[i]<sp/>=<sp/>combine;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Cater<sp/>for<sp/>typedef<sp/>usage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;Ntypedef;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Make<sp/>sure<sp/>no<sp/>infinite<sp/>loops</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(REPtypedef[j]<sp/>!=<sp/>PATtypedef1[j].regexp())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(combine.contains(PATtypedef0[j]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lpat<sp/>=<sp/>combine.at(PATtypedef0[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lpat<sp/>=<sp/>lpat.through(PATtypedef0[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lrep<sp/>=<sp/>lpat;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lrep.gsub(PATtypedef1[j],<sp/>REPtypedef[j]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine.gsub(lpat,<sp/>lrep);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Remove<sp/>all<sp/>spaces,<sp/>and<sp/>just<sp/>count<sp/>&apos;const&apos;<sp/>since<sp/>they<sp/>can<sp/>be<sp/>at</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>different<sp/>places.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine.gsub(mulsp,<sp/>nullsp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>combine<sp/>+=<sp/>Char(&apos;0&apos;<sp/>+<sp/>combine.gsub(constsp,<sp/>nullsp));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tdname_p[i]<sp/>=<sp/>combine;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::splitName()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Only<sp/>split<sp/>if<sp/>necessary</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(isSplit_p)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Make<sp/>correct<sp/>sizes<sp/>available</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nstring_p.resize(count_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>allstring_p.resize(count_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>namstring_p.resize(count_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nval_p.resize(count_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Split</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>i=0;<sp/>i&lt;count_p;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nstring_p[i]<sp/>=<sp/>output_p[i].through(splitnum);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>allstring_p[i]<sp/>=<sp/>output_p[i].after(splitnum);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>namstring_p[i]<sp/>=<sp/>allstring_p[i].through(splitnam);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nval_p[i]<sp/>=<sp/>atoi(nstring_p[i].chars());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>isSplit_p<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::sortName(const<sp/>Bool<sp/>renumber)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Split<sp/>first<sp/>if<sp/>necessary</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>splitName();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Indexes<sp/>and<sp/>specify<sp/>sort</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Vector&lt;uInt&gt;<sp/>inx;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Sort<sp/>sort;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sort.sortKey(allstring_p.storage(),<sp/>TpString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sort.sortKey(nstring_p.storage(),<sp/>TpString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sort<sp/>and<sp/>fill<sp/>missing<sp/>numbers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sort.sort(inx,<sp/>count_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Make<sp/>numbers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(renumber)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>prev;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>ident(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;count_p;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(namstring_p[inx(j)]<sp/>==<sp/>prev)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ident<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ident<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>prev<sp/>=<sp/>namstring_p[inx(j)];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ostringstream<sp/>text;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>&lt;&lt;<sp/>ident;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nstring_p[inx(j)]<sp/>=<sp/>String(text)<sp/>+<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>prev;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Int<sp/>pid(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>mid(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>k=0;<sp/>k&lt;count_p;<sp/>k++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(prev.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>prev<sp/>=<sp/>namstring_p[inx(k)];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pid<sp/>=<sp/>k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mid<sp/>=<sp/>990;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uInt<sp/>j<sp/>=<sp/>k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(j&lt;count_p<sp/>&amp;&amp;<sp/>namstring_p[inx(j)]<sp/>==<sp/>prev)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(nval_p[inx(j)]<sp/>&gt;<sp/>mid)<sp/>?<sp/>nval_p[inx(j)]<sp/>:<sp/>mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mid<sp/>=<sp/>(mid/10)*10<sp/>+<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(prev<sp/>==<sp/>namstring_p[inx(k)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nval_p[inx(k)]<sp/>&lt;<sp/>1000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ostringstream<sp/>text;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>&lt;&lt;<sp/>mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nstring_p[inx(k)]<sp/>=<sp/>String(text)<sp/>+<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nval_p[inx(k)]<sp/>=<sp/>mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Int<sp/>j=k-1;<sp/>j&gt;=pid;<sp/>j--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nval_p[inx(k)]<sp/>==<sp/>nval_p[inx(j)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostringstream<sp/>text;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>&lt;&lt;<sp/>mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namstring_p[inx(k)]<sp/>=<sp/>String(text)<sp/>+<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nval_p[inx(k)]<sp/>=<sp/>mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>prev<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>k--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Make<sp/>new<sp/>full<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;count_p;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output_p[j]<sp/>=<sp/>nstring_p[inx(j)]<sp/>+<sp/>allstring_p[inx(j)];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Re-sort<sp/>comments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;ccount_p;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(comptr_p[j]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>comptr_p[j]<sp/>&lt;<sp/>Int(count_p))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j3=0;<sp/>j3&lt;count_p;<sp/>j3++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(comptr_p[j]<sp/>==<sp/>Int(inx(j3)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comptr_p[j]<sp/>=<sp/>j3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::writeOut(ostream<sp/>&amp;os,<sp/>const<sp/>Bool<sp/>warn)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Constants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>const<sp/>String<sp/>sp<sp/>=<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Int<sp/>Nsplit<sp/>=<sp/>2000;<sp/><sp/>//<sp/>#<sp/>of<sp/>fields<sp/>in<sp/>one<sp/>entry<sp/>must<sp/>fit<sp/>in<sp/>here</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Local<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>spf[Nsplit];<sp/><sp/><sp/>//<sp/>Fields<sp/>in<sp/>full<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Int<sp/>c1<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/>//<sp/>Output<sp/>line<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bool<sp/>cwarn<sp/>=<sp/>False;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>not<sp/>give<sp/>a<sp/>compressed<sp/>warning</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Write<sp/>initial<sp/>comments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;ccount_p;<sp/>j++)<sp/>{<sp/>//<sp/>initial<sp/>comments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(comptr_p[j]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>comout_p[j]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>i=0;<sp/>i&lt;count_p;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Split<sp/>output<sp/>at<sp/>spaces</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>nsp<sp/>=<sp/>split(output_p[i],<sp/>spf,<sp/>Nsplit,<sp/>sp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Int<sp/>c<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Level<sp/>of<sp/>indentation<sp/>for<sp/>#if</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bool<sp/>pr<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>w;<sp/><sp/><sp/><sp/><sp/>//<sp/>Line<sp/>indentation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>v;<sp/><sp/><sp/><sp/><sp/>//<sp/>Line<sp/>start<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=0;<sp/>j&lt;=nsp;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>not<sp/>the<sp/>first<sp/>element<sp/>of<sp/>a<sp/>line;<sp/>or<sp/>it<sp/>is<sp/>the<sp/>last</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(j<sp/>==<sp/>nsp<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j]<sp/>==<sp/>&quot;template&quot;<sp/>||<sp/>spf[j]<sp/>==<sp/>&quot;#endif&quot;<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j]<sp/>==<sp/>&quot;#else&quot;<sp/>||<sp/>spf[j]<sp/>==<sp/>&quot;/=/&quot;<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j].contains(sifRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j].contains(stypedefRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j].contains(sauxtemplRE)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j].contains(snamespaceRE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(k<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>m=p;<sp/>m<sp/>&lt;<sp/>p+k;<sp/>m++)<sp/>{<sp/><sp/>//<sp/>all<sp/>fields<sp/>found<sp/>till<sp/>now</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pr<sp/>&amp;&amp;<sp/>v.length()&gt;40)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>w<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&quot;=<sp/>&quot;;<sp/><sp/><sp/>//<sp/>Indicate<sp/>follow-on<sp/>include</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>&quot;;<sp/><sp/>//<sp/>Indent</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int<sp/>i1=0;<sp/>i1&lt;c;<sp/>i1++)<sp/>w<sp/>+=<sp/>&quot;<sp/><sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>spf[m]<sp/>+<sp/>sp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>c1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Format<sp/>the<sp/>fields<sp/>after<sp/>#if</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(v.contains(sifRE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j3=0;<sp/>j3&lt;Ninif;<sp/>j3++)<sp/>v.gsub(PATinif[j3],<sp/>REPinif[j3]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Format<sp/>fields<sp/>in<sp/>template<sp/>and<sp/>count<sp/>them</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(v.contains(stemRE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!v.contains(sretRE3))<sp/>tcount_p++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(v.contains(sconstRE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Error:<sp/><sp/><sp/>non-canonical<sp/>position<sp/>of<sp/>const<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;at<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>c1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!(v.contains(sretRE1)<sp/>||<sp/>v.contains(sretRE3)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(v.contains(sretRE2))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Error:<sp/><sp/><sp/>missing<sp/>return<sp/>type<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;at<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>c1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(v.contains(sretRE4))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(warn)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Warning:<sp/>superfluous<sp/>template<sp/>argument<sp/>given<sp/>--<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;remove<sp/>at<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>c1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>cwarn<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>w<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(j<sp/>==<sp/>nsp)<sp/>break;<sp/><sp/><sp/><sp/>//<sp/>ready<sp/>with<sp/>element</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>1;<sp/>p<sp/>=<sp/>j;<sp/>w<sp/>=<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(spf[j]<sp/>==<sp/>&quot;#endif&quot;<sp/>||<sp/>spf[j]<sp/>==<sp/>&quot;#else&quot;)<sp/>c--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(Int<sp/>i1=0;<sp/>i1&lt;c;<sp/>i1++)<sp/>w<sp/>+=<sp/>&quot;<sp/><sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(spf[j]<sp/>==<sp/>&quot;#else&quot;<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>0)<sp/>cerr<sp/>&lt;&lt;<sp/>&quot;SEVERE:<sp/>#else<sp/>without<sp/>#if<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;near<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>c1+1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(spf[j].contains(sifRE)<sp/>||<sp/>spf[j]<sp/>==<sp/>&quot;#else&quot;)<sp/>c++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(spf[j]<sp/>==<sp/>&quot;/=/&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spf[j]<sp/>=<sp/>&quot;=&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pr<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>pr<sp/>=<sp/>False;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(c&lt;0)<sp/>cerr<sp/>&lt;&lt;<sp/>&quot;SEVERE:<sp/>too<sp/>many<sp/>#endif<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;near<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>c1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(c&gt;0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c--;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int<sp/>i1=0;<sp/>i1&lt;c;<sp/>i1++)<sp/>w<sp/>+=<sp/>&quot;<sp/><sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Warning:<sp/>included<sp/>missing<sp/>#endif<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;at<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>c1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>w<sp/>&lt;&lt;<sp/>&quot;#endif&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j1=0;<sp/>j1&lt;ccount_p;<sp/>j1++)<sp/>{<sp/><sp/>//<sp/>comments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(comptr_p[j1]<sp/>==<sp/>Int(i))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>comout_p[j1]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>j2=0;<sp/>j2&lt;ccount_p;<sp/>j2++)<sp/>{<sp/><sp/><sp/><sp/>//<sp/>comments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(comptr_p[j2]<sp/>&gt;=<sp/>Int(count_p))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>comout_p[j2]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cwarn)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;Warning:<sp/>One<sp/>or<sp/>more<sp/>possibly<sp/>superfluous<sp/>template<sp/>arguments<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;given.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Run<sp/>reident<sp/>with<sp/>the<sp/>-v<sp/>(verbose)<sp/>switch<sp/>to<sp/>learn<sp/>more&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::writeDup(ostream<sp/>&amp;os,<sp/>const<sp/>String<sp/>&amp;userFile,<sp/>Bool<sp/>isSys)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sort<sp/>the<sp/>name<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Vector&lt;uInt&gt;<sp/>inx;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Sort<sp/>sort;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sort.sortKey(tdname_p.storage(),<sp/>TpString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sort.sort(inx,<sp/>tdcount_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uInt<sp/>i(0);<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Count<sp/>the<sp/>entries</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scan<sp/>all<sp/>entries<sp/>for<sp/>groups</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dcount_p<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(i&lt;tdcount_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>n=0;<sp/><sp/><sp/><sp/><sp/>//<sp/>Length<sp/>of<sp/>group</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>j=i;<sp/>j&lt;tdcount_p;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tdname_p[inx(j)]<sp/>==<sp/>tdname_p[inx(i)])<sp/>n++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Found<sp/>duplicates</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(n&gt;1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>-s<sp/>switch<sp/>given</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Bool<sp/>doit<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(isSys)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>doit<sp/>=<sp/>False;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Check<sp/>if<sp/>_ReposFiller<sp/>mentioned</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>j=i;<sp/>j&lt;i+n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(tdflist_p[tdfile_p[inx(j)]].contains(reposName))<sp/>doit<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>for<sp/>same<sp/>file<sp/>duplicates</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>k=j+1;<sp/>k&lt;i+n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tdflist_p[tdfile_p[inx(j)]]<sp/>==</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tdflist_p[tdfile_p[inx(k)]])<sp/>doit<sp/>=<sp/>True;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(doit)<sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(doit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>&quot;---------------------------------------------&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(uInt<sp/>j=i;<sp/>j&lt;i+n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>tdlist_p[inx(j)]<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/><sp/>&quot;<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tdflist_p[tdfile_p[inx(j)]]<sp/>&lt;&lt;<sp/>&quot;<sp/>line<sp/>&quot;<sp/>&lt;&lt;<sp/>tdline_p[inx(j)];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(tdflist_p[tdfile_p[inx(j)]]<sp/>==<sp/>userFile)<sp/>os<sp/>&lt;&lt;<sp/>&quot;<sp/>***&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>os<sp/>&lt;&lt;<sp/>&quot;<sp/>-&quot;<sp/>&lt;&lt;<sp/>endl;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dcount_p<sp/>+=<sp/>n;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>n;<sp/><sp/><sp/><sp/><sp/>//<sp/>next<sp/>group</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::setComment(const<sp/>String<sp/>&amp;txt,<sp/>const<sp/>Bool<sp/>atstart)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Resize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(ccount_p<sp/>&gt;=<sp/>comout_p.nelements())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>comout_p.resize(ccount_p+100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>comptr_p.resize(ccount_p+100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>comout_p[ccount_p]<sp/>=<sp/>txt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>comptr_p[ccount_p]<sp/>=<sp/>count_p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(atstart<sp/>&amp;&amp;<sp/>count_p<sp/>==<sp/>0)<sp/>comptr_p[ccount_p]<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ccount_p++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>Template::setOutput(const<sp/>String<sp/>&amp;txt)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(count_p<sp/>&gt;=<sp/>output_p.nelements())<sp/>output_p.resize(count_p+100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output_p[count_p++]<sp/>=<sp/>txt;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/Utilities/Template.tcc"/>
  </compounddef>
</doxygen>
