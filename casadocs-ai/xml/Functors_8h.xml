<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Functors_8h" kind="file" language="C++">
    <compoundname>Functors.h</compoundname>
    <includes refid="aips_8h" local="no">casacore/casa/aips.h</includes>
    <includes refid="Math_8h" local="no">casacore/casa/BasicMath/Math.h</includes>
    <includes refid="Complex_8h" local="no">casacore/casa/BasicSL/Complex.h</includes>
    <includes refid="String_8h" local="no">casacore/casa/BasicSL/String.h</includes>
    <includes local="no">functional</includes>
    <includedby refid="StdLogical_8h" local="no">casa/BasicMath/StdLogical.h</includedby>
    <includedby refid="STLMath_8h" local="no">casa/BasicSL/STLMath.h</includedby>
    <includedby refid="MArrayLogical_8h" local="no">tables/TaQL/MArrayLogical.h</includedby>
    <includedby refid="MArrayMath_8h" local="no">tables/TaQL/MArrayMath.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>casacore/casa/BasicMath/Math.h</label>
        <link refid="Math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>casacore/casa/aipsenv.h</label>
        <link refid="aipsenv_8h"/>
      </node>
      <node id="12">
        <label>casacore/casa/BasicSL/Complex.h</label>
        <link refid="Complex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="22">
        <label>casacore/casa/iostream.h</label>
        <link refid="iostream_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>casacore/casa/stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>casacore/casa/iosfwd.h</label>
        <link refid="iosfwd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>casacore/casa/aipstype.h</label>
        <link refid="aipstype_8h"/>
      </node>
      <node id="18">
        <label>casacore/casa/iosstrfwd.h</label>
        <link refid="iosstrfwd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>casacore/casa/math.h</label>
        <link refid="math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="15">
        <label>casacore/casa/complex.h</label>
        <link refid="complex_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>casacore/casa/aips.h</label>
        <link refid="aips_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>casacore/casa/BasicSL/Complexfwd.h</label>
        <link refid="Complexfwd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>casa/BasicMath/Functors.h</label>
        <link refid="Functors_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>sstream</label>
      </node>
      <node id="20">
        <label>iosfwd</label>
      </node>
      <node id="11">
        <label>cstdlib</label>
      </node>
      <node id="23">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>casacore/casa/aipsdef.h</label>
        <link refid="aipsdef_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>casacore/casa/sstream.h</label>
        <link refid="sstream_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>complex</label>
      </node>
      <node id="5">
        <label>casacore/casa/aipsxtype.h</label>
        <link refid="aipsxtype_8h"/>
      </node>
      <node id="16">
        <label>casacore/casa/BasicSL/String.h</label>
        <link refid="String_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15">
        <label>tables/TaQL/ExprMathNodeArray.cc</label>
        <link refid="ExprMathNodeArray_8cc"/>
      </node>
      <node id="11">
        <label>tables/TaQL/ExprLogicNodeArray.cc</label>
        <link refid="ExprLogicNodeArray_8cc"/>
      </node>
      <node id="10">
        <label>tables/TaQL/ExprGroupAggrFuncArray.cc</label>
        <link refid="ExprGroupAggrFuncArray_8cc"/>
      </node>
      <node id="12">
        <label>tables/TaQL/ExprNodeArray.cc</label>
        <link refid="ExprNodeArray_8cc"/>
      </node>
      <node id="14">
        <label>tables/TaQL/MArrayMath.h</label>
        <link refid="MArrayMath_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tables/TaQL/ExprFuncNode.cc</label>
        <link refid="ExprFuncNode_8cc"/>
      </node>
      <node id="3">
        <label>casa/BasicSL/STLMath.h</label>
        <link refid="STLMath_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>tables/TaQL/ExprFuncNodeArray.cc</label>
        <link refid="ExprFuncNodeArray_8cc"/>
      </node>
      <node id="5">
        <label>casa/BasicSL.h</label>
        <link refid="BasicSL_8h"/>
      </node>
      <node id="1">
        <label>casa/BasicMath/Functors.h</label>
        <link refid="Functors_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tables/TaQL/ExprNodeRep.cc</label>
        <link refid="ExprNodeRep_8cc"/>
      </node>
      <node id="2">
        <label>casa/BasicMath/StdLogical.h</label>
        <link refid="StdLogical_8h"/>
      </node>
      <node id="6">
        <label>tables/Tables/BaseTable.cc</label>
        <link refid="BaseTable_8cc"/>
      </node>
      <node id="4">
        <label>casa/BasicSL/STLMath.cc</label>
        <link refid="STLMath_8cc"/>
      </node>
      <node id="7">
        <label>tables/TaQL/MArrayLogical.h</label>
        <link refid="MArrayLogical_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcasacore_1_1Plus" prot="public">casacore::Plus</innerclass>
    <innerclass refid="structcasacore_1_1Minus" prot="public">casacore::Minus</innerclass>
    <innerclass refid="structcasacore_1_1Multiplies" prot="public">casacore::Multiplies</innerclass>
    <innerclass refid="structcasacore_1_1Divides" prot="public">casacore::Divides</innerclass>
    <innerclass refid="structcasacore_1_1Modulo" prot="public">casacore::Modulo</innerclass>
    <innerclass refid="structcasacore_1_1FloorMod" prot="public">casacore::FloorMod</innerclass>
    <innerclass refid="structcasacore_1_1BitAnd" prot="public">casacore::BitAnd</innerclass>
    <innerclass refid="structcasacore_1_1BitOr" prot="public">casacore::BitOr</innerclass>
    <innerclass refid="structcasacore_1_1BitXor" prot="public">casacore::BitXor</innerclass>
    <innerclass refid="structcasacore_1_1BitNegate" prot="public">casacore::BitNegate</innerclass>
    <innerclass refid="structcasacore_1_1IsNaN" prot="public">casacore::IsNaN</innerclass>
    <innerclass refid="structcasacore_1_1IsInf" prot="public">casacore::IsInf</innerclass>
    <innerclass refid="structcasacore_1_1IsFinite" prot="public">casacore::IsFinite</innerclass>
    <innerclass refid="structcasacore_1_1Near" prot="public">casacore::Near</innerclass>
    <innerclass refid="structcasacore_1_1NearAbs" prot="public">casacore::NearAbs</innerclass>
    <innerclass refid="structcasacore_1_1Sin" prot="public">casacore::Sin</innerclass>
    <innerclass refid="structcasacore_1_1Sinh" prot="public">casacore::Sinh</innerclass>
    <innerclass refid="structcasacore_1_1Asin" prot="public">casacore::Asin</innerclass>
    <innerclass refid="structcasacore_1_1Cos" prot="public">casacore::Cos</innerclass>
    <innerclass refid="structcasacore_1_1Cosh" prot="public">casacore::Cosh</innerclass>
    <innerclass refid="structcasacore_1_1Acos" prot="public">casacore::Acos</innerclass>
    <innerclass refid="structcasacore_1_1Tan" prot="public">casacore::Tan</innerclass>
    <innerclass refid="structcasacore_1_1Tanh" prot="public">casacore::Tanh</innerclass>
    <innerclass refid="structcasacore_1_1Atan" prot="public">casacore::Atan</innerclass>
    <innerclass refid="structcasacore_1_1Atan2" prot="public">casacore::Atan2</innerclass>
    <innerclass refid="structcasacore_1_1Sqr" prot="public">casacore::Sqr</innerclass>
    <innerclass refid="structcasacore_1_1Pow3" prot="public">casacore::Pow3</innerclass>
    <innerclass refid="structcasacore_1_1Sqrt" prot="public">casacore::Sqrt</innerclass>
    <innerclass refid="structcasacore_1_1Exp" prot="public">casacore::Exp</innerclass>
    <innerclass refid="structcasacore_1_1Log" prot="public">casacore::Log</innerclass>
    <innerclass refid="structcasacore_1_1Log10" prot="public">casacore::Log10</innerclass>
    <innerclass refid="structcasacore_1_1Abs" prot="public">casacore::Abs</innerclass>
    <innerclass refid="structcasacore_1_1Floor" prot="public">casacore::Floor</innerclass>
    <innerclass refid="structcasacore_1_1Ceil" prot="public">casacore::Ceil</innerclass>
    <innerclass refid="structcasacore_1_1Round" prot="public">casacore::Round</innerclass>
    <innerclass refid="structcasacore_1_1Sign" prot="public">casacore::Sign</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplex" prot="public">casacore::MakeComplex</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplexReal" prot="public">casacore::MakeComplexReal</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplexImag" prot="public">casacore::MakeComplexImag</innerclass>
    <innerclass refid="structcasacore_1_1MakeComplexRealImag" prot="public">casacore::MakeComplexRealImag</innerclass>
    <innerclass refid="structcasacore_1_1Conj" prot="public">casacore::Conj</innerclass>
    <innerclass refid="structcasacore_1_1Real" prot="public">casacore::Real</innerclass>
    <innerclass refid="structcasacore_1_1Imag" prot="public">casacore::Imag</innerclass>
    <innerclass refid="structcasacore_1_1CArg" prot="public">casacore::CArg</innerclass>
    <innerclass refid="structcasacore_1_1CAbs" prot="public">casacore::CAbs</innerclass>
    <innerclass refid="structcasacore_1_1Pow" prot="public">casacore::Pow</innerclass>
    <innerclass refid="structcasacore_1_1Fmod" prot="public">casacore::Fmod</innerclass>
    <innerclass refid="structcasacore_1_1Min" prot="public">casacore::Min</innerclass>
    <innerclass refid="structcasacore_1_1Max" prot="public">casacore::Max</innerclass>
    <innerclass refid="structcasacore_1_1SumSqr" prot="public">casacore::SumSqr</innerclass>
    <innerclass refid="structcasacore_1_1SumSqrDiff" prot="public">casacore::SumSqrDiff</innerclass>
    <innerclass refid="structcasacore_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4" prot="public">casacore::SumSqrDiff&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structcasacore_1_1SumAbsDiff" prot="public">casacore::SumAbsDiff</innerclass>
    <innerclass refid="structcasacore_1_1Downcase" prot="public">casacore::Downcase</innerclass>
    <innerclass refid="structcasacore_1_1Upcase" prot="public">casacore::Upcase</innerclass>
    <innerclass refid="structcasacore_1_1Capitalize" prot="public">casacore::Capitalize</innerclass>
    <innerclass refid="structcasacore_1_1Trim" prot="public">casacore::Trim</innerclass>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#<sp/>Functors.h:<sp/>Define<sp/>STL<sp/>functors<sp/>for<sp/>basic<sp/>math<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Copyright<sp/>(C)<sp/>2008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CASA_FUNCTORS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CASA_FUNCTORS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="aips_8h" kindref="compound">casacore/casa/aips.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Math_8h" kindref="compound">casacore/casa/BasicMath/Math.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Complex_8h" kindref="compound">casacore/casa/BasicSL/Complex.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="String_8h" kindref="compound">casacore/casa/BasicSL/String.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecasacore" kindref="compound">casacore</ref><sp/>{<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>to<sp/>do<sp/>a<sp/>binary<sp/>transform<sp/>in<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>functionally<sp/>equivalent<sp/>to<sp/>std::transform<sp/>where<sp/>the<sp/>first<sp/>and<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>are<sp/>the<sp/>same,<sp/>but<sp/>it<sp/>is<sp/>faster<sp/>for<sp/>non-trivial<sp/>iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryOperator&gt;</highlight></codeline>
<codeline lineno="42" refid="namespacecasacore_1ad9ab786f3dd6e80c1ead224b258bea55" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1ad9ab786f3dd6e80c1ead224b258bea55" kindref="member">transformInPlace</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator2<sp/>first2,<sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1,<sp/>++first2)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*first1<sp/>=<sp/>op(*first1,<sp/>*first2);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>to<sp/>do<sp/>a<sp/>unary<sp/>transform<sp/>in<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>functionally<sp/>equivalent<sp/>to<sp/>std::transform<sp/>where<sp/>the<sp/>first<sp/>and<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>are<sp/>the<sp/>same,<sp/>but<sp/>it<sp/>is<sp/>faster<sp/>for<sp/>non-trivial<sp/>iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UnaryOperator&gt;</highlight></codeline>
<codeline lineno="54" refid="namespacecasacore_1ac15cb95eceef774234ff03f96fbe14aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1ad9ab786f3dd6e80c1ead224b258bea55" kindref="member">transformInPlace</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryOperator<sp/>op)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*first1<sp/>=<sp/>op(*first1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>(similar<sp/>to<sp/>std::accumulate)<sp/>to<sp/>do<sp/>accumulation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>for<sp/>which<sp/>the<sp/>corresponding<sp/>mask<sp/>value<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>accumulation<sp/>is<sp/>addition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MaskIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Accum,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryOperator&gt;</highlight></codeline>
<codeline lineno="66" refid="namespacecasacore_1ac1063cbd58b0497b55868f9df5dd872d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Accum<sp/><ref refid="namespacecasacore_1ac1063cbd58b0497b55868f9df5dd872d" kindref="member">accumulateTrue</ref><sp/>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaskIterator<sp/>mask,<sp/>Accum<sp/>acc,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryOperator<sp/>op<sp/>=<sp/>std::plus&lt;Accum&gt;())</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first!=last;<sp/>++first,<sp/>++mask)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*mask)<sp/>acc<sp/>=<sp/>op(acc,<sp/>*first);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>(similar<sp/>to<sp/>std::accumulate)<sp/>to<sp/>do<sp/>accumulation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>for<sp/>which<sp/>the<sp/>corresponding<sp/>mask<sp/>value<sp/>is<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>accumulation<sp/>is<sp/>addition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MaskIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Accum,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryOperator&gt;</highlight></codeline>
<codeline lineno="80" refid="namespacecasacore_1abc29fcdc3fb03ec16bff7457f4c58113" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Accum<sp/><ref refid="namespacecasacore_1abc29fcdc3fb03ec16bff7457f4c58113" kindref="member">accumulateFalse</ref><sp/>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaskIterator<sp/>mask,<sp/>Accum<sp/>acc,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryOperator<sp/>op<sp/>=<sp/>std::plus&lt;Accum&gt;())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first!=last;<sp/>++first,<sp/>++mask)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*mask)<sp/>acc<sp/>=<sp/>op(acc,<sp/>*first);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>to<sp/>compare<sp/>all<sp/>elements<sp/>of<sp/>two<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>returns<sp/>true<sp/>if<sp/>all<sp/>elements<sp/>compare<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>example<sp/>compare<sp/>operator<sp/>is<sp/>&lt;src&gt;std::equal_to&lt;/src&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="95" refid="namespacecasacore_1a4958404c8bb26f793e289f654ce910e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a4958404c8bb26f793e289f654ce910e8" kindref="member">compareAll</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator2<sp/>first2,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1,<sp/>++first2)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op(*first1,<sp/>*first2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>left<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="107" refid="namespacecasacore_1a37910123c463918ba38e19026715935b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a37910123c463918ba38e19026715935b" kindref="member">compareAllLeft</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>left,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op(left,<sp/>*first1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="119" refid="namespacecasacore_1adb86476d0e44628fc59a11d9020d9946" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1adb86476d0e44628fc59a11d9020d9946" kindref="member">compareAllRight</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>right,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op(*first1,<sp/>right))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;/group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>function<sp/>to<sp/>compare<sp/>all<sp/>elements<sp/>of<sp/>two<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>returns<sp/>true<sp/>if<sp/>any<sp/>element<sp/>compares<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>example<sp/>compare<sp/>operator<sp/>is<sp/>&lt;src&gt;std::equal_to&lt;/src&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="134" refid="namespacecasacore_1a2890770832b538a98b2ec014bfcafb5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a2890770832b538a98b2ec014bfcafb5d" kindref="member">compareAny</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator2<sp/>first2,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1,<sp/>++first2)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op(*first1,<sp/>*first2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>left<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="146" refid="namespacecasacore_1a10dc7d03bfbbfdca65dffe8067357907" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a10dc7d03bfbbfdca65dffe8067357907" kindref="member">compareAnyLeft</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>left,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op(left,<sp/>*first1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>use<sp/>with<sp/>a<sp/>constant<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>use<sp/>of<sp/>bind1st<sp/>or<sp/>bind2nd<sp/>which<sp/>can<sp/>fail<sp/>for<sp/>gcc-4.3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>ArrayMath.h).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompareOperator&gt;</highlight></codeline>
<codeline lineno="158" refid="namespacecasacore_1a7647ef54adbd5dc89801d7ff05900157" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a7647ef54adbd5dc89801d7ff05900157" kindref="member">compareAnyRight</ref><sp/>(InputIterator1<sp/>first1,<sp/>InputIterator1<sp/>last1,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>right,<sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first1!=last1;<sp/>++first1)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op(*first1,<sp/>right))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;/group&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>add<sp/>variables<sp/>of<sp/>possibly<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>unlike<sp/>std::plus<sp/>which<sp/>requires<sp/>equal<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="173" refid="structcasacore_1_1Plus" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Plus" kindref="compound">Plus</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="175" refid="structcasacore_1_1Plus_1adcd08888357221c47d4454004bff288e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Plus_1adcd08888357221c47d4454004bff288e" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="176"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(x)+y;<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>subtract<sp/>variables<sp/>of<sp/>possibly<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>unlike<sp/>std::minus<sp/>which<sp/>requires<sp/>equal<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="182" refid="structcasacore_1_1Minus" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Minus" kindref="compound">Minus</ref></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="184" refid="structcasacore_1_1Minus_1a700e0454af040b46d008a7990789ea70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Minus_1a700e0454af040b46d008a7990789ea70" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="185"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(x)-y;<sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>multiply<sp/>variables<sp/>of<sp/>possibly<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>unlike<sp/>std::multiplies<sp/>which<sp/>requires<sp/>equal<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="191" refid="structcasacore_1_1Multiplies" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Multiplies" kindref="compound">Multiplies</ref></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="193" refid="structcasacore_1_1Multiplies_1a3c9a67e5bb39809167092985e423d2e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Multiplies_1a3c9a67e5bb39809167092985e423d2e8" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="194"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(x)*y;<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>divide<sp/>variables<sp/>of<sp/>possibly<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>unlike<sp/>std::divides<sp/>which<sp/>requires<sp/>equal<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="200" refid="structcasacore_1_1Divides" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Divides" kindref="compound">Divides</ref></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202" refid="structcasacore_1_1Divides_1aa22a9746533405df293862db67c27509" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Divides_1aa22a9746533405df293862db67c27509" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="203"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(x)/y;<sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>take<sp/>modulo<sp/>of<sp/>(integer)<sp/>variables<sp/>of<sp/>possibly<sp/>different<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>C<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>unlike<sp/>std::modulo<sp/>which<sp/>requires<sp/>equal<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="210" refid="structcasacore_1_1Modulo" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Modulo" kindref="compound">Modulo</ref></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212" refid="structcasacore_1_1Modulo_1ae8b930f50d13609fc684a63bdf95a016" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Modulo_1ae8b930f50d13609fc684a63bdf95a016" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="213"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(x)%y;<sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>take<sp/>modulo<sp/>of<sp/>variables<sp/>of<sp/>possibly<sp/>different<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>floor<sp/>modulo<sp/>(%<sp/>as<sp/>used<sp/>in<sp/>Python).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="219" refid="structcasacore_1_1FloorMod" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1FloorMod" kindref="compound">FloorMod</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="221" refid="structcasacore_1_1FloorMod_1a7855b8fd86b77f181f62d97075c58a99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1FloorMod_1a7855b8fd86b77f181f62d97075c58a99" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="222"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa8996fa30743686e0548ca0f34b1831f" kindref="member">floormod</ref><sp/>(RES(x),<sp/>RES(y));<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>for<sp/>bitwise<sp/>and<sp/>of<sp/>(integer)<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="227" refid="structcasacore_1_1BitAnd" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1BitAnd" kindref="compound">BitAnd</ref></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="229" refid="structcasacore_1_1BitAnd_1a3b70a452e06fecb16e0304f16bde76a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="structcasacore_1_1BitAnd_1a3b70a452e06fecb16e0304f16bde76a8" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="230"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x&amp;y;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>for<sp/>bitwise<sp/>or<sp/>of<sp/>(integer)<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="235" refid="structcasacore_1_1BitOr" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1BitOr" kindref="compound">BitOr</ref></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237" refid="structcasacore_1_1BitOr_1a16d94bd5f29497ad19cfc5a2fc7ee3c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="structcasacore_1_1BitOr_1a16d94bd5f29497ad19cfc5a2fc7ee3c0" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="238"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x|y;<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>for<sp/>bitwise<sp/>xor<sp/>of<sp/>(integer)<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="243" refid="structcasacore_1_1BitXor" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1BitXor" kindref="compound">BitXor</ref></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="245" refid="structcasacore_1_1BitXor_1ab85c92168ad438f761be4f701e301611" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="structcasacore_1_1BitXor_1ab85c92168ad438f761be4f701e301611" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="246"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x^y;<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>for<sp/>bitwise<sp/>negate<sp/>of<sp/>(integer)<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="251" refid="structcasacore_1_1BitNegate" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1BitNegate" kindref="compound">BitNegate</ref></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253" refid="structcasacore_1_1BitNegate_1a60988d76817ff22e62ebc839913feba1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="structcasacore_1_1BitNegate_1a60988d76817ff22e62ebc839913feba1" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="254"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~x;<sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>test<sp/>for<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>used<sp/>in<sp/>something<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;srcblock&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::transform<sp/>(array.begin(),<sp/>array.end(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.begin(),<sp/>IsNaN&lt;T&gt;());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;/srcblock&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="264" refid="structcasacore_1_1IsNaN" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1IsNaN" kindref="compound">IsNaN</ref></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266" refid="structcasacore_1_1IsNaN_1af0be149d6797648639af9116440c8511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1IsNaN_1af0be149d6797648639af9116440c8511" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="267"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa8d87be7488c375c34801759b4572d59" kindref="member">isNaN</ref><sp/>(value);<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>test<sp/>for<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="272" refid="structcasacore_1_1IsInf" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1IsInf" kindref="compound">IsInf</ref></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274" refid="structcasacore_1_1IsInf_1aaf5801125ae60de0beed244cdb572934" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1IsInf_1aaf5801125ae60de0beed244cdb572934" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="275"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1ae1e1681db7bbaebc650644ee3b06ee5f" kindref="member">isInf</ref><sp/>(value);<sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>test<sp/>for<sp/>finiteness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="280" refid="structcasacore_1_1IsFinite" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1IsFinite" kindref="compound">IsFinite</ref></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="282" refid="structcasacore_1_1IsFinite_1a09acac40171b293a86c76e026c933635" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1IsFinite_1a09acac40171b293a86c76e026c933635" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="283"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a894ca9758536e0fbadbb8c7d600873fc" kindref="member">isFinite</ref><sp/>(value);<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>test<sp/>if<sp/>two<sp/>values<sp/>are<sp/>relatively<sp/>near<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>used<sp/>in<sp/>something<sp/>like:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;srcblock&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::transform<sp/>(left.begin(),<sp/>left.cend(),<sp/>right.begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.cbegin(),<sp/>Near&lt;T&gt;(tolerance));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;/srcblock&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L&gt;</highlight></codeline>
<codeline lineno="293" refid="structcasacore_1_1Near" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Near" kindref="compound">Near</ref></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="295" refid="structcasacore_1_1Near_1a4dac8bb9b51d24fc7463723ce0a917eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1Near_1a4dac8bb9b51d24fc7463723ce0a917eb" kindref="member">Near</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance=1<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>-5)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>itsTolerance<sp/>(tolerance)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="298" refid="structcasacore_1_1Near_1a00ab9b74f288f28f1426b67c7d7bd148" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1Near_1a00ab9b74f288f28f1426b67c7d7bd148" kindref="member">operator() </ref>(L<sp/>left,<sp/>R<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="299"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a0ef2489b302c373f7780762742c11b57" kindref="member">near</ref><sp/>(left,<sp/>L(right),<sp/>itsTolerance);<sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>itsTolerance;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>test<sp/>for<sp/>if<sp/>two<sp/>values<sp/>are<sp/>absolutely<sp/>near<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L&gt;</highlight></codeline>
<codeline lineno="306" refid="structcasacore_1_1NearAbs" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1NearAbs" kindref="compound">NearAbs</ref></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308" refid="structcasacore_1_1NearAbs_1a65b1a8d5533374c7da577b3df92e059d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1NearAbs_1a65b1a8d5533374c7da577b3df92e059d" kindref="member">NearAbs</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance=1<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>-13)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>itsTolerance<sp/>(tolerance)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="311" refid="structcasacore_1_1NearAbs_1aaa437cd1da5a1775de5d5be9b5ded43c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1NearAbs_1aaa437cd1da5a1775de5d5be9b5ded43c" kindref="member">operator() </ref>(L<sp/>left,<sp/>R<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="312"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a541672c0365ea093e63238bc34b4e175" kindref="member">nearAbs</ref><sp/>(left,<sp/>L(right),<sp/>itsTolerance);<sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>itsTolerance;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>sin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="320" refid="structcasacore_1_1Sin" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Sin" kindref="compound">Sin</ref></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="322" refid="structcasacore_1_1Sin_1aefd16fffc6faf0fa0998dd30ecf5b5ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Sin_1aefd16fffc6faf0fa0998dd30ecf5b5ca" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="323"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1ab8f02e2526cd44ba901328c3300d80bc" kindref="member">sin</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>sinh.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="328" refid="structcasacore_1_1Sinh" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Sinh" kindref="compound">Sinh</ref></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="330" refid="structcasacore_1_1Sinh_1a86e3eed54463fc37351dd38affacb0b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Sinh_1a86e3eed54463fc37351dd38affacb0b7" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="331"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a856949335979234f858c010c8ad094f2" kindref="member">sinh</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>asin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="336" refid="structcasacore_1_1Asin" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Asin" kindref="compound">Asin</ref></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="338" refid="structcasacore_1_1Asin_1a3a61a92e6de0214ccef4bcd7f9150836" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Asin_1a3a61a92e6de0214ccef4bcd7f9150836" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="339"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1aa85ad2d994ef87c7ec7b69b7501005a7" kindref="member">asin</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>cos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="344" refid="structcasacore_1_1Cos" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Cos" kindref="compound">Cos</ref></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346" refid="structcasacore_1_1Cos_1a3148059a51f7b6bf0245464b6ce03ac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Cos_1a3148059a51f7b6bf0245464b6ce03ac7" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="347"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a6cf4822d52f4f4bf6d4447e28588df9a" kindref="member">cos</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>cosh.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="352" refid="structcasacore_1_1Cosh" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Cosh" kindref="compound">Cosh</ref></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="354" refid="structcasacore_1_1Cosh_1a4864bf32c55bdf6c77564c5e0d74561b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Cosh_1a4864bf32c55bdf6c77564c5e0d74561b" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="355"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1af05c479d0c61f5cce136a1add3239ad9" kindref="member">cosh</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>acos.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="360" refid="structcasacore_1_1Acos" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Acos" kindref="compound">Acos</ref></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="362" refid="structcasacore_1_1Acos_1a4f22fc4ea2a868f72e2e106302931b8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Acos_1a4f22fc4ea2a868f72e2e106302931b8d" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="363"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a883a7c7a3b6e3089d3fec6884b9a0169" kindref="member">acos</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>tan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="368" refid="structcasacore_1_1Tan" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Tan" kindref="compound">Tan</ref></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370" refid="structcasacore_1_1Tan_1a01f0cc707e88e4369bde53c9140fcf34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Tan_1a01f0cc707e88e4369bde53c9140fcf34" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="371"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a7b78719cc5bfa9004cffbc01c1b15c7f" kindref="member">tan</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>tanh.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="376" refid="structcasacore_1_1Tanh" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Tanh" kindref="compound">Tanh</ref></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378" refid="structcasacore_1_1Tanh_1aac2d50899aee344090fd0bba52b3dcd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Tanh_1aac2d50899aee344090fd0bba52b3dcd0" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="379"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a1bdb140575705764d71d159383054517" kindref="member">tanh</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>atan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="384" refid="structcasacore_1_1Atan" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Atan" kindref="compound">Atan</ref></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="386" refid="structcasacore_1_1Atan_1ac56f8ac03493dcbdd31b1237ff32120e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Atan_1ac56f8ac03493dcbdd31b1237ff32120e" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="387"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1acb507568f902a2e56c3fb00d9168f132" kindref="member">atan</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>atan2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="392" refid="structcasacore_1_1Atan2" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Atan2" kindref="compound">Atan2</ref></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="394" refid="structcasacore_1_1Atan2_1a5bcdb398acf46c637e44cefa5e290447" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Atan2_1a5bcdb398acf46c637e44cefa5e290447" kindref="member">operator() </ref>(L<sp/>left,<sp/>R<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="395"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a23d78719331d233b520cf2f126090907" kindref="member">atan2</ref><sp/>(left,<sp/>L(right)));<sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>sqr<sp/>(power<sp/>of<sp/>2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="400" refid="structcasacore_1_1Sqr" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Sqr" kindref="compound">Sqr</ref></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="402" refid="structcasacore_1_1Sqr_1a948dffe1ae03dc2323866261ddc69b71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Sqr_1a948dffe1ae03dc2323866261ddc69b71" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="403"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(value*value);<sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>a<sp/>power<sp/>of<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="408" refid="structcasacore_1_1Pow3" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Pow3" kindref="compound">Pow3</ref></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="410" refid="structcasacore_1_1Pow3_1a612f08fb4b26cdd9f86363259c61b456" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Pow3_1a612f08fb4b26cdd9f86363259c61b456" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="411"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(value*value*value);<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>sqrt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="416" refid="structcasacore_1_1Sqrt" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Sqrt" kindref="compound">Sqrt</ref></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="418" refid="structcasacore_1_1Sqrt_1acb5dccf4b2ceea7bc8e19e214b9f27b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Sqrt_1acb5dccf4b2ceea7bc8e19e214b9f27b0" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="419"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a7007a6f0ac4c37df2376110ec50f65d1" kindref="member">sqrt</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>exp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="424" refid="structcasacore_1_1Exp" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Exp" kindref="compound">Exp</ref></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="426" refid="structcasacore_1_1Exp_1af6f68d657a899b0bdfeafeea40de254e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Exp_1af6f68d657a899b0bdfeafeea40de254e" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="427"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a1dbb4935d3112011f371b90a74fb778b" kindref="member">exp</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>log.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="432" refid="structcasacore_1_1Log" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Log" kindref="compound">Log</ref></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="434" refid="structcasacore_1_1Log_1a4e0b8514321f4bc0606c8611500abe00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Log_1a4e0b8514321f4bc0606c8611500abe00" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="435"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a166a5aef3b512cfe046a53c0cccea66b" kindref="member">log</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>log10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="440" refid="structcasacore_1_1Log10" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Log10" kindref="compound">Log10</ref></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="442" refid="structcasacore_1_1Log10_1a19bc74a8d3922f71902b89a6aab9e2f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Log10_1a19bc74a8d3922f71902b89a6aab9e2f6" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="443"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a097e1482666f4cae0ed3723b38d2b962" kindref="member">log10</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>abs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="448" refid="structcasacore_1_1Abs" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Abs" kindref="compound">Abs</ref></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="450" refid="structcasacore_1_1Abs_1a821bcdeab2ea580c8f2e86eab69e0a2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Abs_1a821bcdeab2ea580c8f2e86eab69e0a2c" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="451"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">abs</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>floor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="456" refid="structcasacore_1_1Floor" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Floor" kindref="compound">Floor</ref></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="458" refid="structcasacore_1_1Floor_1a0c4120f9167b78a40e8f2d6def9059f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Floor_1a0c4120f9167b78a40e8f2d6def9059f3" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="459"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1aa1012d41fa360fd916f47e006d8fb93b" kindref="member">floor</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>ceil.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="464" refid="structcasacore_1_1Ceil" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Ceil" kindref="compound">Ceil</ref></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="466" refid="structcasacore_1_1Ceil_1a754e2a5fb3d23f1c2c2b5b24b071415c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Ceil_1a754e2a5fb3d23f1c2c2b5b24b071415c" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="467"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a0049baefdbf0bc81fbc671ece098bef4" kindref="member">ceil</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>round<sp/>(e.g.<sp/>-3.7<sp/>gets<sp/>-4).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="472" refid="structcasacore_1_1Round" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Round" kindref="compound">Round</ref></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="474" refid="structcasacore_1_1Round_1aa19fb5dd85e782ea56fb84d4a4b1e3ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Round_1aa19fb5dd85e782ea56fb84d4a4b1e3ae" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="475"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(value&lt;0<sp/>?<sp/><ref refid="namespacecasacore_1a0049baefdbf0bc81fbc671ece098bef4" kindref="member">ceil</ref>(value-0.5)<sp/>:<sp/><ref refid="namespacecasacore_1aa1012d41fa360fd916f47e006d8fb93b" kindref="member">floor</ref>(value+0.5));<sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>sign<sp/>(result<sp/>is<sp/>-1,<sp/>0,<sp/>or<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="480" refid="structcasacore_1_1Sign" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Sign" kindref="compound">Sign</ref></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="482" refid="structcasacore_1_1Sign_1ae38922938e657cd629ad64a2a0780895" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Sign_1ae38922938e657cd629ad64a2a0780895" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="483"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value&lt;0<sp/>?<sp/>-1<sp/>:<sp/>(value&gt;0<sp/>?<sp/>1:0));<sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>form<sp/>a<sp/>complex<sp/>number<sp/>from<sp/>the<sp/>left<sp/>and<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="488" refid="structcasacore_1_1MakeComplex" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1MakeComplex" kindref="compound">MakeComplex</ref></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="490" refid="structcasacore_1_1MakeComplex_1a46a9ab10494262280097118967fbd2c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1MakeComplex_1a46a9ab10494262280097118967fbd2c8" kindref="member">operator() </ref>(L<sp/>l,<sp/>R<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="491"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(l,<sp/>r);<sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>form<sp/>a<sp/>complex<sp/>number<sp/>from<sp/>the<sp/>real<sp/>part<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>value<sp/>and<sp/>the<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="497" refid="structcasacore_1_1MakeComplexReal" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1MakeComplexReal" kindref="compound">MakeComplexReal</ref></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="499" refid="structcasacore_1_1MakeComplexReal_1afde5b3d5ece534ac2455eac250513ead" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1MakeComplexReal_1afde5b3d5ece534ac2455eac250513ead" kindref="member">operator() </ref>(L<sp/>l,<sp/>R<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="500"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>(l),<sp/>r);<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>form<sp/>a<sp/>complex<sp/>number<sp/>from<sp/>the<sp/>left<sp/>value<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>imaginary<sp/>part<sp/>of<sp/>the<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="506" refid="structcasacore_1_1MakeComplexImag" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1MakeComplexImag" kindref="compound">MakeComplexImag</ref></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="508" refid="structcasacore_1_1MakeComplexImag_1a15827d428d84af37b0dec7dc813f5c7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1MakeComplexImag_1a15827d428d84af37b0dec7dc813f5c7a" kindref="member">operator() </ref>(L<sp/>l,<sp/>R<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="509"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(l,<sp/><ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>(r));<sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>form<sp/>a<sp/>complex<sp/>number<sp/>from<sp/>the<sp/>real<sp/>part<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>value<sp/>and<sp/>the<sp/>imaginary<sp/>part<sp/>of<sp/>the<sp/>right<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="515" refid="structcasacore_1_1MakeComplexRealImag" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1MakeComplexRealImag" kindref="compound">MakeComplexRealImag</ref></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="517" refid="structcasacore_1_1MakeComplexRealImag_1a75ecb72fd7a6ab301f42a3203e6559d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1MakeComplexRealImag_1a75ecb72fd7a6ab301f42a3203e6559d4" kindref="member">operator() </ref>(L<sp/>l,<sp/>R<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="518"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>(l),<sp/><ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>(r));<sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>complex<sp/>function<sp/>conj.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="523" refid="structcasacore_1_1Conj" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Conj" kindref="compound">Conj</ref></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="525" refid="structcasacore_1_1Conj_1a9e104f61f2cfcd8bbfed726de3cccaf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Conj_1a9e104f61f2cfcd8bbfed726de3cccaf1" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="526"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a09440658171992c2310da72f8efb6ae6" kindref="member">conj</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>complex<sp/>function<sp/>real.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="531" refid="structcasacore_1_1Real" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Real" kindref="compound">Real</ref></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="533" refid="structcasacore_1_1Real_1a674cd8f1c94a358d559abae1715be6dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Real_1a674cd8f1c94a358d559abae1715be6dd" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="534"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>complex<sp/>function<sp/>imag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="539" refid="structcasacore_1_1Imag" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Imag" kindref="compound">Imag</ref></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="541" refid="structcasacore_1_1Imag_1ae07bdd0dc72db7c490ff0a0adff58a46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Imag_1ae07bdd0dc72db7c490ff0a0adff58a46" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="542"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>complex<sp/>function<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="547" refid="structcasacore_1_1CArg" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1CArg" kindref="compound">CArg</ref></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="549" refid="structcasacore_1_1CArg_1aeee9eae9b53de534deafff65d4ebee91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1CArg_1aeee9eae9b53de534deafff65d4ebee91" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="550"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a84d492611f18871b821d8165fd47b33c" kindref="member">arg</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>complex<sp/>function<sp/>fabs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES&gt;</highlight></codeline>
<codeline lineno="555" refid="structcasacore_1_1CAbs" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1CAbs" kindref="compound">CAbs</ref></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="557" refid="structcasacore_1_1CAbs_1a015740dbfe061f40384c9712b51f5f98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1CAbs_1a015740dbfe061f40384c9712b51f5f98" kindref="member">operator() </ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="558"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a4861fb104ff2017605fb4cfd8cb2313c" kindref="member">fabs</ref><sp/>(value));<sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>pow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E=T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=T&gt;</highlight></codeline>
<codeline lineno="563" refid="structcasacore_1_1Pow" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Pow" kindref="compound">Pow</ref></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="565" refid="structcasacore_1_1Pow_1a692c22c983514b38e582f53e83c3a60a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Pow_1a692c22c983514b38e582f53e83c3a60a" kindref="member">operator() </ref>(T<sp/>left,<sp/>E<sp/>exponent)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="566"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1ab0d7878bae9acd24b749588b60076192" kindref="member">pow</ref><sp/>(left,<sp/>exponent));<sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>apply<sp/>fmod.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="571" refid="structcasacore_1_1Fmod" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Fmod" kindref="compound">Fmod</ref></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="573" refid="structcasacore_1_1Fmod_1aacffd03bb1bcc4bd5bb849149fa521b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Fmod_1aacffd03bb1bcc4bd5bb849149fa521b0" kindref="member">operator() </ref>(R<sp/>left,<sp/>L<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="574"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(<ref refid="namespacecasacore_1a567c268477381245c46030a94e36d5ba" kindref="member">fmod</ref><sp/>(left,<sp/>L(right)));<sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>get<sp/>minimum<sp/>of<sp/>two<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="579" refid="structcasacore_1_1Min" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Min" kindref="compound">Min</ref></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="581" refid="structcasacore_1_1Min_1abe0065edcb67d9470837ec2a59b51b9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Min_1abe0065edcb67d9470837ec2a59b51b9b" kindref="member">operator() </ref>(L<sp/>left,<sp/>R<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="582"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(left&lt;right<sp/><sp/>?<sp/><sp/>left<sp/>:<sp/>right);<sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>get<sp/>maximum<sp/>of<sp/>two<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R=L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RES=L&gt;</highlight></codeline>
<codeline lineno="587" refid="structcasacore_1_1Max" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Max" kindref="compound">Max</ref></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="589" refid="structcasacore_1_1Max_1abefd800109a3975b29ae27d20d917f31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/><ref refid="structcasacore_1_1Max_1abefd800109a3975b29ae27d20d917f31" kindref="member">operator() </ref>(L<sp/>left,<sp/>R<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="590"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RES(left&lt;right<sp/><sp/>?<sp/><sp/>right<sp/>:<sp/>left);<sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>add<sp/>square<sp/>of<sp/>right<sp/>to<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Accum=T&gt;</highlight></codeline>
<codeline lineno="595" refid="structcasacore_1_1SumSqr" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1SumSqr" kindref="compound">SumSqr</ref></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="597" refid="structcasacore_1_1SumSqr_1ad288f7b058032d115ef762b399eafdca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Accum<sp/><ref refid="structcasacore_1_1SumSqr_1ad288f7b058032d115ef762b399eafdca" kindref="member">operator() </ref>(Accum<sp/>left,<sp/>T<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="598"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>+<sp/>Accum(right)*Accum(right);<sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>add<sp/>squared<sp/>diff<sp/>of<sp/>right<sp/>and<sp/>base<sp/>value<sp/>to<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>it<sp/>is<sp/>specialized<sp/>for<sp/>complex<sp/>values<sp/>to<sp/>handle<sp/>real<sp/>and<sp/>imag<sp/>separately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Accum=T&gt;</highlight></codeline>
<codeline lineno="605" refid="structcasacore_1_1SumSqrDiff" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1SumSqrDiff" kindref="compound">SumSqrDiff</ref></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="607" refid="structcasacore_1_1SumSqrDiff_1a1f6346495e4b3c1d57cb584f0aa651ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1SumSqrDiff_1a1f6346495e4b3c1d57cb584f0aa651ed" kindref="member">SumSqrDiff</ref>(T<sp/>base)<sp/>:<sp/>itsBase(base)<sp/>{}</highlight></codeline>
<codeline lineno="608" refid="structcasacore_1_1SumSqrDiff_1a40b9c218dbc966cba089a7218f9d1702" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Accum<sp/><ref refid="structcasacore_1_1SumSqrDiff_1a40b9c218dbc966cba089a7218f9d1702" kindref="member">operator() </ref>(Accum<sp/>left,<sp/>T<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="609"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>+<sp/>(right-itsBase)*(right-itsBase);<sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Accum<sp/>itsBase;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>as<sp/>Accum,<sp/>so<sp/>subtraction<sp/>results<sp/>in<sp/>Accum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Specialize<sp/>for<sp/>complex<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Variance<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>for<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>a<sp/>complex<sp/>value.<sp/>thus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum(abs((a[i]<sp/>-<sp/>mean)**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>sqrt<sp/>used<sp/>in<sp/>abs<sp/>and<sp/>the<sp/>**2<sp/>cancel<sp/>each<sp/>other,<sp/>thus<sp/>can<sp/>be<sp/>left<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>also<sp/>https://en.wikipedia.org/wiki/Complex_random_variable#Variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>although<sp/>the<sp/>sum<sp/>is<sp/>real,<sp/>a<sp/>complex<sp/>value<sp/>is<sp/>used<sp/>to<sp/>have<sp/>equal<sp/>template<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="620" refid="structcasacore_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1SumSqrDiff" kindref="compound">SumSqrDiff</ref>&lt;std::complex&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="622" refid="structcasacore_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4_1a66f1af358c0982f991dde7dea3cf6e1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4_1a66f1af358c0982f991dde7dea3cf6e1e" kindref="member">SumSqrDiff</ref>(std::complex&lt;T&gt;<sp/>base)<sp/>:<sp/>itsBase(base)<sp/>{}</highlight></codeline>
<codeline lineno="623" refid="structcasacore_1_1SumSqrDiff_3_01std_1_1complex_3_01T_01_4_01_4_1a542ee70a269788d44db0df69e0e628de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;T&gt;<sp/><ref refid="structcasacore_1_1SumSqrDiff_1a40b9c218dbc966cba089a7218f9d1702" kindref="member">operator() </ref>(std::complex&lt;T&gt;<sp/>left,<sp/>std::complex&lt;T&gt;<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="624"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>+<sp/>((right.real()<sp/>-<sp/>itsBase.real())<sp/>*<sp/>(right.real()<sp/>-<sp/>itsBase.real())<sp/>+</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(right.imag()<sp/>-<sp/>itsBase.imag())<sp/>*<sp/>(right.imag()<sp/>-<sp/>itsBase.imag()));<sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;T&gt;<sp/>itsBase;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>add<sp/>absolute<sp/>diff<sp/>of<sp/>right<sp/>and<sp/>base<sp/>value<sp/>to<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>average<sp/>deviation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Accum=T&gt;</highlight></codeline>
<codeline lineno="633" refid="structcasacore_1_1SumAbsDiff" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1SumAbsDiff" kindref="compound">SumAbsDiff</ref></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="635" refid="structcasacore_1_1SumAbsDiff_1a8fc5c620264adcf3e94c279c63f14d32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structcasacore_1_1SumAbsDiff_1a8fc5c620264adcf3e94c279c63f14d32" kindref="member">SumAbsDiff</ref>(T<sp/>base)<sp/>:<sp/>itsBase(base)<sp/>{}</highlight></codeline>
<codeline lineno="636" refid="structcasacore_1_1SumAbsDiff_1a086c38e89687a2df02fc5a3b2bd77e84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Accum<sp/><ref refid="structcasacore_1_1SumAbsDiff_1a086c38e89687a2df02fc5a3b2bd77e84" kindref="member">operator() </ref>(Accum<sp/>left,<sp/>T<sp/>right)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="637"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left<sp/>+<sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">abs</ref>((right-itsBase));<sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>Accum<sp/>itsBase;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>as<sp/>Accum,<sp/>so<sp/>subtraction<sp/>results<sp/>in<sp/>Accum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>downcase<sp/>a<sp/>std::string.<sp/>The<sp/>result<sp/>is<sp/>a<sp/>casacore::String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="structcasacore_1_1Downcase" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Downcase" kindref="compound">Downcase</ref></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="645" refid="structcasacore_1_1Downcase_1a117230e059aa4cb1e0abc47c357113dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcasacore_1_1String" kindref="compound">String</ref><sp/><ref refid="structcasacore_1_1Downcase_1a117230e059aa4cb1e0abc47c357113dc" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="646"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a1c309659effb714b791296065ee5cc20" kindref="member">downcase</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>upcase<sp/>a<sp/>std::string.<sp/>The<sp/>result<sp/>is<sp/>a<sp/>casacore::String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650" refid="structcasacore_1_1Upcase" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Upcase" kindref="compound">Upcase</ref></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="652" refid="structcasacore_1_1Upcase_1aaf90d8caa480f947965017152f106bab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcasacore_1_1String" kindref="compound">String</ref><sp/><ref refid="structcasacore_1_1Upcase_1aaf90d8caa480f947965017152f106bab" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="653"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a917aa1ea03f22bd101ec6ce10e6eb423" kindref="member">upcase</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>capitalize<sp/>a<sp/>std::string.<sp/>The<sp/>result<sp/>is<sp/>a<sp/>casacore::String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="structcasacore_1_1Capitalize" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Capitalize" kindref="compound">Capitalize</ref></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="659" refid="structcasacore_1_1Capitalize_1a4e84258d3f0a20811e8e5d88f6dccd5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcasacore_1_1String" kindref="compound">String</ref><sp/><ref refid="structcasacore_1_1Capitalize_1a4e84258d3f0a20811e8e5d88f6dccd5c" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="660"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a11603b0b108aed05e1adeb5a69681786" kindref="member">capitalize</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>to<sp/>trim<sp/>a<sp/>std::string.<sp/>The<sp/>result<sp/>is<sp/>a<sp/>casacore::String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leading<sp/>and<sp/>trailing<sp/>whitespace<sp/>is<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="structcasacore_1_1Trim" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcasacore_1_1Trim" kindref="compound">Trim</ref></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="667" refid="structcasacore_1_1Trim_1a121aeb539bceea10d23bb1c31eb5fe21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcasacore_1_1String" kindref="compound">String</ref><sp/><ref refid="structcasacore_1_1Trim_1a121aeb539bceea10d23bb1c31eb5fe21" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="668"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1a11a012340a6dd4bdc0668c441483fb9d" kindref="member">trim</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">}<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/BasicMath/Functors.h"/>
  </compounddef>
</doxygen>
