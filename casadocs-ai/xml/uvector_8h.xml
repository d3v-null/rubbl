<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="uvector_8h" kind="file" language="C++">
    <compoundname>uvector.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iterator</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes local="no">stdexcept</includes>
    <includedby refid="aftimeblockencoder_8h" local="yes">tables/Dysco/aftimeblockencoder.h</includedby>
    <includedby refid="dyscostman_8h" local="yes">tables/Dysco/dyscostman.h</includedby>
    <includedby refid="rftimeblockencoder_8h" local="yes">tables/Dysco/rftimeblockencoder.h</includedby>
    <includedby refid="rowtimeblockencoder_8h" local="yes">tables/Dysco/rowtimeblockencoder.h</includedby>
    <includedby refid="stochasticencoder_8h" local="yes">tables/Dysco/stochasticencoder.h</includedby>
    <includedby refid="testbytepacking_8cc" local="yes">tables/Dysco/tests/testbytepacking.cc</includedby>
    <includedby refid="timeblockbuffer_8h" local="yes">tables/Dysco/timeblockbuffer.h</includedby>
    <includedby refid="timeblockencoder_8h" local="yes">tables/Dysco/timeblockencoder.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>iterator</label>
      </node>
      <node id="1">
        <label>tables/Dysco/uvector.h</label>
        <link refid="uvector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdexcept</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cstring</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>tables/Dysco/dyscostman.cc</label>
        <link refid="dyscostman_8cc"/>
      </node>
      <node id="10">
        <label>tables/Dysco/dyscodatacolumn.h</label>
        <link refid="dyscodatacolumn_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tables/Dysco/uvector.h</label>
        <link refid="uvector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tables/Dysco/tests/testbytepacking.cc</label>
        <link refid="testbytepacking_8cc"/>
      </node>
      <node id="9">
        <label>tables/Dysco/threadeddyscocolumn.h</label>
        <link refid="threadeddyscocolumn_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tables/Dysco/aftimeblockencoder.h</label>
        <link refid="aftimeblockencoder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>tables/Dysco/rftimeblockencoder.h</label>
        <link refid="rftimeblockencoder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tables/Dysco/dyscodatacolumn.cc</label>
        <link refid="dyscodatacolumn_8cc"/>
      </node>
      <node id="12">
        <label>tables/Dysco/dyscoweightcolumn.cc</label>
        <link refid="dyscoweightcolumn_8cc"/>
      </node>
      <node id="13">
        <label>tables/Dysco/threadeddyscocolumn.cc</label>
        <link refid="threadeddyscocolumn_8cc"/>
      </node>
      <node id="3">
        <label>tables/Dysco/aftimeblockencoder.cc</label>
        <link refid="aftimeblockencoder_8cc"/>
      </node>
      <node id="23">
        <label>tables/Dysco/timeblockbuffer.h</label>
        <link refid="timeblockbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>tables/Dysco/timeblockencoder.h</label>
        <link refid="timeblockencoder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tables/Dysco/dyscostmancol.h</label>
        <link refid="dyscostmancol_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>tables/Dysco/dyscoweightcolumn.h</label>
        <link refid="dyscoweightcolumn_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>tables/Dysco/rowtimeblockencoder.h</label>
        <link refid="rowtimeblockencoder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tables/Dysco/rowtimeblockencoder.cc</label>
        <link refid="rowtimeblockencoder_8cc"/>
      </node>
      <node id="5">
        <label>tables/Dysco/tests/testtimeblockencoder.cc</label>
        <link refid="testtimeblockencoder_8cc"/>
      </node>
      <node id="20">
        <label>tables/Dysco/stochasticencoder.cc</label>
        <link refid="stochasticencoder_8cc"/>
      </node>
      <node id="14">
        <label>tables/Dysco/tests/testdyscostman.cc</label>
        <link refid="testdyscostman_8cc"/>
      </node>
      <node id="24">
        <label>tables/Dysco/weightblockencoder.h</label>
        <link refid="weightblockencoder_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>tables/Dysco/stochasticencoder.h</label>
        <link refid="stochasticencoder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>tables/Dysco/dyscostman.h</label>
        <link refid="dyscostman_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tables/Dysco/rftimeblockencoder.cc</label>
        <link refid="rftimeblockencoder_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classao_1_1uvector" prot="public">ao::uvector</innerclass>
    <innernamespace refid="namespaceao">ao</innernamespace>
    <briefdescription>
<para>Header file for uvector and its relational and swap functions. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>André Offringa </para>
</simplesect>
<simplesect kind="copyright"><para>André Offringa, 2013, distributed under the GPL license version 3. </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AO_UVECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AO_UVECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespaceao" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceao" kindref="compound">ao</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Alloc<sp/>=<sp/>std::allocator&lt;Tp&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="73" refid="classao_1_1uvector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classao_1_1uvector" kindref="compound">uvector</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Alloc</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>static_assert(std::is_standard_layout&lt;Tp&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>uvector<sp/>can<sp/>only<sp/>hold<sp/>classes<sp/>with<sp/>standard<sp/>layout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79" refid="classao_1_1uvector_1a71db057aafa119005b4dee13c4db52cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tp<sp/><ref refid="classao_1_1uvector_1a71db057aafa119005b4dee13c4db52cf" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="81" refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Alloc<sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>;</highlight></codeline>
<codeline lineno="83" refid="classao_1_1uvector_1a653d02899bdbb5f56e3085020e435a7e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1a653d02899bdbb5f56e3085020e435a7e" kindref="member">reference</ref>;</highlight></codeline>
<codeline lineno="85" refid="classao_1_1uvector_1a276633c9c49f4f4341feb20d58bbea26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1a276633c9c49f4f4341feb20d58bbea26" kindref="member">const_reference</ref>;</highlight></codeline>
<codeline lineno="87" refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tp*<sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="89" refid="classao_1_1uvector_1a6c1117840801f4059221f50d62fbaed9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp*<sp/><ref refid="classao_1_1uvector_1a6c1117840801f4059221f50d62fbaed9" kindref="member">const_pointer</ref>;</highlight></codeline>
<codeline lineno="91" refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tp*<sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="93" refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp*<sp/><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="95" refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;<sp/><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="97" refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;const_iterator&gt;<sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="99" refid="classao_1_1uvector_1adda3a6b0829c0245e14ffa70152cee70" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::ptrdiff_t<sp/><ref refid="classao_1_1uvector_1adda3a6b0829c0245e14ffa70152cee70" kindref="member">difference_type</ref>;</highlight></codeline>
<codeline lineno="101" refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref>;</highlight></codeline>
<codeline lineno="103" refid="classao_1_1uvector_1afe2c30fa610be46118af297f37f27ca1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classao_1_1uvector_1afe2c30fa610be46118af297f37f27ca1" kindref="member">size_type</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;allocator_type&gt;::is_always_equal</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocator_is_always_equal;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::false_type<sp/>allocator_is_always_equal;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>_begin,<sp/>_end,<sp/>_endOfStorage;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118" refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" kindref="member">uvector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&amp;<sp/>allocator<sp/>=<sp/>Alloc())<sp/>noexcept</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>:<sp/>Alloc(allocator),<sp/>_begin(</highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">),<sp/>_end(</highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">),<sp/>_endOfStorage(</highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="129" refid="classao_1_1uvector_1ae5d234595295b78c788ed2140d8b1a89" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ae5d234595295b78c788ed2140d8b1a89" kindref="member">uvector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(allocate(n)),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(_begin<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(_end)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="142" refid="classao_1_1uvector_1ae5f3c0817ed668be39ffebfdb1cfeb72" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1ae5f3c0817ed668be39ffebfdb1cfeb72" kindref="member">uvector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a71db057aafa119005b4dee13c4db52cf" kindref="member">value_type</ref>&amp;<sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&amp;<sp/>allocator<sp/>=<sp/>Alloc())<sp/>:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(allocator),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(allocate(n)),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(_begin<sp/>+<sp/>n),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(_end)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(_begin,<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="157" refid="classao_1_1uvector_1a7a5467232a346a461969386d55b45437" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a7a5467232a346a461969386d55b45437" kindref="member">uvector</ref>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&amp;<sp/>allocator<sp/>=<sp/>Alloc())<sp/>:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(allocator)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_from_range&lt;InputIterator&gt;(first,<sp/>last,<sp/>std::is_integral&lt;InputIterator&gt;());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="168" refid="classao_1_1uvector_1abab9ebda59065a14e8401fb5ed0497dc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1abab9ebda59065a14e8401fb5ed0497dc" kindref="member">uvector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>other)<sp/>:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(std::allocator_traits&lt;Alloc&gt;::select_on_container_copy_construction(static_cast&lt;<ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&gt;(other))),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(allocate(other.<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>())),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(_begin<sp/>+<sp/>other.<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(_end)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(other._begin,<sp/>other._end,<sp/>_begin);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="181" refid="classao_1_1uvector_1a33eb364955d9dc097b97b6babe84d720" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a33eb364955d9dc097b97b6babe84d720" kindref="member">uvector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&amp;<sp/>allocator)<sp/>:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(allocator),</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(allocate(other.<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>())),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(_begin<sp/>+<sp/>other.<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(_end)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(other._begin,<sp/>other._end,<sp/>_begin);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="193" refid="classao_1_1uvector_1a3497a068dd5662316d6a1dc6327cfe7f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a3497a068dd5662316d6a1dc6327cfe7f" kindref="member">uvector</ref>(<ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(std::move(other)),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(other._begin),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(other._end),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(other._endOfStorage)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>other._begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>other._end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>other._endOfStorage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="208" refid="classao_1_1uvector_1af9ebf4a255853677de835e04ff3581c3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1af9ebf4a255853677de835e04ff3581c3" kindref="member">uvector</ref>(<ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;&amp;<sp/>other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&amp;<sp/>allocator)<sp/>noexcept<sp/>:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(allocator),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(other._begin),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(other._end),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(other._endOfStorage)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>other._begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>other._end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>other._endOfStorage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="classao_1_1uvector_1ac64d97b346360ed05c2b6febdcbc0f2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1ac64d97b346360ed05c2b6febdcbc0f2a" kindref="member">uvector</ref>(std::initializer_list&lt;Tp&gt;<sp/>initlist,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref>&amp;<sp/>allocator<sp/>=<sp/>Alloc())<sp/>:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc(allocator),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin(allocate(initlist.<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>())),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>_end(_begin<sp/>+<sp/>initlist.<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage(_end)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>destIter<sp/>=<sp/>_begin;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Tp&gt;::const_iterator<sp/>i=initlist.begin();<sp/>i!=initlist.end();<sp/>++i)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*destIter<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++destIter;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="238" refid="classao_1_1uvector_1a0384ea33901f406fc1e98b4757ce17cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a0384ea33901f406fc1e98b4757ce17cb" kindref="member">~uvector</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="247" refid="classao_1_1uvector_1a0c460db08f23572e8895d8891f76730a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&amp;<sp/><ref refid="classao_1_1uvector_1a0c460db08f23572e8895d8891f76730a" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_copy_from(other,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Alloc&gt;::propagate_on_container_copy_assignment());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="256" refid="classao_1_1uvector_1ae29fca669efe2f1dc46de39607752059" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&amp;<sp/><ref refid="classao_1_1uvector_1ae29fca669efe2f1dc46de39607752059" kindref="member">operator=</ref>(<ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;&amp;<sp/>other)<sp/>noexcept(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::allocator_traits&lt;Alloc&gt;::propagate_on_container_move_assignment::value||</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator_is_always_equal::value)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_move_from(std::move(other),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Alloc&gt;::propagate_on_container_move_assignment());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="264" refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="267" refid="classao_1_1uvector_1a78a480d1be5a65f7110e4f1a34724756" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/><ref refid="classao_1_1uvector_1a78a480d1be5a65f7110e4f1a34724756" kindref="member">begin</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="270" refid="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" kindref="member">end</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_end;<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="273" refid="classao_1_1uvector_1a93a3ba594d1bb8a88670aa9fbb018adf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/><ref refid="classao_1_1uvector_1a93a3ba594d1bb8a88670aa9fbb018adf" kindref="member">end</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_end;<sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="276" refid="classao_1_1uvector_1ac0d98dd5e689aeb68db234484515f96e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref><sp/><ref refid="classao_1_1uvector_1ac0d98dd5e689aeb68db234484515f96e" kindref="member">rbegin</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref>(<ref refid="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" kindref="member">end</ref>());<sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="279" refid="classao_1_1uvector_1a2e3325a0a78cd6fb6ba7293c85da2c10" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref><sp/><ref refid="classao_1_1uvector_1a2e3325a0a78cd6fb6ba7293c85da2c10" kindref="member">rbegin</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref>(<ref refid="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" kindref="member">end</ref>());<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="282" refid="classao_1_1uvector_1a580e426b99d03410df6e57dc50da8c33" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref><sp/><ref refid="classao_1_1uvector_1a580e426b99d03410df6e57dc50da8c33" kindref="member">rend</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref>(<ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref>());<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="285" refid="classao_1_1uvector_1a5c763e0f42637fbe9e63cf87734d7223" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref><sp/><ref refid="classao_1_1uvector_1a5c763e0f42637fbe9e63cf87734d7223" kindref="member">rend</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref>(<ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref>());<sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="288" refid="classao_1_1uvector_1a55134b90a07642e7374ee7361d620f72" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/><ref refid="classao_1_1uvector_1a55134b90a07642e7374ee7361d620f72" kindref="member">cbegin</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="291" refid="classao_1_1uvector_1a87d13a83df89d072e4bbea587f47e35a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/><ref refid="classao_1_1uvector_1a87d13a83df89d072e4bbea587f47e35a" kindref="member">cend</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_end;<sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="294" refid="classao_1_1uvector_1acd31db66931f8cc780b53d1711ced0d8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref><sp/><ref refid="classao_1_1uvector_1acd31db66931f8cc780b53d1711ced0d8" kindref="member">crbegin</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref>(<ref refid="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" kindref="member">end</ref>());<sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="297" refid="classao_1_1uvector_1a22f772273ac3ddaf9adc600f781d2e52" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref><sp/><ref refid="classao_1_1uvector_1a22f772273ac3ddaf9adc600f781d2e52" kindref="member">crend</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref>(<ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref>());<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="300" refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_end<sp/>-<sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="303" refid="classao_1_1uvector_1ae8a2f7c95a33b257c176b8edb3d7e880" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ae8a2f7c95a33b257c176b8edb3d7e880" kindref="member">max_size</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Alloc::max_size();<sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="314" refid="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize<sp/>=<sp/>enlarge_size(n);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>newStorage<sp/>=<sp/>allocate(newSize);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(_begin,<sp/>_end,<sp/>newStorage);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>newSize;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="337" refid="classao_1_1uvector_1a846b103e8ff6f675f481197127b4a389" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a846b103e8ff6f675f481197127b4a389" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/>val)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldSize<sp/>=<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>newStorage<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(_begin,<sp/>_end,<sp/>newStorage);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oldSize<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill&lt;Tp*,size_t&gt;(_begin<sp/>+<sp/>oldSize,<sp/>_end,<sp/>val);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="354" refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_endOfStorage<sp/>-<sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="358" refid="classao_1_1uvector_1a834534d95e4406d971a9c2599cefc790" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a834534d95e4406d971a9c2599cefc790" kindref="member">empty</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin<sp/>==<sp/>_end;<sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="369" refid="classao_1_1uvector_1a5c17d4bacbb3983c24a1477b15ec4bc7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a5c17d4bacbb3983c24a1477b15ec4bc7" kindref="member">reserve</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>curSize<sp/>=<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>newStorage<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(_begin,<sp/>_begin<sp/>+<sp/>curSize,<sp/>newStorage);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>newStorage<sp/>+<sp/>curSize;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="389" refid="classao_1_1uvector_1a08863dcb6f57dd9f7fec8190ed2055cc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a08863dcb6f57dd9f7fec8190ed2055cc" kindref="member">shrink_to_fit</ref>()</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>curSize<sp/>=<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curSize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curSize<sp/>&lt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>())<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>newStorage<sp/>=<sp/>allocate(curSize);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(_begin,<sp/>_begin<sp/>+<sp/>curSize,<sp/>newStorage);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>newStorage<sp/>+<sp/>curSize;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>curSize;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="410" refid="classao_1_1uvector_1ab025e61401da9f352c82b211377d3c66" refkind="member"><highlight class="normal"><sp/><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1ab025e61401da9f352c82b211377d3c66" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin[index];<sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="413" refid="classao_1_1uvector_1a2f353b9ea4d9b3fde8bc035efb257ee7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1a2f353b9ea4d9b3fde8bc035efb257ee7" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin[index];<sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="418" refid="classao_1_1uvector_1ab2f17d41f81b07231a38115d4337ad85" refkind="member"><highlight class="normal"><sp/><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1ab2f17d41f81b07231a38115d4337ad85" kindref="member">at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>check_bounds(index);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin[index];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="427" refid="classao_1_1uvector_1a6fe739baf292488dec65b70d88d29267" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1a6fe739baf292488dec65b70d88d29267" kindref="member">at</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="428"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>check_bounds(index);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin[index];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="434" refid="classao_1_1uvector_1aee98ea97e491f3ee31ca28e2d832ce53" refkind="member"><highlight class="normal"><sp/><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1aee98ea97e491f3ee31ca28e2d832ce53" kindref="member">front</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_begin;<sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="437" refid="classao_1_1uvector_1aa415b08862cffdcacadf13c3212af303" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1aa415b08862cffdcacadf13c3212af303" kindref="member">front</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_begin;<sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="440" refid="classao_1_1uvector_1a351232c0a0ca4e981ab64276d37ecb51" refkind="member"><highlight class="normal"><sp/><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1a351232c0a0ca4e981ab64276d37ecb51" kindref="member">back</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(_end<sp/>-<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="443" refid="classao_1_1uvector_1a77f388e6de64028142fab43234f50d4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/><ref refid="classao_1_1uvector_1a77f388e6de64028142fab43234f50d4c" kindref="member">back</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(_end<sp/>-<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="446" refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" refkind="member"><highlight class="normal"><sp/><sp/>Tp*<sp/><ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="449" refid="classao_1_1uvector_1a928c9d33d2c1b4c2cb917a8b58135a14" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp*<sp/><ref refid="classao_1_1uvector_1a928c9d33d2c1b4c2cb917a8b58135a14" kindref="member">data</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_begin;<sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="458" refid="classao_1_1uvector_1acb06505af16be08f01f5a0028da9fe88" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1acb06505af16be08f01f5a0028da9fe88" kindref="member">assign</ref>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>assign_from_range&lt;InputIterator&gt;(first,<sp/>last,<sp/>std::is_integral&lt;InputIterator&gt;());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="468" refid="classao_1_1uvector_1a6f47d3741444fa997327c2f6f7b3e6c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a6f47d3741444fa997327c2f6f7b3e6c0" kindref="member">assign</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/>val)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>())</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>newStorage<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(_begin,<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="486" refid="classao_1_1uvector_1a634a276af97bd750a36177b701a9d146" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a634a276af97bd750a36177b701a9d146" kindref="member">assign</ref>(std::initializer_list&lt;Tp&gt;<sp/>initlist)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initlist.size()<sp/>&gt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>())</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>newStorage<sp/>=<sp/>allocate(initlist.size());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>initlist.size();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>initlist.size();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>destIter<sp/>=<sp/>_begin;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Tp&gt;::const_iterator<sp/>i=initlist.begin();<sp/>i!=initlist.end();<sp/>++i)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*destIter<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++destIter;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="508" refid="classao_1_1uvector_1adcf96370233197b0a9161ccbe6fd12cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1adcf96370233197b0a9161ccbe6fd12cd" kindref="member">push_back</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/>item)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_end<sp/>==<sp/>_endOfStorage)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(1));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>*_end<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="523" refid="classao_1_1uvector_1ae2204216d5a93b14845859bfdefa4dbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1ae2204216d5a93b14845859bfdefa4dbc" kindref="member">push_back</ref>(Tp&amp;&amp;<sp/>item)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_end<sp/>==<sp/>_endOfStorage)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(1));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>*_end<sp/>=<sp/>std::move(item);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="532" refid="classao_1_1uvector_1aab5bf48390f54e1dfcf812d484b5135b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1aab5bf48390f54e1dfcf812d484b5135b" kindref="member">pop_back</ref>()</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>--_end;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="545" refid="classao_1_1uvector_1af98ccf7b248bb73ee8805f9a65f9a6a9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1af98ccf7b248bb73ee8805f9a65f9a6a9" kindref="member">insert</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/>item)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_end<sp/>==<sp/>_endOfStorage)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(1),<sp/>index,<sp/>1);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+1);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position)<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="classao_1_1uvector_1aa1a3f5fceafd44237491931013f6d0e6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1aa1a3f5fceafd44237491931013f6d0e6" kindref="member">insert</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/>val)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>n)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(n),<sp/>index,<sp/>n);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+n);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="596" refid="classao_1_1uvector_1a7aa7fe6ffc176a2b0c0c64d5f881737d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1a7aa7fe6ffc176a2b0c0c64d5f881737d" kindref="member">insert</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>insert_from_range&lt;InputIterator&gt;(position,<sp/>first,<sp/>last,<sp/>std::is_integral&lt;InputIterator&gt;());</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="613" refid="classao_1_1uvector_1aac20e88d7cd2f10f3d0073de746ba7c0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1aac20e88d7cd2f10f3d0073de746ba7c0" kindref="member">insert</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>Tp&amp;&amp;<sp/>item)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_end<sp/>==<sp/>_endOfStorage)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(1),<sp/>index,<sp/>1);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+1);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position)<sp/>=<sp/>std::move(item);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="637" refid="classao_1_1uvector_1a88716bb0affe3a4949b99f2a63851117" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1a88716bb0affe3a4949b99f2a63851117" kindref="member">insert</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>std::initializer_list&lt;Tp&gt;<sp/>initlist)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>initlist.size())</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(initlist.size()),<sp/>index,<sp/>initlist.size());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+initlist.size());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>initlist.size();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>destIter<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Tp&gt;::const_iterator<sp/>i=initlist.begin();<sp/>i!=initlist.end();<sp/>++i)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*destIter<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++destIter;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="664" refid="classao_1_1uvector_1a834bab716da5d5eae98f203511e072b7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1a834bab716da5d5eae98f203511e072b7" kindref="member">erase</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position)+1,<sp/>_end,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>--_end;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="678" refid="classao_1_1uvector_1adbc616c537e5915439524719f856b6a1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1adbc616c537e5915439524719f856b6a1" kindref="member">erase</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>first,<sp/><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>last)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(last),<sp/>_end,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(first));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>-=<sp/>last<sp/>-<sp/>first;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(first);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="696" refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" kindref="member">swap</ref>(<ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp, Alloc&gt;</ref>&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" kindref="member">swap</ref>(other,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;Alloc&gt;::propagate_on_container_swap());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="702" refid="classao_1_1uvector_1a7fc11179ac391addb252718f9134689d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a7fc11179ac391addb252718f9134689d" kindref="member">clear</ref>()</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="716" refid="classao_1_1uvector_1af4f7fba1993fff2255fc7e41db4c3c73" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1af4f7fba1993fff2255fc7e41db4c3c73" kindref="member">emplace</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_end<sp/>==<sp/>_endOfStorage)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(1),<sp/>index,<sp/>1);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+1);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position)<sp/>=<sp/>Tp(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="737" refid="classao_1_1uvector_1a92c04320e9490ae03a03c349acebb70d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a92c04320e9490ae03a03c349acebb70d" kindref="member">emplace_back</ref>(Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_end<sp/>==<sp/>_endOfStorage)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(1));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>*_end<sp/>=<sp/>Tp(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="746" refid="classao_1_1uvector_1af2ae154a74e75c0db67dcab01fde637e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref><sp/><ref refid="classao_1_1uvector_1af2ae154a74e75c0db67dcab01fde637e" kindref="member">get_allocator</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>NON<sp/>STANDARD<sp/>METHODS<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="763" refid="classao_1_1uvector_1a0352642a9593ed793434525113213a9a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/><ref refid="classao_1_1uvector_1a0352642a9593ed793434525113213a9a" kindref="member">insert_uninitialized</ref>(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>n)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(n),<sp/>index,<sp/>n);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+n);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="786" refid="classao_1_1uvector_1abaf220f5a31cf9a836c86b7fe655ad48" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1abaf220f5a31cf9a836c86b7fe655ad48" kindref="member">push_back</ref>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>push_back_range&lt;InputIterator&gt;(first,<sp/>last,<sp/>std::is_integral&lt;InputIterator&gt;());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="798" refid="classao_1_1uvector_1a58e54db140700aa9fe0ac5cad57e64d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a58e54db140700aa9fe0ac5cad57e64d2" kindref="member">push_back</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp&amp;<sp/>val)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>-<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(n));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(_end,<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="814" refid="classao_1_1uvector_1a140d21adbed27c0c8f3b8e2628561abf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a140d21adbed27c0c8f3b8e2628561abf" kindref="member">push_back</ref>(std::initializer_list&lt;Tp&gt;<sp/>initlist)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>-<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>&lt;<sp/>initlist.size())</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(initlist.size()));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Tp&gt;::iterator<sp/>i<sp/>=<sp/>initlist.begin();<sp/>i<sp/>!=<sp/>initlist.end();<sp/>++i)</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*_end<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="833" refid="classao_1_1uvector_1a0c7d62a0dcc15c42668e662180b1208f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a0c7d62a0dcc15c42668e662180b1208f" kindref="member">push_back_uninitialized</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" kindref="member">resize</ref>(<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>allocate(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Alloc::allocate(n);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deallocate()<sp/>noexcept</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate(_begin,<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>());</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deallocate(<ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/><ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>noexcept</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Alloc::deallocate(<ref refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" kindref="member">begin</ref>,<sp/>n);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct_from_range(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::false_type)</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_from_range&lt;InputIterator&gt;(first,<sp/>last,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::iterator_category());</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integral&gt;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct_from_range(Integral<sp/>n,<sp/>Integral<sp/>val,<sp/>std::true_type)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_end;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(_begin,<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct_from_range(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::forward_iterator_tag)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>std::distance(first,<sp/>last);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>Tp*<sp/>destIter<sp/>=<sp/>_begin;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(first<sp/>!=<sp/>last)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*destIter<sp/>=<sp/>*first;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++destIter;<sp/>++first;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_from_range(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::false_type)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>assign_from_range&lt;InputIterator&gt;(first,<sp/>last,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::iterator_category());</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>called<sp/>from<sp/>assign(iter,iter)<sp/>when<sp/>Tp<sp/>is<sp/>an<sp/>integral.<sp/>In<sp/>that<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>user<sp/>tried<sp/>to<sp/>call<sp/>assign(n,<sp/>&amp;val),<sp/>but<sp/>it<sp/>got<sp/>caught<sp/>by<sp/>the<sp/>wrong<sp/>overload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integral&gt;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_from_range(Integral<sp/>n,<sp/>Integral<sp/>val,<sp/>std::true_type)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(n)<sp/>&gt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>())</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>newStorage<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(_begin,<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_from_range(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::forward_iterator_tag)</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>std::distance(first,<sp/>last);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>())</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>newStorage<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>Tp*<sp/>destIter<sp/>=<sp/>_begin;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(first<sp/>!=<sp/>last)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*destIter<sp/>=<sp/>*first;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++destIter;<sp/>++first;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>insert_from_range(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::false_type)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>insert_from_range&lt;InputIterator&gt;(position,<sp/>first,<sp/>last,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::iterator_category());</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integral&gt;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>insert_from_range(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>Integral<sp/>n,<sp/>Integral<sp/>val,<sp/>std::true_type)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>n)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(n),<sp/>index,<sp/>n);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+n);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>insert_from_range(<ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref><sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::forward_iterator_tag)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>std::distance(first,<sp/>last);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>&lt;<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>n)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>position<sp/>-<sp/>_begin;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge_for_insert(enlarge_size(n),<sp/>index,<sp/>n);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>_begin<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position),<sp/>_end,<sp/>_end+n);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>Tp*<sp/>destIter<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(first<sp/>!=<sp/>last)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*destIter<sp/>=<sp/>*first;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++destIter;<sp/>++first;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(position);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_bounds(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="976"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Access<sp/>to<sp/>element<sp/>in<sp/>uvector<sp/>past<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>enlarge_size(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extra_space_needed)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/><ref refid="namespacecasacore_1a56d085b8518c627a9bf447eaa23588f0" kindref="member">std::max</ref>(<ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>(),<sp/>extra_space_needed);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enlarge(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>newStorage<sp/>=<sp/>allocate(newSize);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(_begin,<sp/>_end,<sp/>newStorage);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>newStorage<sp/>+<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>newSize;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enlarge_for_insert(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insert_position,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insert_count)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref><sp/>newStorage<sp/>=<sp/>allocate(newSize);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(_begin,<sp/>_begin<sp/>+<sp/>insert_position,<sp/>newStorage);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(_begin<sp/>+<sp/>insert_position,<sp/>_end,<sp/>newStorage<sp/>+<sp/>insert_position<sp/>+<sp/>insert_count);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>newStorage<sp/>+<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>+<sp/>insert_count;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_begin<sp/>+<sp/>newSize;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>operator=(const&amp;)<sp/>without<sp/>propagate_on_container_copy_assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" kindref="member">uvector</ref>&amp;<sp/>assign_copy_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uvector&lt;Tp,Alloc&gt;&amp;<sp/>other,<sp/>std::false_type)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>other.size();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>newStorage<sp/>=<sp/>allocate(n);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_end;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(other._begin,<sp/>other._begin<sp/>+<sp/>n,<sp/>_begin);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>operator=(const&amp;)<sp/>with<sp/>propagate_on_container_copy_assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" kindref="member">uvector</ref>&amp;<sp/>assign_copy_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uvector&lt;Tp,Alloc&gt;&amp;<sp/>other,<sp/>std::true_type)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allocator_is_always_equal()<sp/>||<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other)<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assign_copy_from(other,<sp/>std::false_type());</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>other.size();</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref><sp/>newStorage<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other).allocate(n);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>newStorage;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>_begin<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>_end;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(other._begin,<sp/>other._begin<sp/>+<sp/>n,<sp/>_begin);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Alloc::operator=(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>operator=()<sp/>without<sp/>propagate_on_container_move_assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" kindref="member">uvector</ref>&amp;<sp/>assign_move_from(uvector&lt;Tp,Alloc&gt;&amp;&amp;<sp/>other,<sp/>std::false_type)<sp/>noexcept(allocator_is_always_equal::value)</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allocator_is_always_equal::value<sp/>||<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other)<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>other._begin;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>other._end;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>other._endOfStorage;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other._begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other._end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other._endOfStorage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>not<sp/>propagate<sp/>the<sp/>allocator<sp/>and<sp/>the<sp/>allocators<sp/>are<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>we<sp/>can<sp/>not<sp/>swap<sp/>the<sp/>allocated<sp/>space,<sp/>since<sp/>then<sp/>we<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deallocate<sp/>the<sp/>space<sp/>with<sp/>a<sp/>different<sp/>allocator<sp/>type.<sp/>Therefore,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assign_copy_from(other,<sp/>std::false_type());</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>operator=()<sp/>with<sp/>propagate_on_container_move_assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" kindref="member">uvector</ref>&amp;<sp/>assign_move_from(uvector&lt;Tp,Alloc&gt;&amp;&amp;<sp/>other,<sp/>std::true_type)<sp/>noexcept</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc::operator=(std::move(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other)));</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>_begin<sp/>=<sp/>other._begin;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>=<sp/>other._end;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>_endOfStorage<sp/>=<sp/>other._endOfStorage;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>other._begin<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>other._end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>other._endOfStorage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>swap<sp/>with<sp/>propagate_on_container_swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" kindref="member">swap</ref>(uvector&lt;Tp,Alloc&gt;&amp;<sp/>other,<sp/>std::true_type)<sp/>noexcept</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(_begin,<sp/>other._begin);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(_end,<sp/>other._end);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(_endOfStorage,<sp/>other._endOfStorage);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Alloc&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>swap<sp/>without<sp/>propagate_on_container_swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" kindref="member">swap</ref>(uvector&lt;Tp,Alloc&gt;&amp;<sp/>other,<sp/>std::false_type)<sp/>noexcept</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(_begin,<sp/>other._begin);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(_end,<sp/>other._end);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">std::swap</ref>(_endOfStorage,<sp/>other._endOfStorage);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back_range(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::false_type)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>push_back_range&lt;InputIterator&gt;(first,<sp/>last,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::iterator_category());</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>called<sp/>from<sp/>push_back(iter,iter)<sp/>when<sp/>Tp<sp/>is<sp/>an<sp/>integral.<sp/>In<sp/>that<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>user<sp/>tried<sp/>to<sp/>call<sp/>push_back(n,<sp/>&amp;val),<sp/>but<sp/>it<sp/>got<sp/>caught<sp/>by<sp/>the<sp/>wrong<sp/>overload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integral&gt;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back_range(Integral<sp/>n,<sp/>Integral<sp/>val,<sp/>std::true_type)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>-<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>()<sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(n))</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(n));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n&lt;Tp*,size_t&gt;(_end,<sp/>n,<sp/>val);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>_end<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back_range(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,<sp/>std::forward_iterator_tag)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>std::distance(first,<sp/>last);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/><ref refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" kindref="member">capacity</ref>()<sp/>-<sp/><ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enlarge(enlarge_size(n));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(first<sp/>!=<sp/>last)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*_end<sp/>=<sp/>*first;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++_end;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++first;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1156" refid="group__uvector_1ga6196ce441dcb8fdf40044c9f97162c7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1ga6196ce441dcb8fdf40044c9f97162c7b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()==rhs.size()<sp/>&amp;&amp;<sp/>std::equal(lhs.begin(),<sp/>lhs.end(),<sp/>rhs.begin());</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1163" refid="group__uvector_1gafb207c1bc16ae6e2a97e5510eba92938" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1gafb207c1bc16ae6e2a97e5510eba92938" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1173" refid="group__uvector_1gacb4462b3426b8c6966bb792de38a7b1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1gacb4462b3426b8c6966bb792de38a7b1d" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minSize<sp/>=<sp/><ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::min</ref>(lhs.size(),<sp/>rhs.size());</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=minSize;<sp/>++i)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs[i]<sp/>&lt;<sp/>rhs[i])</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs[i]<sp/>&gt;<sp/>rhs[i])</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>&lt;<sp/>rhs.size();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1191" refid="group__uvector_1ga5fb5b1ceadbb118ea781115be51cf9db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1ga5fb5b1ceadbb118ea781115be51cf9db" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minSize<sp/>=<sp/><ref refid="namespacecasacore_1a52c2516271638660cf3c313ddad928fe" kindref="member">std::min</ref>(lhs.size(),<sp/>rhs.size());</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i!=minSize;<sp/>++i)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs[i]<sp/>&lt;<sp/>rhs[i])</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs[i]<sp/>&gt;<sp/>rhs[i])</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>&lt;=<sp/>rhs.size();</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1209" refid="group__uvector_1ga0426b11740b0522d75be11c46b255a00" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1ga0426b11740b0522d75be11c46b255a00" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>&lt;<sp/>lhs;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1219" refid="group__uvector_1ga903ae5c38e3b697286b47687e46864d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1ga903ae5c38e3b697286b47687e46864d5" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>&lt;=<sp/>lhs;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tp,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="1235" refid="group__uvector_1gafa4ace9f13754144148fe51884355788" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__uvector_1gafa4ace9f13754144148fe51884355788" kindref="member">swap</ref>(<ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>x,<sp/><ref refid="classao_1_1uvector" kindref="compound">uvector&lt;Tp,Alloc&gt;</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>x.<ref refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" kindref="member">swap</ref>(y);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>namespace<sp/>ao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>AO_UVECTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="tables/Dysco/uvector.h"/>
  </compounddef>
</doxygen>
