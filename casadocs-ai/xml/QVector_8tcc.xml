<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="QVector_8tcc" kind="file" language="C++">
    <compoundname>QVector.tcc</compoundname>
    <includedby refid="QVector_8h" local="no">casa/Quanta/QVector.h</includedby>
    <invincdepgraph>
      <node id="2">
        <label>casa/Quanta/QVector.h</label>
        <link refid="QVector_8h"/>
      </node>
      <node id="1">
        <label>casa/Quanta/QVector.tcc</label>
        <link refid="QVector_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1996,1998,1999,2002</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_QVECTOR_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_QVECTOR_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Quanta/QVector.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/ArrayMath.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>QVector&lt;T&gt;::QVector()<sp/>:<sp/>Quantum&lt;Vector&lt;T&gt;<sp/>&gt;()<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>QVector&lt;T&gt;::QVector(const<sp/>Vector&lt;T&gt;&amp;<sp/>v,<sp/>const<sp/>Unit&amp;<sp/>u)<sp/>:<sp/>Quantum&lt;Vector&lt;T&gt;<sp/>&gt;(v,<sp/>u)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>QVector&lt;T&gt;::QVector(const<sp/>Vector&lt;Quantum&lt;T&gt;<sp/>&gt;&amp;<sp/>q)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Quantum&lt;Vector&lt;T&gt;<sp/>&gt;(Vector&lt;T&gt;(q.size()),<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>n<sp/>=<sp/>q.size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Unit<sp/>u(q[0].getFullUnit());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setUnit(u);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>copy(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Vector&lt;T&gt;::iterator<sp/>iter<sp/>=<sp/>copy.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Vector&lt;T&gt;::iterator<sp/>end<sp/>=<sp/>copy.end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Vector&lt;Quantum&lt;T&gt;<sp/>&gt;::const_iterator<sp/>qiter<sp/>=<sp/>q.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(iter<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>qiter-&gt;getValue(u,<sp/>True);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++qiter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setValue(copy);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>Quantum&lt;T&gt;<sp/>QVector&lt;T&gt;::operator[](uInt<sp/>index)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Quantum&lt;T&gt;(this-&gt;getValue()[index],<sp/>this-&gt;getUnit());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>size_t<sp/>QVector&lt;T&gt;::size()<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>this-&gt;getValue().size();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>size_t<sp/>QVector&lt;T&gt;::nelements()<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>this-&gt;getValue().nelements();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>void<sp/>QVector&lt;T&gt;::scale(T<sp/>d)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;setValue(d*this-&gt;getValue());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>QVector&lt;T&gt;<sp/>QVector&lt;T&gt;::operator+(const<sp/>QVector&lt;T&gt;&amp;<sp/>that)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>QVector&lt;T&gt;(this-&gt;getValue()<sp/>+<sp/>that.getValue(this-&gt;getFullUnit()),<sp/>this-&gt;getFullUnit());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>QVector&lt;T&gt;<sp/>QVector&lt;T&gt;::operator-(const<sp/>QVector&lt;T&gt;&amp;<sp/>that)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>QVector&lt;T&gt;(this-&gt;getValue()<sp/>-<sp/>that.getValue(this-&gt;getFullUnit()),<sp/>this-&gt;getFullUnit());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>QVector&lt;T&gt;<sp/>QVector&lt;T&gt;::operator/(const<sp/>T<sp/>d)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>QVector&lt;T&gt;((Vector&lt;T&gt;)(this-&gt;getValue()/d),<sp/>this-&gt;getFullUnit());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>Quantum&lt;T&gt;<sp/>QVector&lt;T&gt;::min()<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Quantum&lt;T&gt;(casacore::min(this-&gt;getValue()),<sp/>this-&gt;getFullUnit());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>Quantum&lt;T&gt;<sp/>QVector&lt;T&gt;::max()<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Quantum&lt;T&gt;(casacore::max(this-&gt;getValue()),<sp/>this-&gt;getFullUnit());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/Quanta/QVector.tcc"/>
  </compounddef>
</doxygen>
