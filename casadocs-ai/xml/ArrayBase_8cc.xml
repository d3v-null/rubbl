<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ArrayBase_8cc" kind="file" language="C++">
    <compoundname>ArrayBase.cc</compoundname>
    <includes refid="ArrayBase_8h" local="yes">ArrayBase.h</includes>
    <includes refid="ArrayError_8h" local="yes">ArrayError.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="13">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="10">
        <label>ArrayError.h</label>
        <link refid="ArrayError_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/types.h</label>
      </node>
      <node id="3">
        <label>IPosition.h</label>
        <link refid="IPosition_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>casa/Arrays/ArrayBase.cc</label>
        <link refid="ArrayBase_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>ArrayFwd.h</label>
        <link refid="ArrayFwd_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ArrayBase.h</label>
        <link refid="ArrayBase_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="8">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#<sp/>ArrayBase.cc:<sp/>Non-templated<sp/>base<sp/>class<sp/>for<sp/>templated<sp/>Array<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Copyright<sp/>(C)<sp/>1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ArrayBase_8h" kindref="compound">ArrayBase.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ArrayError_8h" kindref="compound">ArrayError.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecasacore" kindref="compound">casacore</ref><sp/>{<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="classcasacore_1_1ArrayBase_1a64bfcef3a280672fbff97e81986114e7" kindref="member">ArrayBase::ArrayBase</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="35"><highlight class="normal">:<sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ndimen_p<sp/><sp/><sp/><sp/><sp/>(0),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>contiguous_p<sp/>(true)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayShapeError</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="classcasacore_1_1ArrayBase_1a64bfcef3a280672fbff97e81986114e7" kindref="member">ArrayBase::ArrayBase</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>Shape)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">:<sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Shape.<ref refid="namespacecasacore_1a822cd8c7c28fee1811751a6f5e06464a" kindref="member">product</ref>()),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ndimen_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Shape.<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>()),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>contiguous_p<sp/><sp/><sp/><sp/><sp/>(true),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>length_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Shape),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>inc_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Shape.<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>(),<sp/>1),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>originalLength_p<sp/>(Shape)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndimen_p;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Shape(i)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayShapeError(<ref refid="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" kindref="member">shape</ref>(),<sp/>Shape,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::Array(const<sp/>IPosition&amp;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Negative<sp/>shape&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>baseMakeSteps();</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">ArrayBase::ArrayBase<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayBase&amp;<sp/>other)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">:<sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.nels_p),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>ndimen_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.ndimen_p),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>contiguous_p<sp/><sp/><sp/><sp/><sp/>(other.contiguous_p),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>length_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.length_p),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>inc_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.inc_p),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>originalLength_p<sp/>(other.originalLength_p),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>steps_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.steps_p)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">ArrayBase::ArrayBase<sp/>(ArrayBase&amp;&amp;<sp/>source)<sp/>noexcept</highlight></codeline>
<codeline lineno="72"><highlight class="normal">:<sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.nels_p),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ndimen_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.ndimen_p),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>contiguous_p<sp/><sp/><sp/><sp/><sp/>(source.contiguous_p),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>length_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.length_p),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>inc_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.inc_p),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>originalLength_p<sp/>(source.originalLength_p),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>steps_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.steps_p)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>source<sp/>empty<sp/>(self-assignment<sp/>of<sp/>move<sp/>object<sp/>is<sp/>not<sp/>allowed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>source.nels_p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>source.ndimen_p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>source.contiguous_p<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>source.length_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>source.inc_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>source.originalLength_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>source.steps_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">ArrayBase::ArrayBase<sp/>(ArrayBase&amp;&amp;<sp/>source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>shapeForSource)<sp/>noexcept</highlight></codeline>
<codeline lineno="91"><highlight class="normal">:<sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.nels_p),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>ndimen_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.ndimen_p),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>contiguous_p<sp/><sp/><sp/><sp/><sp/>(source.contiguous_p),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>length_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.length_p),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>inc_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.inc_p),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>originalLength_p<sp/>(source.originalLength_p),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>steps_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(source.steps_p)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>source<sp/>to<sp/>have<sp/>given<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>source.nels_p<sp/>=<sp/>shapeForSource.product();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>source.ndimen_p<sp/>=<sp/>shapeForSource.nelements();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>source.contiguous_p<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>source.length_p<sp/>=<sp/>shapeForSource;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>source.inc_p<sp/>=<sp/>IPosition(shapeForSource.nelements(),<sp/>1);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>source.originalLength_p<sp/>=<sp/>shapeForSource;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>source.steps_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">ArrayBase&amp;<sp/>ArrayBase::assign<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayBase&amp;<sp/>other)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.nels_p;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ndimen_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.ndimen_p;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>contiguous_p<sp/><sp/><sp/><sp/><sp/>=<sp/>other.contiguous_p;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndimen_p<sp/>!=<sp/>length_p.nelements())<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.length_p;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.inc_p;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p<sp/>=<sp/>other.originalLength_p;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>steps_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.steps_p;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">ArrayBase&amp;<sp/>ArrayBase::operator=(ArrayBase&amp;&amp;<sp/>source)<sp/>noexcept</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>nels_p<sp/>=<sp/>source.nels_p;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>ndimen_p<sp/>=<sp/>source.ndimen_p;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>contiguous_p<sp/>=<sp/>source.contiguous_p;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>length_p<sp/>=<sp/>std::move(source.length_p);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>inc_p<sp/>=<sp/>std::move(source.inc_p);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>originalLength_p<sp/>=<sp/>std::move(source.originalLength_p);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>steps_p<sp/>=<sp/>std::move(source.steps_p);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>source<sp/>empty<sp/>(self-assignment<sp/>of<sp/>move<sp/>object<sp/>is<sp/>not<sp/>allowed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>source.nels_p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>source.ndimen_p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>source.contiguous_p<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>source.length_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>source.inc_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>source.originalLength_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>source.steps_p<sp/>=<sp/>IPosition();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">ArrayBase::~ArrayBase()<sp/>noexcept</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">ArrayBase::swap</ref>(ArrayBase&amp;<sp/>source)<sp/>noexcept</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(nels_p,<sp/>source.nels_p);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(ndimen_p,<sp/>source.ndimen_p);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(contiguous_p,<sp/>source.contiguous_p);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(length_p,<sp/>source.length_p);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(inc_p,<sp/>source.inc_p);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(originalLength_p,<sp/>source.originalLength_p);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="namespacecasacore_1abf6d761a92af71f19aa3ae1162d9fe0c" kindref="member">std::swap</ref>(steps_p,<sp/>source.steps_p);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::baseReform<sp/>(ArrayBase&amp;<sp/>tmp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strict)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="166"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>reform<sp/>can<sp/>be<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>prod<sp/>=<sp/>len.nelements()==0<sp/>?<sp/>0<sp/>:<sp/>len.product();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strict<sp/>&amp;&amp;<sp/>prod<sp/>!=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayConformanceError(</highlight><highlight class="stringliteral">&quot;ArrayBase::reform()<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;total<sp/>elements<sp/>differ:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacecasacore_1a7dca4cd157d0dcbdf6f665bb905f0369" kindref="member">to_string</ref>(len)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacecasacore_1a7dca4cd157d0dcbdf6f665bb905f0369" kindref="member">to_string</ref>(<ref refid="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" kindref="member">shape</ref>())));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>if<sp/>the<sp/>new<sp/>shape<sp/>equals<sp/>the<sp/>current<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len.isEqual(length_p))<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newNdim<sp/>=<sp/>len.nelements();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>data<sp/>is<sp/>contiguous,<sp/>a<sp/>reform<sp/>can<sp/>simply<sp/>be<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>inserting<sp/>the<sp/>new<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contiguousStorage())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.ndimen_p<sp/>=<sp/>newNdim;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.length_p.resize<sp/>(newNdim);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.length_p<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.inc_p.resize<sp/>(newNdim);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.inc_p<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.originalLength_p.resize<sp/>(newNdim);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.originalLength_p<sp/>=<sp/>tmp.length_p;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.nels_p<sp/>=<sp/>len.product();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.baseMakeSteps();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>reform<sp/>of<sp/>a<sp/>non-contiguous<sp/>array<sp/>has<sp/>to<sp/>be<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>only<sp/>possible<sp/>if<sp/>axes<sp/>with<sp/>length<sp/>1<sp/>are<sp/>left<sp/>out<sp/>and/or<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldPos=0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newPos=0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldLen<sp/>=<sp/>length_p(0);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLen<sp/>=<sp/>len(0);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>axes<sp/>corresponding<sp/>to<sp/>the<sp/>old<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copyAxes(i)&lt;0<sp/>indicates<sp/>that<sp/>an<sp/>axis<sp/>with<sp/>length<sp/>1<sp/>has<sp/>been<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>shape<sp/>array<sp/>array<sp/>is<sp/>exhausted,<sp/>its<sp/>length<sp/>variable<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>0.<sp/>In<sp/>that<sp/>way<sp/>trailing<sp/>dimensions<sp/>are<sp/>handled<sp/>without<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>IPosition<sp/>copyAxes(newNdim,<sp/>-1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(valid<sp/><sp/>&amp;&amp;<sp/><sp/>(oldLen&gt;0<sp/><sp/>||<sp/><sp/>newLen&gt;0))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldLen<sp/>==<sp/>newLen)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyAxes(newPos)<sp/>=<sp/>oldPos;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldPos++;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPos++;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldLen<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldPos++;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newLen<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPos++;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>new<sp/>axis<sp/>with<sp/>length&gt;1<sp/>has<sp/>no<sp/>corresponding<sp/>original<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>oldLen<sp/>=<sp/>(oldPos<sp/>&gt;=<sp/>length_p.nelements()<sp/><sp/>?<sp/><sp/>0<sp/>:<sp/>length_p(oldPos));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>newLen<sp/>=<sp/>(newPos<sp/>&gt;=<sp/>len.nelements()<sp/><sp/>?<sp/><sp/>0<sp/>:<sp/>len(newPos));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayConformanceError(</highlight><highlight class="stringliteral">&quot;ArrayBase::reform()<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;data<sp/>not<sp/>contiguous<sp/>nor<sp/>similarly<sp/>shaped&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Great,<sp/>the<sp/>shapes<sp/>match.<sp/>Adjust<sp/>the<sp/>IPositions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>inc<sp/>and<sp/>originalLength<sp/>initially<sp/>to<sp/>1<sp/>(caters<sp/>for<sp/>added<sp/>axes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>tmp.ndimen_p<sp/>=<sp/>newNdim;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>tmp.length_p.resize<sp/>(newNdim);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>tmp.length_p<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>tmp.inc_p.resize<sp/>(newNdim);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>tmp.inc_p<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>tmp.originalLength_p.resize<sp/>(newNdim);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>tmp.originalLength_p<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>an<sp/>axis<sp/>has<sp/>been<sp/>removed<sp/>Inc<sp/>and<sp/>originalLength<sp/>have<sp/>to<sp/>be<sp/>adjusted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>multiplying<sp/>them<sp/>with<sp/>the<sp/>originalLength<sp/>of<sp/>the<sp/>removed<sp/>axes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>startAxis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;newNdim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copyAxes(i)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp.inc_p(i)<sp/>=<sp/>inc_p(copyAxes(i));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp.originalLength_p(i)<sp/>=<sp/>originalLength_p(copyAxes(i));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=startAxis;<sp/>j&lt;copyAxes(i);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>tmp.inc_p(i)<sp/>*=<sp/>originalLength_p(j);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>tmp.originalLength_p(i)<sp/>*=<sp/>originalLength_p(j);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startAxis<sp/>=<sp/>copyAxes(i)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>tmp.baseMakeSteps();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::baseNonDegenerate<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayBase&amp;<sp/>other,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>ignoreAxes)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(other.ndim()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>data<sp/>members<sp/>are<sp/>the<sp/>same<sp/>irrespective<sp/>of<sp/>the<sp/>degenerate<sp/>axes.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.nels_p;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>contiguous_p<sp/>=<sp/>other.contiguous_p;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>remove<sp/>degenerate<sp/>axes<sp/>use<sp/>two<sp/>passes<sp/>-<sp/>first<sp/>find<sp/>out<sp/>how<sp/>many<sp/>axes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>be<sp/>kept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nd<sp/>=<sp/>other.ndim();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>determine<sp/>which<sp/>axes<sp/>have<sp/>to<sp/>be<sp/>ignored,<sp/>thus<sp/>always<sp/>be<sp/>kept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>count<sp/>here,<sp/>because<sp/>in<sp/>theory<sp/>ignoreAxes<sp/>can<sp/>contain<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>axis<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>IPosition<sp/>keepAxes(nd,<sp/>0);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;ignoreAxes.nelements();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(ignoreAxes(i)<sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(nd));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>keepAxes(ignoreAxes(i))<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>count<sp/>all<sp/>axes<sp/>to<sp/>keep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;nd;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keepAxes(i)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.length_p(i)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>keepAxes(i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>special<sp/>case<sp/>-<sp/>all<sp/>axes<sp/>have<sp/>length=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>ndimen_p<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p.resize(1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p(0)<sp/>=<sp/>other.length_p(0);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p.resize(1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p(0)<sp/>=<sp/>other.inc_p(0);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p.resize(1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p(0)<sp/>=<sp/>other.originalLength_p(0);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ndimen_p<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p.resize(count,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p.resize(count,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p.resize(count,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>we<sp/>have<sp/>no<sp/>axes<sp/>to<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>other.ndim()){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p<sp/>=<sp/>other.length_p;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p<sp/>=<sp/>other.originalLength_p;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p<sp/>=<sp/>other.inc_p;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OK,<sp/>we<sp/>have<sp/>some<sp/>axes<sp/>to<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>skippedVolume<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;nd;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keepAxes(i)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p(count)<sp/>=<sp/>other.length_p(i);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p(count)<sp/>=</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skippedVolume*other.originalLength_p(i);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p(count)<sp/>=<sp/>skippedVolume*other.inc_p(i);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>skippedVolume<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>skippedVolume<sp/>*=<sp/>other.originalLength_p(i);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>baseMakeSteps();</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::baseAddDegenerate<sp/>(ArrayBase&amp;<sp/>tmp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numAxes)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newDim<sp/>=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>+<sp/>numAxes;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>IPosition<sp/>newLength(newDim),<sp/>newInc(newDim),<sp/>newOriginal(newDim);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>newLength(i)<sp/>=<sp/>length_p(i);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>newOriginal(i)<sp/>=<sp/>originalLength_p(i);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>newInc(i)<sp/>=<sp/>inc_p(i);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>i<sp/>&lt;<sp/>newDim;<sp/>i++){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>newLength(i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>newOriginal(i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>newInc(i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>tmp.ndimen_p<sp/>=<sp/>newDim;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>tmp.length_p.resize<sp/>(newDim);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>tmp.length_p<sp/>=<sp/>newLength;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>tmp.inc_p.resize<sp/>(newDim);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>tmp.inc_p<sp/>=<sp/>newInc;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>tmp.originalLength_p.resize<sp/>(newDim);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>tmp.originalLength_p<sp/>=<sp/>newOriginal;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>tmp.baseMakeSteps();</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">ArrayBase::reformOrResize<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition<sp/>&amp;<sp/>newShape,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resizeIfNeeded,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nReferences,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nElementsAllocated,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyDataIfNeeded,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>resizePercentage)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(ok());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newShape.isEqual<sp/>(<ref refid="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" kindref="member">shape</ref>())){</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>operation<sp/>is<sp/>legal<sp/>in<sp/>this<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>======================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>operation<sp/>must<sp/>not<sp/>change<sp/>the<sp/>dimensionality<sp/>as<sp/>this<sp/>could<sp/>cause<sp/>a<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>as<sp/>a<sp/>vector<sp/>to<sp/>become<sp/>a<sp/>Matrix,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newShape.size()<sp/>!=<sp/><ref refid="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" kindref="member">shape</ref>().size()){</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::reformOrResize()<sp/>-<sp/>Cannot<sp/>change<sp/>number<sp/>of<sp/>dimensions.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError<sp/>(message);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>operation<sp/>only<sp/>makes<sp/>sense<sp/>if<sp/>the<sp/>storage<sp/>is<sp/>contiguous.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>contiguousStorage()){</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::reformOrResize()<sp/>-<sp/>array<sp/>must<sp/>be<sp/>contiguous&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError(message);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>array<sp/>is<sp/>sharing<sp/>storage,<sp/>then<sp/>the<sp/>other<sp/>array<sp/>could<sp/>become<sp/>dangerously<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>result<sp/>of<sp/>this<sp/>operation,<sp/>so<sp/>prohibit<sp/>sharing<sp/>while<sp/>this<sp/>operation<sp/>is<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>performed.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nReferences<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::reformOrResize()<sp/>-<sp/>array<sp/>must<sp/>not<sp/>be<sp/>shared<sp/>during<sp/>this<sp/>call&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError(message);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resizeNeeded<sp/>=<sp/>(newShape.product()<sp/>&gt;<sp/>nElementsAllocated);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizeNeeded<sp/>&amp;&amp;<sp/>!<sp/>resizeIfNeeded){</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>did<sp/>not<sp/>permit<sp/>resizing<sp/>but<sp/>it<sp/>is<sp/>required<sp/>so<sp/>throw<sp/>and<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::reformOrResize()<sp/>-<sp/>insufficient<sp/>storage<sp/>for<sp/>reform:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nElementInAllocation=&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacecasacore_1a7dca4cd157d0dcbdf6f665bb905f0369" kindref="member">std::to_string</ref>(nElementsAllocated)<sp/>+</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>nElementsRequested=&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacecasacore_1a7dca4cd157d0dcbdf6f665bb905f0369" kindref="member">std::to_string</ref>(newShape.product());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError(message);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>operation<sp/>is<sp/>legal,<sp/>so<sp/>perform<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=====================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resetEnd<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Caller<sp/>will<sp/>need<sp/>to<sp/>reset<sp/>the<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizeNeeded){</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insufficient<sp/>storage<sp/>so<sp/>resize<sp/>required,<sp/>with<sp/>or<sp/>without<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizePercentage<sp/>&lt;=<sp/>0){</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>an<sp/>exact<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize<sp/>(newShape,<sp/>copyDataIfNeeded);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resetEnd<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Padding<sp/>was<sp/>requested<sp/>so<sp/>resize<sp/>to<sp/>match<sp/>the<sp/>padded<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>reform<sp/>it<sp/>to<sp/>use<sp/>the<sp/>desired<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition<sp/>paddedShape;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/>=<sp/>newShape;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape.last()<sp/>=<sp/>(paddedShape.last()<sp/>*<sp/>(100<sp/>+<sp/>resizePercentage))<sp/>/<sp/>100;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize<sp/>(paddedShape,<sp/>copyDataIfNeeded);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reform<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseReform<sp/>(*<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>newShape,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseReform<sp/>(*<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>newShape,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resetEnd;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayError</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ArrayBase::makeSubset<sp/>(ArrayBase&amp;<sp/>out,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>b,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/><ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>i)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.nelements()<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>||<sp/><ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>.nelements()<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>||</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i.nelements()<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>())<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::operator()(b,e,i)<sp/>-<sp/>ndim()<sp/>b:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.nelements()</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>e:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>.nelements()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>i:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>i.nelements()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>differs<sp/>from<sp/>the<sp/>array<sp/>ndim<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayError(os.str()));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b(j)<sp/>&lt;<sp/>0<sp/>||<sp/>b(j)<sp/>&gt;<sp/><ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>(j)+1</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/><sp/><ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>(j)<sp/>&gt;=<sp/>length_p(j)<sp/><sp/>||<sp/><sp/>i(j)<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::operator()(b,e,i)<sp/>-<sp/>incorrectly<sp/>specified\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;begin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;end:<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;incr:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;array<sp/>shape:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length_p<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;required:<sp/>b<sp/>&gt;=<sp/>0;<sp/>b<sp/>&lt;=<sp/>e;<sp/>e<sp/>&lt;<sp/>shape;<sp/>i<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayError(os.str()));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offs=0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;ndimen_p;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>offs<sp/>+=<sp/>b(j)<sp/>*<sp/>steps_p(j);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>out.inc_p(j)<sp/>*=<sp/>i(j);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>out.length_p(j)<sp/>=<sp/>(<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>(j)<sp/>-<sp/>b(j)<sp/>+<sp/>i(j))/i(j);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>out.nels_p<sp/>=<sp/>out.length_p.product();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>out.contiguous_p<sp/>=<sp/>out.isStorageContiguous();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>out.baseMakeSteps();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offs;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ArrayBase::makeDiagonal<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>firstAxis,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>diag)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(firstAxis+1<sp/>&lt;<sp/>ndimen_p);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p[firstAxis]<sp/>!=<sp/>length_p[firstAxis+1])<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError(</highlight><highlight class="stringliteral">&quot;ArrayBase::diagonal()<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;non-square<sp/>matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(diag)<sp/>&gt;=<sp/>length_p[firstAxis])</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError(</highlight><highlight class="stringliteral">&quot;ArrayBase::diagonal()<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;diagonal<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>first<sp/>axis<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>ndimen_p--;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>originalLength<sp/>and<sp/>stride<sp/>to<sp/>both<sp/>axes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stride<sp/>(in<sp/>original<sp/>array)<sp/>is<sp/>basically<sp/>length+1.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>inc_p[firstAxis]<sp/>+=<sp/>(inc_p[firstAxis+1]<sp/>*<sp/>originalLength_p[firstAxis]);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>originalLength_p[firstAxis]<sp/>*=<sp/>originalLength_p[firstAxis+1];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=firstAxis+1;<sp/>i&lt;ndimen_p;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p[i]<sp/>=<sp/>length_p[i+1];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p[i]<sp/>=<sp/>inc_p[i+1];</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p[i]<sp/>=<sp/>originalLength_p[i+1];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>length_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>inc_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>originalLength_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>off-diagonal<sp/>&apos;diagonal&apos;<sp/>has<sp/>a<sp/>shorter<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>length_p[firstAxis]<sp/>-=<sp/><ref refid="namespacecasacore_1aa7a6cff8d33937dfac7adf4b89512ef6" kindref="member">std::abs</ref>(diag);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>nels_p<sp/>=<sp/>length_p.product();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>contiguous_p<sp/>=<sp/>isStorageContiguous();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>first<sp/>diagonal<sp/>element<sp/>(in<sp/>original<sp/>array).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offs=0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diag<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>offs<sp/>=<sp/>diag<sp/>*<sp/>steps_p[firstAxis+1];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>offs<sp/>=<sp/>(-diag)<sp/>*<sp/>steps_p[firstAxis];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>baseMakeSteps();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offs;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayNDimErrror</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayShapeError</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::validateConformance<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayBase&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="532"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(ok());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="namespacecasacore_1a879dbd49d03b3d71abbc81f6917fdac9" kindref="member">conform2</ref>(other))<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>!=<sp/>other.ndim())<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayNDimError(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>(),<sp/>other.ndim(),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::validateConformance&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayShapeError(<ref refid="namespacecasacore_1a6c80d55c1617e8540e006c12e3dc990c" kindref="member">shape</ref>(),<sp/>other.shape(),</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::validateConformance&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayNDimErrror</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayIndexError</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;/thrown&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::validateIndex<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="550"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(ok());</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>!=<sp/>i.nelements())<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayNDimError(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>(),<sp/>i.nelements(),</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayBase::validateIndex<sp/>-<sp/>ndims<sp/>of<sp/>index&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>array<sp/>differ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i(j)<sp/>&lt;<sp/>0<sp/><sp/>||<sp/><sp/>i(j)<sp/>&gt;=<sp/>length_p(j))<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayIndexError(i,<sp/>length_p));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OK<sp/>-<sp/>normal<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::validateIndex<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="566"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>validateIndex<sp/>(IPosition(1,<sp/>index));</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::validateIndex<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="570"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>IPosition<sp/>inx(2);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>inx[0]<sp/>=<sp/>index1;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>inx[1]<sp/>=<sp/>index2;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>validateIndex<sp/>(inx);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::validateIndex<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="577"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>IPosition<sp/>inx(3);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>inx[0]<sp/>=<sp/>index1;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>inx[1]<sp/>=<sp/>index2;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>inx[2]<sp/>=<sp/>index3;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>validateIndex<sp/>(inx);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArrayBase::copyVectorHelper<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayBase&amp;<sp/>other)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Conform<sp/>=<sp/><ref refid="namespacecasacore_1a879dbd49d03b3d71abbc81f6917fdac9" kindref="member">conform2</ref>(other);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Conform<sp/><sp/>&amp;&amp;<sp/><sp/>length_p(0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>validateConformance(other);<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>overwrite,<sp/>so<sp/>throw<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Conform)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.length_p;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>nels_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.nels_p;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p<sp/>=<sp/>length_p;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMakeSteps();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Conform;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArrayBase::isStorageContiguous()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="601"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nd<sp/>=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>increments,<sp/>we&apos;re<sp/>definitely<sp/>not<sp/>contiguous<sp/>(unless<sp/>the<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>length<sp/>is<sp/>one!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>nd;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inc_p(i)<sp/>!=<sp/>1)<sp/>&amp;&amp;<sp/>(length_p(i)<sp/>!=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t<sp/>fill<sp/>up<sp/>the<sp/>region<sp/>(except<sp/>for<sp/>the<sp/>last<sp/>dimension),<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>also<sp/>not<sp/>contiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+---+<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here,<sp/>even<sp/>though<sp/>the<sp/>increment<sp/>is<sp/>one,<sp/>we<sp/>need<sp/>to<sp/>make<sp/>a<sp/>copy<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>sub-region<sp/>aren&apos;t<sp/>contiguous.<sp/>Note,<sp/>though,<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lengths<sp/>don&apos;t<sp/>need<sp/>to<sp/>be<sp/>identical<sp/>in<sp/>the<sp/>last<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trailing<sp/>lengths<sp/>equal<sp/>to<sp/>1<sp/>can<sp/>be<sp/>skipped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nd<sp/>&gt;<sp/>1<sp/><sp/>&amp;&amp;<sp/><sp/>length_p(nd-1)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>nd--;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>nd<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p(i)<sp/>!=<sp/>originalLength_p(i))<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;ve<sp/>made<sp/>it<sp/>here,<sp/>we<sp/>are<sp/>contiguous!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::baseMakeSteps()</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>Assert<sp/>since<sp/>the<sp/>Array<sp/>may<sp/>not<sp/>be<sp/>constructed<sp/>yet<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calling<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>steps_p.resize<sp/>(ndimen_p);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;inc_p.nelements();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>steps_p(i)<sp/>=<sp/>inc_p(i)<sp/>*<sp/>size;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>originalLength_p(i);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">IPosition<sp/>ArrayBase::endPosition()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="656"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(ok());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>IPosition<sp/>tmp(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>());</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp(i)<sp/>=<sp/>length_p(i)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArrayBase::ok()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="666"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(ndimen_p<sp/>==<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>());</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(length_p.nelements()<sp/>==<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>());</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(inc_p.nelements()<sp/>==<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>());</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(originalLength_p.nelements()<sp/>==<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndimen_p<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>())<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>check<sp/>for<sp/>exact<sp/>equality<sp/>because<sp/>sometimes<sp/>for<sp/>efficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>dimensionality<sp/>of<sp/>start<sp/>et<sp/>al<sp/>can<sp/>be<sp/>greater<sp/>than<sp/>that<sp/>which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>required<sp/>(e.g.<sp/>when<sp/>making<sp/>a<sp/>slice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p.nelements()<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>())<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inc_p.nelements()<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>())<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(originalLength_p.nelements()<sp/>!=<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>())<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>IPosition<sp/>pos(ndimen_p,<sp/>0);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(length_p(i)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(inc_p(i)<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(originalLength_p(i)<sp/>&gt;=<sp/>length_p(i));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p(i)<sp/>&lt;<sp/>0<sp/><sp/>||<sp/><sp/>inc_p(i)<sp/>&lt;<sp/>1</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/><sp/>originalLength_p(i)<sp/>&lt;<sp/>length_p(i))<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>*=<sp/>length_p(i);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p(i)<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos(i)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>off<sp/>=<sp/><ref refid="namespacecasacore_1a3501006de6fc6e42edf21a051c36a588" kindref="member">ArrayIndexOffset</ref>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>(),<sp/>originalLength_p.storage(),</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inc_p.storage(),<sp/>pos);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos(i)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(steps_p(i))<sp/>==<sp/>off);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(steps_p(i))<sp/>!=<sp/>off)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(count<sp/>==<sp/><ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>!=<sp/><ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>())<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref>(contiguous_p<sp/>==<sp/>isStorageContiguous());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contiguous_p<sp/>!=<sp/>isStorageContiguous())<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::checkVectorShape()</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>all<sp/>elements<sp/>are<sp/>1<sp/>or<sp/>nels_p.<sp/>In<sp/>this<sp/>way<sp/>we<sp/>are<sp/>sure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>axis<sp/>remains<sp/>(i.e.<sp/>at<sp/>most<sp/>one<sp/>axis<sp/>has<sp/>length<sp/>&gt;<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>original<sp/>increment<sp/>and<sp/>length<sp/>of<sp/>the<sp/>remaining<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inc<sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orLen<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skippedVolume<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p[i]<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>skippedVolume<sp/>*=<sp/>originalLength_p(i);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_p[i]<sp/>!=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(nels_p))<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayNDimError(1,<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>(),</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Vector&lt;T&gt;:<sp/>ndim<sp/>of<sp/>other<sp/>array<sp/>&gt;<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>inc<sp/>=<sp/>inc_p(i)<sp/>*<sp/>skippedVolume;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>orLen<sp/>=<sp/>originalLength_p(i)<sp/>*<sp/>skippedVolume;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>ndimen_p<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p.resize(1);<sp/></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p.resize(1);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p.resize(1);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>steps_p.resize(1);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p(0)<sp/>=<sp/>nels_p;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p(0)<sp/>=<sp/>inc;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p(0)<sp/>=<sp/>orLen;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>steps_p(0)<sp/>=<sp/>inc;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::checkMatrixShape()</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayNDimError(2,<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>(),</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Matrix&lt;T&gt;:<sp/>ndim<sp/>of<sp/>other<sp/>array<sp/>&gt;<sp/>2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>fiddle<sp/>a<sp/>bit<sp/>if<sp/>ndim<sp/>&lt;<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p.resize(2);<sp/></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p.resize(2);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p.resize(2);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p(0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p(1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p(0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p(1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p(0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p(1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p(1)<sp/>=<sp/>(<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>()<sp/>==<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p(1)<sp/>=<sp/>length_p(1);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p(1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>ndimen_p<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMakeSteps();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::checkCubeShape()</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(ArrayNDimError(3,<sp/><ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>(),</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cube&lt;T&gt;:<sp/>ndim<sp/>of<sp/>other<sp/>array<sp/>&gt;<sp/>3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>fiddle<sp/>a<sp/>bit<sp/>if<sp/>ndim<sp/>&lt;<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p.resize(3);<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p.resize(3);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p.resize(3);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>(<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>()==0)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p(0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p(0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p(0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacecasacore_1a03730c0839536c8b014e9f3521e4189f" kindref="member">ndim</ref>()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length_p(1)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inc_p(1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>originalLength_p(1)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>length_p(2)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>inc_p(2)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>originalLength_p(2)<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>ndimen_p<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>baseMakeSteps();</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">std::unique_ptr&lt;ArrayBase&gt;<sp/>ArrayBase::makeArray()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="820"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::makeArray<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::resize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::resize<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal">std::unique_ptr&lt;ArrayPositionIterator&gt;<sp/>ArrayBase::makeIterator<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="828"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::makeIterator<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal">std::unique_ptr&lt;ArrayBase&gt;<sp/>ArrayBase::getSection<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slicer&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="832"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::getSection<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::assignBase<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayBase&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::assign<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ArrayBase::getVStorage<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;)</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::getVStorage<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ArrayBase::getVStorage<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="844"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::getVStorage<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::putVStorage(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::putVStorage<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayBase::freeVStorage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="852"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayBase::freeVStorage<sp/>cannot<sp/>be<sp/>used&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1aa2adeec4bfede54bea79c0b6818e9ce0" kindref="member">throwArrayShapes</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>shape1,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>shape2,</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>ArrayConformanceError<sp/>(</highlight><highlight class="stringliteral">&quot;ArrayMath/Logical<sp/>function<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(name)<sp/>+</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:<sp/>array<sp/>shapes<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>shape1.toString()<sp/>+</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>shape2.toString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>differ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">}<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="casa/Arrays/ArrayBase.cc"/>
  </compounddef>
</doxygen>
