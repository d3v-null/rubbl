<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="STLIO_8tcc" kind="file" language="C++">
    <compoundname>STLIO.tcc</compoundname>
    <includedby refid="STLIO_8h" local="no">casa/BasicSL/STLIO.h</includedby>
    <invincdepgraph>
      <node id="11">
        <label>tables/Tables/TableTrace.cc</label>
        <link refid="TableTrace_8cc"/>
      </node>
      <node id="12">
        <label>tables/TaQL/ExprNodeSetOpt.cc</label>
        <link refid="ExprNodeSetOpt_8cc"/>
      </node>
      <node id="7">
        <label>tables/DataMan/SSMIndex.cc</label>
        <link refid="SSMIndex_8cc"/>
      </node>
      <node id="1">
        <label>casa/BasicSL/STLIO.tcc</label>
        <link refid="STLIO_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tables/TaQL/TaQLJoin.cc</label>
        <link refid="TaQLJoin_8cc"/>
      </node>
      <node id="2">
        <label>casa/BasicSL/STLIO.h</label>
        <link refid="STLIO_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tables/DataMan/TiledDataStMan.cc</label>
        <link refid="TiledDataStMan_8cc"/>
      </node>
      <node id="3">
        <label>casa/BasicSL.h</label>
        <link refid="BasicSL_8h"/>
      </node>
      <node id="6">
        <label>tables/apps/lsmf.cc</label>
        <link refid="lsmf_8cc"/>
      </node>
      <node id="4">
        <label>casa/IO/MultiFile.cc</label>
        <link refid="MultiFile_8cc"/>
      </node>
      <node id="9">
        <label>tables/Tables/BaseTable.cc</label>
        <link refid="BaseTable_8cc"/>
      </node>
      <node id="5">
        <label>casa/IO/MultiFileBase.cc</label>
        <link refid="MultiFileBase_8cc"/>
      </node>
      <node id="10">
        <label>tables/Tables/RefTable.cc</label>
        <link refid="RefTable_8cc"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>STLIO.tcc:<sp/>text<sp/>output<sp/>IO<sp/>for<sp/>any<sp/>STL-like<sp/>container</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>2011</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/></highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/></highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/></highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/></highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_STLIO_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_STLIO_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Includes</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/BasicSL/STLIO.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/IO/AipsIOCarray.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;class<sp/>ITER&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>showDataIter<sp/>(ostream&amp;<sp/>os,<sp/>ITER<sp/>begin,<sp/>const<sp/>ITER&amp;<sp/>end,<sp/>const<sp/>char*<sp/>sep,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>prefix,<sp/>const<sp/>char*<sp/>postfix)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>that<sp/>the<sp/>begin<sp/>iterator<sp/>is<sp/>passed<sp/>by<sp/>value,<sp/>so<sp/>it<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>directly.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>prefix;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>*begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>begin!=end;<sp/>++begin)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>sep<sp/>&lt;&lt;<sp/>*begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>postfix;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AipsIO&amp;<sp/>operator&gt;&gt;<sp/>(AipsIO&amp;<sp/>ios,<sp/>std::vector&lt;T&gt;&amp;<sp/>v)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.getstart<sp/>(&quot;Block&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>nr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&gt;&gt;<sp/>nr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize(nr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getAipsIO(ios,<sp/>nr,<sp/>&amp;(v[0]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.getend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ios;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AipsIO&amp;<sp/>operator&lt;&lt;<sp/>(AipsIO&amp;<sp/>ios,<sp/>const<sp/>std::vector&lt;T&gt;&amp;<sp/>v)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.putstart<sp/>(&quot;Block&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>putAipsIO<sp/>(ios,<sp/>(uInt)v.size(),<sp/>&amp;(v[0]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.putend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ios;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>K,<sp/>typename<sp/>V&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AipsIO&amp;<sp/>operator&gt;&gt;<sp/>(AipsIO&amp;<sp/>ios,<sp/>std::map&lt;K,V&gt;&amp;<sp/>m)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>K<sp/>key;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>val;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>reading<sp/>the<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Delete<sp/>the<sp/>current<sp/>keys<sp/>and<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.getstart<sp/>(&quot;SimpleOrderedMap&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>m.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Now<sp/>read<sp/>in<sp/>the<sp/>values<sp/>and<sp/>store<sp/>them<sp/>into<sp/>the<sp/>map.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&gt;&gt;<sp/>val;<sp/><sp/><sp/><sp/>//<sp/>old<sp/>default<sp/>value;<sp/>ignored</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>nr,ni;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&gt;&gt;<sp/>nr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&gt;&gt;<sp/>ni;<sp/><sp/><sp/><sp/><sp/>//<sp/>old<sp/>incr;<sp/>ignored</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>i=0;<sp/>i&lt;nr;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ios<sp/>&gt;&gt;<sp/>key;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ios<sp/>&gt;&gt;<sp/>val;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.insert<sp/>(std::make_pair(key,val));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.getend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ios;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>K,<sp/>typename<sp/>V&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AipsIO&amp;<sp/>operator&lt;&lt;<sp/>(AipsIO&amp;<sp/>ios,<sp/>const<sp/>std::map&lt;K,V&gt;&amp;<sp/>m)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.putstart<sp/>(&quot;SimpleOrderedMap&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&lt;&lt;<sp/>V();<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>old<sp/>default<sp/>value;<sp/>ignored</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&lt;&lt;<sp/>uInt(m.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios<sp/>&lt;&lt;<sp/>uInt(1);<sp/><sp/><sp/>//<sp/>old<sp/>incr;<sp/>ignored</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>x<sp/>:<sp/>m)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ios<sp/>&lt;&lt;<sp/>x.first;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ios<sp/>&lt;&lt;<sp/>x.second;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ios.putend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ios;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/BasicSL/STLIO.tcc"/>
  </compounddef>
</doxygen>
