<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ScaledComplexData_8tcc" kind="file" language="C++">
    <compoundname>ScaledComplexData.tcc</compoundname>
    <includedby refid="ScaledComplexData_8h" local="no">tables/DataMan/ScaledComplexData.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>tables/DataMan/ScaledComplexData.tcc</label>
        <link refid="ScaledComplexData_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tables/DataMan/ScaledComplexData.h</label>
        <link refid="ScaledComplexData_8h"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>ScaledComplexData.cc:<sp/>Templated<sp/>virtual<sp/>column<sp/>engine<sp/>to<sp/>scale<sp/>a<sp/>complex<sp/>table<sp/>array</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1999,2000,2001</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TABLES_SCALEDCOMPLEXDATA_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TABLES_SCALEDCOMPLEXDATA_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Includes</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/DataMan/ScaledComplexData.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/Table.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/ScalarColumn.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/ArrayColumn.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/ColumnDesc.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/TableRecord.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/RefRows.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/DataMan/DataManError.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Array.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/ArrayIter.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Slicer.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Containers/Record.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/BasicSL/String.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/IO/AipsIO.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/ValTypeId.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScaledComplexData&lt;S,T&gt;::ScaledComplexData<sp/>(const<sp/>String&amp;<sp/>virtualColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>storedColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>scale,<sp/>S<sp/>offset)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>BaseMappedArrayEngine&lt;S,T&gt;<sp/>(virtualColumnName,<sp/>storedColumnName),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scale_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(scale),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offset_p<sp/><sp/><sp/><sp/><sp/><sp/>(offset),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedScale_p<sp/><sp/>(True),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedOffset_p<sp/>(True),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleColumn_p<sp/>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetColumn_p(0)</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScaledComplexData&lt;S,T&gt;::ScaledComplexData<sp/>(const<sp/>String&amp;<sp/>virtualColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>storedColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>scaleColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>offset)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>BaseMappedArrayEngine&lt;S,T&gt;<sp/>(virtualColumnName,<sp/>storedColumnName),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleName_p<sp/><sp/><sp/>(scaleColumnName),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scale_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(S(0.0,<sp/>0.0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offset_p<sp/><sp/><sp/><sp/><sp/><sp/>(offset),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedScale_p<sp/><sp/>(False),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedOffset_p<sp/>(True),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleColumn_p<sp/>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetColumn_p(0)</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScaledComplexData&lt;S,T&gt;::ScaledComplexData<sp/>(const<sp/>String&amp;<sp/>virtualColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>storedColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>scaleColumnName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>offsetColumnName)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>BaseMappedArrayEngine&lt;S,T&gt;<sp/>(virtualColumnName,<sp/>storedColumnName),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleName_p<sp/><sp/><sp/>(scaleColumnName),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetName_p<sp/><sp/>(offsetColumnName),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scale_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(S(0.0,<sp/>0.0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offset_p<sp/><sp/><sp/><sp/><sp/><sp/>(S(0.0,<sp/>0.0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedScale_p<sp/><sp/>(False),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedOffset_p<sp/>(False),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleColumn_p<sp/>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetColumn_p(0)</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScaledComplexData&lt;S,T&gt;::ScaledComplexData<sp/>(const<sp/>ScaledComplexData&lt;S,T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>BaseMappedArrayEngine&lt;S,T&gt;<sp/>(that),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleName_p<sp/><sp/><sp/>(that.scaleName_p),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetName_p<sp/><sp/>(that.offsetName_p),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scale_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(that.scale_p),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offset_p<sp/><sp/><sp/><sp/><sp/><sp/>(that.offset_p),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedScale_p<sp/><sp/>(that.fixedScale_p),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedOffset_p<sp/>(that.fixedOffset_p),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleColumn_p<sp/>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetColumn_p(0)</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScaledComplexData&lt;S,T&gt;::ScaledComplexData<sp/>(const<sp/>Record&amp;<sp/>spec)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>BaseMappedArrayEngine&lt;S,T&gt;<sp/>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scale_p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(S(1.0,<sp/>1.0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offset_p<sp/><sp/><sp/><sp/><sp/><sp/>(S(0.0,<sp/>0.0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedScale_p<sp/><sp/>(True),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fixedOffset_p<sp/>(True),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleColumn_p<sp/>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetColumn_p(0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(spec.isDefined(&quot;SOURCENAME&quot;)<sp/><sp/>&amp;&amp;<sp/><sp/>spec.isDefined(&quot;TARGETNAME&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setNames<sp/>(spec.asString(&quot;SOURCENAME&quot;),<sp/>spec.asString(&quot;TARGETNAME&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(spec.isDefined(&quot;SCALE&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.get<sp/>(&quot;SCALE&quot;,<sp/>scale_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spec.get<sp/>(&quot;SCALENAME&quot;,<sp/>scaleName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fixedScale_p<sp/>=<sp/>False;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(spec.isDefined(&quot;OFFSET&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.get<sp/>(&quot;OFFSET&quot;,<sp/>offset_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spec.get<sp/>(&quot;OFFSETNAME&quot;,<sp/>offsetName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fixedOffset_p<sp/>=<sp/>False;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ScaledComplexData&lt;S,T&gt;::~ScaledComplexData()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>scaleColumn_p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>offsetColumn_p;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Clone<sp/>the<sp/>engine<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">DataManager*<sp/>ScaledComplexData&lt;S,T&gt;::clone()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DataManager*<sp/>dmPtr<sp/>=<sp/>new<sp/>ScaledComplexData&lt;S,T&gt;<sp/>(*this);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>dmPtr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Return<sp/>the<sp/>type<sp/>name<sp/>of<sp/>the<sp/>engine<sp/>(i.e.<sp/>its<sp/>class<sp/>name).</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">String<sp/>ScaledComplexData&lt;S,T&gt;::dataManagerType()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>className();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Return<sp/>the<sp/>class<sp/>name.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Get<sp/>the<sp/>data<sp/>type<sp/>names<sp/>using<sp/>class<sp/>ValType.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">String<sp/>ScaledComplexData&lt;S,T&gt;::className()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>&quot;ScaledComplexData&lt;&quot;<sp/>+<sp/>valDataTypeId<sp/>((S*)0)<sp/>+<sp/>&quot;,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>valDataTypeId<sp/>((T*)0)<sp/>+<sp/>&quot;&gt;&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Record<sp/>ScaledComplexData&lt;S,T&gt;::dataManagerSpec()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Record<sp/>spec;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spec.define<sp/>(&quot;SOURCENAME&quot;,<sp/>virtualName());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spec.define<sp/>(&quot;TARGETNAME&quot;,<sp/>storedName());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedScale_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.define<sp/>(&quot;SCALE&quot;,<sp/>scale_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.define<sp/>(&quot;SCALENAME&quot;,<sp/>scaleName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.define<sp/>(&quot;OFFSET&quot;,<sp/>offset_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.define<sp/>(&quot;OFFSETNAME&quot;,<sp/>offsetName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>spec;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">DataManager*<sp/>ScaledComplexData&lt;S,T&gt;::makeObject<sp/>(const<sp/>String&amp;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Record&amp;<sp/>spec)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>new<sp/>ScaledComplexData&lt;S,T&gt;<sp/>(spec);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::registerClass()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DataManager::registerCtor<sp/>(className(),<sp/>makeObject);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::create64<sp/>(rownr_t<sp/>initialNrrow)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>BaseMappedArrayEngine&lt;S,T&gt;::create64<sp/>(initialNrrow);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>the<sp/>various<sp/>parameters<sp/>as<sp/>keywords<sp/>in<sp/>this<sp/>column.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableColumn<sp/>thisCol<sp/>(table(),<sp/>virtualName());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.rwKeywordSet().define<sp/>(&quot;_ScaledComplexData_Scale&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.rwKeywordSet().define<sp/>(&quot;_ScaledComplexData_Offset&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.rwKeywordSet().define<sp/>(&quot;_ScaledComplexData_ScaleName&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.rwKeywordSet().define<sp/>(&quot;_ScaledComplexData_OffsetName&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsetName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.rwKeywordSet().define<sp/>(&quot;_ScaledComplexData_FixedScale&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixedScale_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.rwKeywordSet().define<sp/>(&quot;_ScaledComplexData_FixedOffset&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixedOffset_p);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::prepare()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>BaseMappedArrayEngine&lt;S,T&gt;::prepare();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableColumn<sp/>thisCol<sp/>(table(),<sp/>virtualName());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.keywordSet().get<sp/>(&quot;_ScaledComplexData_Scale&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.keywordSet().get<sp/>(&quot;_ScaledComplexData_Offset&quot;,<sp/><sp/><sp/><sp/><sp/><sp/>offset_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.keywordSet().get<sp/>(&quot;_ScaledComplexData_ScaleName&quot;,<sp/><sp/><sp/>scaleName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.keywordSet().get<sp/>(&quot;_ScaledComplexData_OffsetName&quot;,<sp/><sp/>offsetName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.keywordSet().get<sp/>(&quot;_ScaledComplexData_FixedScale&quot;,<sp/><sp/>fixedScale_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thisCol.keywordSet().get<sp/>(&quot;_ScaledComplexData_FixedOffset&quot;,<sp/>fixedOffset_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Allocate<sp/>column<sp/>objects<sp/>to<sp/>get<sp/>scale<sp/>and<sp/>offset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>fixedScale_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleColumn_p<sp/>=<sp/>new<sp/>ScalarColumn&lt;S&gt;<sp/>(table(),<sp/>scaleName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>offsetColumn_p<sp/>=<sp/>new<sp/>ScalarColumn&lt;S&gt;<sp/>(table(),<sp/>offsetName_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>function<sp/>is<sp/>called<sp/>in<sp/>case<sp/>the<sp/>virtual<sp/>column<sp/>has<sp/>FixedShape<sp/>arrays.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::setShapeColumn<sp/>(const<sp/>IPosition&amp;<sp/>shape)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>BaseMappedArrayEngine&lt;S,T&gt;::setShapeColumn<sp/>(storedShape(shape));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::setShape<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>IPosition&amp;<sp/>shape)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>BaseMappedArrayEngine&lt;S,T&gt;::setShape<sp/>(rownr,<sp/>storedShape(shape));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">uInt<sp/>ScaledComplexData&lt;S,T&gt;::ndim<sp/>(rownr_t<sp/>rownr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>column().ndim<sp/>(rownr)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">IPosition<sp/>ScaledComplexData&lt;S,T&gt;::shape<sp/>(rownr_t<sp/>rownr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>virtual<sp/>shape<sp/>is<sp/>the<sp/>stored<sp/>shape<sp/>minus<sp/>the<sp/>first<sp/>dimensions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IPosition<sp/>storedShape<sp/>=<sp/>column().shape<sp/>(rownr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>storedShape.getLast<sp/>(storedShape.nelements()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">S<sp/>ScaledComplexData&lt;S,T&gt;::getScale<sp/>(rownr_t<sp/>rownr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedScale_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>scale_p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*scaleColumn_p)(rownr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">S<sp/>ScaledComplexData&lt;S,T&gt;::getOffset<sp/>(rownr_t<sp/>rownr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>offset_p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*offsetColumn_p)(rownr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Scale/offset<sp/>an<sp/>array<sp/>for<sp/>get.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::scaleOnGet<sp/>(S<sp/>scale,<sp/>S<sp/>offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;S&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>target)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bool<sp/>deleteIn,<sp/>deleteOut;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>S*<sp/>out<sp/>=<sp/>array.getStorage<sp/>(deleteOut);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>S*<sp/>op<sp/><sp/>=<sp/>out;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T*<sp/>in<sp/>=<sp/>target.getStorage<sp/>(deleteIn);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T*<sp/>ip<sp/>=<sp/>in;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T*<sp/>last<sp/>=<sp/>ip<sp/>+<sp/>target.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(offset<sp/>==<sp/>S(0.0,<sp/>0.0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(scale<sp/>==<sp/>S(1.0,<sp/>1.0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(ip<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/>op-&gt;real()<sp/>=<sp/>*ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/>op-&gt;imag()<sp/>=<sp/>*ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*op<sp/>=<sp/>S(*ip,<sp/>ip[1]);<sp/>ip++;<sp/>ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(ip<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/>op-&gt;real()<sp/>=<sp/>*ip++<sp/>*<sp/>scale.real();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/>op-&gt;imag()<sp/>=<sp/>*ip++<sp/>*<sp/>scale.imag();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*op<sp/>=<sp/>S(*ip<sp/>*<sp/>scale.real(),<sp/>ip[1]<sp/><sp/>*<sp/>scale.imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip++;<sp/>ip++;<sp/>op++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(scale<sp/>==<sp/>S(1.0,<sp/>1.0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(ip<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/>op-&gt;real()<sp/>=<sp/>*ip++<sp/>+<sp/>offset.real();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///<sp/><sp/><sp/>op-&gt;imag()<sp/>=<sp/>*ip++<sp/>+<sp/>offset.imag();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*op<sp/>=<sp/>S(*ip<sp/>+<sp/>offset.real(),<sp/>ip[1]<sp/>+<sp/>offset.imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip++;<sp/>ip++;<sp/>op++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(ip<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/>op-&gt;real()<sp/>=<sp/>*ip++<sp/>*<sp/>scale.real()<sp/>+<sp/>offset.real();</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/>op-&gt;imag()<sp/>=<sp/>*ip++<sp/>*<sp/>scale.imag()<sp/>+<sp/>offset.imag();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*op<sp/>=<sp/>S(*ip<sp/>*<sp/>scale.real()<sp/>+<sp/>offset.real(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip[1]<sp/>*<sp/>scale.imag()<sp/>+<sp/>offset.imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip++;<sp/>ip++;<sp/>op++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target.freeStorage<sp/>(in,<sp/>deleteIn);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array.putStorage<sp/>(out,<sp/>deleteOut);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Scale/offset<sp/>an<sp/>array<sp/>for<sp/>put.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::scaleOnPut<sp/>(S<sp/>scale,<sp/>S<sp/>offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;S&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>target)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bool<sp/>deleteIn,<sp/>deleteOut;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>S*<sp/>in<sp/>=<sp/>array.getStorage<sp/>(deleteIn);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>S*<sp/>ip<sp/>=<sp/>in;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>out<sp/>=<sp/>target.getStorage<sp/>(deleteOut);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>op<sp/><sp/>=<sp/>out;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T*<sp/>last<sp/>=<sp/>op<sp/>+<sp/>target.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(offset<sp/>==<sp/>S(0.0,<sp/>0.0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(scale<sp/>==<sp/>S(1.0,<sp/>1.0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(op<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T(ip-&gt;real());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T(ip-&gt;imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(op<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T(ip-&gt;real()<sp/>/<sp/>scale.real());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T(ip-&gt;imag()<sp/>/<sp/>scale.imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(scale<sp/>==<sp/>S(1.0,<sp/>1.0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(op<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T(ip-&gt;real()<sp/>-<sp/>offset.real());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T(ip-&gt;imag()<sp/>-<sp/>offset.imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(op<sp/>&lt;<sp/>last)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T((ip-&gt;real()<sp/>-<sp/>offset.real())<sp/>/<sp/>scale.real());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*op++<sp/>=<sp/>T((ip-&gt;imag()<sp/>-<sp/>offset.imag())<sp/>/<sp/>scale.imag());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ip++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array.freeStorage<sp/>(in,<sp/>deleteIn);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target.putStorage<sp/>(out,<sp/>deleteOut);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::scaleColumnOnGet<sp/>(Array&lt;S&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>target)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedScale_p<sp/>&amp;&amp;<sp/>fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleOnGet<sp/>(scale_p,<sp/>offset_p,<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ArrayIterator&lt;S&gt;<sp/>arrayIter<sp/>(array,<sp/>array.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ReadOnlyArrayIterator&lt;T&gt;<sp/>targetIter<sp/>(target,<sp/>target.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rownr_t<sp/>rownr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!<sp/>arrayIter.pastEnd())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaleOnGet<sp/>(getScale(rownr),<sp/>getOffset(rownr),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrayIter.array(),<sp/>targetIter.array());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrayIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::scaleColumnOnPut<sp/>(const<sp/>Array&lt;S&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>target)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedScale_p<sp/>&amp;&amp;<sp/>fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleOnPut<sp/>(scale_p,<sp/>offset_p,<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ReadOnlyArrayIterator&lt;S&gt;<sp/>arrayIter<sp/>(array,<sp/>array.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ArrayIterator&lt;T&gt;<sp/>targetIter<sp/>(target,<sp/>target.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rownr_t<sp/>rownr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!<sp/>arrayIter.pastEnd())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaleOnPut<sp/>(getScale(rownr),<sp/>getOffset(rownr),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrayIter.array(),<sp/>targetIter.array());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrayIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::scaleCellsOnGet<sp/>(Array&lt;S&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>target,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>RefRows&amp;<sp/>rownrs)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedScale_p<sp/>&amp;&amp;<sp/>fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleOnGet<sp/>(scale_p,<sp/>offset_p,<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ArrayIterator&lt;S&gt;<sp/>arrayIter<sp/>(array,<sp/>array.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ReadOnlyArrayIterator&lt;T&gt;<sp/>targetIter<sp/>(target,<sp/>target.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RefRowsSliceIter<sp/>rowiter(rownrs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!<sp/>rowiter.pastEnd())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>rownr<sp/>=<sp/>rowiter.sliceStart();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>end<sp/>=<sp/>rowiter.sliceEnd();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>incr<sp/>=<sp/>rowiter.sliceIncr();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Iterate<sp/>through<sp/>the<sp/>row<sp/>numbers<sp/>in<sp/>the<sp/>slice.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(rownr<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleOnGet<sp/>(getScale(rownr),<sp/>getOffset(rownr),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayIter.array(),<sp/>targetIter.array());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr<sp/>+=<sp/>incr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>targetIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Go<sp/>to<sp/>next<sp/>slice.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rowiter++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::scaleCellsOnPut<sp/>(const<sp/>Array&lt;S&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>target,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>RefRows&amp;<sp/>rownrs)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fixedScale_p<sp/>&amp;&amp;<sp/>fixedOffset_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scaleOnPut<sp/>(scale_p,<sp/>offset_p,<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ReadOnlyArrayIterator&lt;S&gt;<sp/>arrayIter<sp/>(array,<sp/>array.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ArrayIterator&lt;T&gt;<sp/>targetIter<sp/>(target,<sp/>target.ndim()<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RefRowsSliceIter<sp/>rowiter(rownrs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!<sp/>rowiter.pastEnd())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>rownr<sp/>=<sp/>rowiter.sliceStart();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>end<sp/>=<sp/>rowiter.sliceEnd();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>incr<sp/>=<sp/>rowiter.sliceIncr();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Iterate<sp/>through<sp/>the<sp/>row<sp/>numbers<sp/>in<sp/>the<sp/>slice.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(rownr<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleOnPut<sp/>(getScale(rownr),<sp/>getOffset(rownr),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrayIter.array(),<sp/>targetIter.array());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rownr<sp/>+=<sp/>incr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>targetIter.next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Go<sp/>to<sp/>next<sp/>slice.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rowiter++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::getArray<sp/>(rownr_t<sp/>rownr,<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().get<sp/>(rownr,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleOnGet<sp/>(getScale(rownr),<sp/>getOffset(rownr),<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::putArray<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleOnPut<sp/>(getScale(rownr),<sp/>getOffset(rownr),<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().put<sp/>(rownr,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::getSlice<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().getSlice<sp/>(rownr,<sp/>storedSlicer(slicer),<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleOnGet<sp/>(getScale(rownr),<sp/>getOffset(rownr),<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::putSlice<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleOnPut<sp/>(getScale(rownr),<sp/>getOffset(rownr),<sp/>array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().putSlice<sp/>(rownr,<sp/>storedSlicer(slicer),<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::getArrayColumn<sp/>(Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().getColumn<sp/>(target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleColumnOnGet<sp/>(array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::putArrayColumn<sp/>(const<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleColumnOnPut<sp/>(array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().putColumn<sp/>(target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::getArrayColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().getColumnCells<sp/>(rownrs,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleCellsOnGet<sp/>(array,<sp/>target,<sp/>rownrs);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::putArrayColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleCellsOnPut<sp/>(array,<sp/>target,<sp/>rownrs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().putColumnCells<sp/>(rownrs,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::getColumnSlice<sp/>(const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().getColumn<sp/>(storedSlicer(slicer),<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleColumnOnGet<sp/>(array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::putColumnSlice<sp/>(const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleColumnOnPut<sp/>(array,<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().putColumn<sp/>(storedSlicer(slicer),<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::getColumnSliceCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().getColumnCells<sp/>(rownrs,<sp/>storedSlicer(slicer),<sp/>target);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleCellsOnGet<sp/>(array,<sp/>target,<sp/>rownrs);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ScaledComplexData&lt;S,T&gt;::putColumnSliceCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>slicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;S&gt;&amp;<sp/>array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>target(storedShape(array.shape()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scaleCellsOnPut<sp/>(array,<sp/>target,<sp/>rownrs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>column().putColumnCells<sp/>(rownrs,<sp/>storedSlicer(slicer),<sp/>target);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>S,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Slicer<sp/>ScaledComplexData&lt;S,T&gt;::storedSlicer<sp/>(const<sp/>Slicer&amp;<sp/>virtualSlicer)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Slicer<sp/>(IPosition(1,0).concatenate<sp/>(virtualSlicer.start()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition(1,1).concatenate<sp/>(virtualSlicer.end()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition(1,1).concatenate<sp/>(virtualSlicer.stride()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slicer::endIsLast);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="tables/DataMan/ScaledComplexData.tcc"/>
  </compounddef>
</doxygen>
