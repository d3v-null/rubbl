<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ArrayLogical_8tcc" kind="file" language="C++">
    <compoundname>ArrayLogical.tcc</compoundname>
    <includedby refid="ArrayLogical_8h" local="yes">casa/Arrays/ArrayLogical.h</includedby>
    <invincdepgraph>
      <node id="71">
        <label>tables/TaQL/TaQLShow.cc</label>
        <link refid="TaQLShow_8cc"/>
      </node>
      <node id="83">
        <label>tables/TaQL/ExprGroupAggrFunc.h</label>
        <link refid="ExprGroupAggrFunc_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>tables/TaQL/ExprLogicNode.h</label>
        <link refid="ExprLogicNode_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>tables/TaQL/TaQLResult.cc</label>
        <link refid="TaQLResult_8cc"/>
      </node>
      <node id="73">
        <label>tables/TaQL/ExprDerNode.h</label>
        <link refid="ExprDerNode_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tables/TaQL/ExprMathNodeArray.cc</label>
        <link refid="ExprMathNodeArray_8cc"/>
      </node>
      <node id="76">
        <label>tables/TaQL/ExprLogicNode.cc</label>
        <link refid="ExprLogicNode_8cc"/>
      </node>
      <node id="27">
        <label>tables/TaQL/ExprLogicNodeArray.cc</label>
        <link refid="ExprLogicNodeArray_8cc"/>
      </node>
      <node id="102">
        <label>tables/TaQL/ExprUDFNodeArray.h</label>
        <link refid="ExprUDFNodeArray_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>tables/Tables.h</label>
        <link refid="Tables_8h"/>
      </node>
      <node id="103">
        <label>tables/TaQL/ExprUnitNode.h</label>
        <link refid="ExprUnitNode_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>tables/TaQL/ExprGroup.h</label>
        <link refid="ExprGroup_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>casa/Quanta/MVBaseline.cc</label>
        <link refid="MVBaseline_8cc"/>
      </node>
      <node id="85">
        <label>tables/TaQL/ExprGroupAggrFuncArray.h</label>
        <link refid="ExprGroupAggrFuncArray_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>casa/Quanta/MVDirection.cc</label>
        <link refid="MVDirection_8cc"/>
      </node>
      <node id="8">
        <label>casa/Arrays.h</label>
        <link refid="Arrays_8h"/>
      </node>
      <node id="86">
        <label>tables/TaQL/ExprUDFNode.cc</label>
        <link refid="ExprUDFNode_8cc"/>
      </node>
      <node id="26">
        <label>tables/TaQL/MArray.h</label>
        <link refid="MArray_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>tables/TaQL/UDFBase.cc</label>
        <link refid="UDFBase_8cc"/>
      </node>
      <node id="56">
        <label>tables/TaQL/TaQLNodeHandler.h</label>
        <link refid="TaQLNodeHandler_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>tables/TaQL/ExprGroupAggrFuncArray.cc</label>
        <link refid="ExprGroupAggrFuncArray_8cc"/>
      </node>
      <node id="105">
        <label>tables/TaQL/ExprNodeSetElem.h</label>
        <link refid="ExprNodeSetElem_8h"/>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>tables/TaQL/ExprNodeSetOpt.h</label>
        <link refid="ExprNodeSetOpt_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>tables/TaQL/ExprDerNodeArray.h</label>
        <link refid="ExprDerNodeArray_8h"/>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>tables/TaQL/ExprConeNode.cc</label>
        <link refid="ExprConeNode_8cc"/>
      </node>
      <node id="12">
        <label>casa/System/AppInfo.cc</label>
        <link refid="AppInfo_8cc"/>
      </node>
      <node id="9">
        <label>casa/Arrays/MaskArrMath.h</label>
        <link refid="MaskArrMath_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>tables/TaQL/ExprDerNodeArray.cc</label>
        <link refid="ExprDerNodeArray_8cc"/>
      </node>
      <node id="38">
        <label>tables/TaQL/ExprNodeArray.cc</label>
        <link refid="ExprNodeArray_8cc"/>
      </node>
      <node id="24">
        <label>tables/TaQL/ExprDerNode.cc</label>
        <link refid="ExprDerNode_8cc"/>
      </node>
      <node id="16">
        <label>casa/Quanta/MVEarthMagnetic.cc</label>
        <link refid="MVEarthMagnetic_8cc"/>
      </node>
      <node id="43">
        <label>tables/TaQL/RecordExpr.h</label>
        <link refid="RecordExpr_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>tables/TaQL/ExprNodeSet.cc</label>
        <link refid="ExprNodeSet_8cc"/>
      </node>
      <node id="107">
        <label>tables/TaQL/ExprNodeSetOpt.cc</label>
        <link refid="ExprNodeSetOpt_8cc"/>
      </node>
      <node id="47">
        <label>tables/TaQL/TableParseGroupby.h</label>
        <link refid="TableParseGroupby_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tables/Tables/RowNumbers.cc</label>
        <link refid="RowNumbers_8cc"/>
      </node>
      <node id="78">
        <label>tables/TaQL/TableParseJoin.h</label>
        <link refid="TableParseJoin_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>tables/TaQL/RecordGram.cc</label>
        <link refid="RecordGram_8cc"/>
      </node>
      <node id="60">
        <label>tables/TaQL/TableParseProject.h</label>
        <link refid="TableParseProject_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>tables/TaQL/TableParseSortKey.h</label>
        <link refid="TableParseSortKey_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>tables/DataMan/VirtualTaQLColumn.cc</label>
        <link refid="VirtualTaQLColumn_8cc"/>
      </node>
      <node id="112">
        <label>tables/TaQL/TableParseTableList.h</label>
        <link refid="TableParseTableList_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tables/TaQL/TableParseTableList.cc</label>
        <link refid="TableParseTableList_8cc"/>
      </node>
      <node id="116">
        <label>tables/TaQL/MArrayMath.h</label>
        <link refid="MArrayMath_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>tables/TaQL/TaQLJoin.cc</label>
        <link refid="TaQLJoin_8cc"/>
      </node>
      <node id="59">
        <label>tables/TaQL/TableParseUpdate.cc</label>
        <link refid="TableParseUpdate_8cc"/>
      </node>
      <node id="74">
        <label>tables/TaQL/ExprGroupAggrFunc.cc</label>
        <link refid="ExprGroupAggrFunc_8cc"/>
      </node>
      <node id="64">
        <label>tables/TaQL/TaQLResult.h</label>
        <link refid="TaQLResult_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>casa/Arrays/Array_tmpl.cc</label>
        <link refid="Array__tmpl_8cc"/>
      </node>
      <node id="2">
        <label>casa/Arrays/ArrayLogical.h</label>
        <link refid="ArrayLogical_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>tables/TaQL/ExprLogicNodeArray.h</label>
        <link refid="ExprLogicNodeArray_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>tables/TaQL/ExprFuncNode.cc</label>
        <link refid="ExprFuncNode_8cc"/>
      </node>
      <node id="51">
        <label>tables/TaQL/TableParseFunc.cc</label>
        <link refid="TableParseFunc_8cc"/>
      </node>
      <node id="48">
        <label>tables/TaQL/TableParseGroupby.cc</label>
        <link refid="TableParseGroupby_8cc"/>
      </node>
      <node id="44">
        <label>tables/TaQL/RecordExpr.cc</label>
        <link refid="RecordExpr_8cc"/>
      </node>
      <node id="23">
        <label>tables/Tables/TableProxy.cc</label>
        <link refid="TableProxy_8cc"/>
      </node>
      <node id="18">
        <label>casa/Quanta/MVuvw.cc</label>
        <link refid="MVuvw_8cc"/>
      </node>
      <node id="7">
        <label>casa/Arrays/MaskArrLogi.h</label>
        <link refid="MaskArrLogi_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>casa/Arrays/ArrayLogical.tcc</label>
        <link refid="ArrayLogical_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>tables/TaQL/ExprFuncNodeArray.cc</label>
        <link refid="ExprFuncNodeArray_8cc"/>
      </node>
      <node id="72">
        <label>tables/TaQL/ExprNodeRep.h</label>
        <link refid="ExprNodeRep_8h"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>tables/TaQL/TaQLJoin.h</label>
        <link refid="TaQLJoin_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>tables/TaQL/ExprUDFNode.h</label>
        <link refid="ExprUDFNode_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>tables/TaQL/ExprNodeSet.h</label>
        <link refid="ExprNodeSet_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>tables/TaQL/ExprNodeUtil.h</label>
        <link refid="ExprNodeUtil_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>casa/Arrays/MaskLogiArr.h</label>
        <link refid="MaskLogiArr_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>casa/Arrays/ArrayOpsDiffShapes.cc</label>
        <link refid="ArrayOpsDiffShapes_8cc"/>
      </node>
      <node id="110">
        <label>tables/TaQL/ExprNodeUtil.cc</label>
        <link refid="ExprNodeUtil_8cc"/>
      </node>
      <node id="67">
        <label>tables/apps/taql.cc</label>
        <link refid="taql_8cc"/>
      </node>
      <node id="53">
        <label>tables/TaQL/TableParseQuery.cc</label>
        <link refid="TableParseQuery_8cc"/>
      </node>
      <node id="50">
        <label>tables/TaQL/TableParseQuery.h</label>
        <link refid="TableParseQuery_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>tables/TaQL/MArrayBase.cc</label>
        <link refid="MArrayBase_8cc"/>
      </node>
      <node id="10">
        <label>casa/Arrays/MaskArrMath2.cc</label>
        <link refid="MaskArrMath2_8cc"/>
      </node>
      <node id="101">
        <label>tables/TaQL/ExprNodeRecord.h</label>
        <link refid="ExprNodeRecord_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>tables/TaQL/ExprAggrNode.cc</label>
        <link refid="ExprAggrNode_8cc"/>
      </node>
      <node id="46">
        <label>tables/TaQL/TableParse.cc</label>
        <link refid="TableParse_8cc"/>
      </node>
      <node id="31">
        <label>tables/LogTables/LogFilterExpr.cc</label>
        <link refid="LogFilterExpr_8cc"/>
      </node>
      <node id="94">
        <label>tables/TaQL/ExprMathNode.h</label>
        <link refid="ExprMathNode_8h"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>tables/TaQL/MArrayBase.h</label>
        <link refid="MArrayBase_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>tables/TaQL/ExprGroup.cc</label>
        <link refid="ExprGroup_8cc"/>
      </node>
      <node id="89">
        <label>tables/TaQL/ExprConeNode.h</label>
        <link refid="ExprConeNode_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>tables/TaQL/ExprNodeArray.h</label>
        <link refid="ExprNodeArray_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>tables/TaQL/ExprNodeRep.cc</label>
        <link refid="ExprNodeRep_8cc"/>
      </node>
      <node id="52">
        <label>tables/TaQL/TableParseJoin.cc</label>
        <link refid="TableParseJoin_8cc"/>
      </node>
      <node id="80">
        <label>tables/TaQL/ExprAggrNode.h</label>
        <link refid="ExprAggrNode_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>tables/TaQL/TableParseFunc.h</label>
        <link refid="TableParseFunc_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>tables/TaQL/TableExprIdAggr.h</label>
        <link refid="TableExprIdAggr_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>tables/TaQL.h</label>
        <link refid="TaQL_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>tables/TaQL/ExprMathNode.cc</label>
        <link refid="ExprMathNode_8cc"/>
      </node>
      <node id="29">
        <label>tables/TaQL/ExprNode.h</label>
        <link refid="ExprNode_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>tables/TaQL/ExprNode.cc</label>
        <link refid="ExprNode_8cc"/>
      </node>
      <node id="87">
        <label>tables/TaQL/ExprUDFNodeArray.cc</label>
        <link refid="ExprUDFNodeArray_8cc"/>
      </node>
      <node id="39">
        <label>tables/TaQL/ExprNodeRecord.cc</label>
        <link refid="ExprNodeRecord_8cc"/>
      </node>
      <node id="100">
        <label>tables/TaQL/ExprMathNodeArray.h</label>
        <link refid="ExprMathNodeArray_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>tables/TaQL/ExprNodeSetElem.cc</label>
        <link refid="ExprNodeSetElem_8cc"/>
      </node>
      <node id="3">
        <label>casa/Arrays/ArrayOpsDiffShapes.h</label>
        <link refid="ArrayOpsDiffShapes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>tables/Tables/RefRows.cc</label>
        <link refid="RefRows_8cc"/>
      </node>
      <node id="5">
        <label>casa/Arrays/MaskedArray.h</label>
        <link refid="MaskedArray_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>tables/TaQL/UDFBase.h</label>
        <link refid="UDFBase_8h"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>casa/Arrays/Matrix2Math.cc</label>
        <link refid="Matrix2Math_8cc"/>
      </node>
      <node id="65">
        <label>tables/TaQL/TableParse.h</label>
        <link refid="TableParse_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>tables/Tables/BaseTable.cc</label>
        <link refid="BaseTable_8cc"/>
      </node>
      <node id="19">
        <label>casa/Quanta/QLogical2.cc</label>
        <link refid="QLogical2_8cc"/>
      </node>
      <node id="104">
        <label>tables/TaQL/ExprUnitNode.cc</label>
        <link refid="ExprUnitNode_8cc"/>
      </node>
      <node id="55">
        <label>tables/TaQL/TableParseUtil.cc</label>
        <link refid="TableParseUtil_8cc"/>
      </node>
      <node id="79">
        <label>tables/TaQL/ExprFuncNode.h</label>
        <link refid="ExprFuncNode_8h"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>tables/TaQL/TaQLNodeHandler.cc</label>
        <link refid="TaQLNodeHandler_8cc"/>
      </node>
      <node id="17">
        <label>casa/Quanta/MVPosition.cc</label>
        <link refid="MVPosition_8cc"/>
      </node>
      <node id="62">
        <label>tables/TaQL/TableParseUpdate.h</label>
        <link refid="TableParseUpdate_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>tables/apps/showtableinfo.cc</label>
        <link refid="showtableinfo_8cc"/>
      </node>
      <node id="49">
        <label>tables/TaQL/TableParseProject.cc</label>
        <link refid="TableParseProject_8cc"/>
      </node>
      <node id="91">
        <label>tables/TaQL/ExprAggrNodeArray.h</label>
        <link refid="ExprAggrNodeArray_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>tables/TaQL/ExprAggrNodeArray.cc</label>
        <link refid="ExprAggrNodeArray_8cc"/>
      </node>
      <node id="58">
        <label>tables/TaQL/TableParseSortKey.cc</label>
        <link refid="TableParseSortKey_8cc"/>
      </node>
      <node id="32">
        <label>tables/Tables/Table.cc</label>
        <link refid="Table_8cc"/>
      </node>
      <node id="90">
        <label>tables/TaQL/ExprFuncNodeArray.h</label>
        <link refid="ExprFuncNodeArray_8h"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>tables/TaQL/MArrayLogical.h</label>
        <link refid="MArrayLogical_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>ArrayLogical.cc:<sp/>Element<sp/>by<sp/>element<sp/>logical<sp/>operations<sp/>on<sp/>arrays.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1993,1994,1995,1996,1999,2001</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_ARRAYLOGICAL_2_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_ARRAYLOGICAL_2_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayLogical.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayMath.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayUtil.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayError.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ElementFunctions.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cmath&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;complex&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;limits&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ElementFunctions.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>CompareOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>arrayCompareAll<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/>left.conform(right))<sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(left.contiguousStorage()<sp/><sp/>&amp;&amp;<sp/><sp/>right.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAll<sp/>(left.cbegin(),<sp/>left.cend(),<sp/>right.cbegin(),<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAll<sp/>(left.begin(),<sp/><sp/>left.end(),<sp/><sp/>right.begin(),<sp/><sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>CompareOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>arrayCompareAll<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>left,<sp/>T<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(left.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAllRight<sp/>(left.cbegin(),<sp/>left.cend(),<sp/>right,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAllRight<sp/>(left.begin(),<sp/>left.end(),<sp/>right,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>CompareOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>arrayCompareAll<sp/>(T<sp/>left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(right.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAllLeft<sp/>(right.cbegin(),<sp/>right.cend(),<sp/>left,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAllLeft<sp/>(right.begin(),<sp/>right.end(),<sp/>left,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>CompareOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>arrayCompareAny<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/>left.conform(right))<sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(left.contiguousStorage()<sp/><sp/>&amp;&amp;<sp/><sp/>right.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAny<sp/>(left.cbegin(),<sp/>left.cend(),<sp/>right.cbegin(),<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAny<sp/>(left.begin(),<sp/><sp/>left.end(),<sp/><sp/>right.begin(),<sp/><sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>CompareOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>arrayCompareAny<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>left,<sp/>T<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(left.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAnyRight<sp/>(left.cbegin(),<sp/>left.cend(),<sp/>right,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAnyRight<sp/>(left.begin(),<sp/>left.end(),<sp/>right,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>CompareOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>arrayCompareAny<sp/>(T<sp/>left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(right.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAnyLeft<sp/>(right.cbegin(),<sp/>right.cend(),<sp/>left,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrays_internal::compareAnyLeft<sp/>(right.begin(),<sp/>right.end(),<sp/>left,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allEQ<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allNE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allLT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allLE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allGT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allGE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allOR<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allAND<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allEQ<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allNE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allLT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allLE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allGT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allGE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allOR<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allAND<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allEQ<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allNE<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allLT<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allLE<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allGT<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allGE<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allOR<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>allAND<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyEQ<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyNE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyLT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyLE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyGT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyGE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyOR<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyAND<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyEQ<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyNE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyLT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyLE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyGT<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyGE<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyOR<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyAND<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyEQ<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyNE<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyLT<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyLE<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyGT<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyGE<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyOR<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>anyAND<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator==<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;==&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator!=<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;!=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&lt;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;&lt;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&lt;=<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;&lt;=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&gt;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&gt;=<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;&gt;=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator||<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;||&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&amp;&amp;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;&amp;&amp;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator==<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator!=<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&lt;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&lt;=<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&gt;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&gt;=<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator||<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&amp;&amp;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>T<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator==<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator!=<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::not_equal_to&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&lt;<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::less&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&lt;=<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::less_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&gt;<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::greater&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&gt;=<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::greater_equal&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator||<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::logical_or&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator&amp;&amp;<sp/>(const<sp/>T<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(r.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>std::logical_and&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>operator!<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(array,<sp/>result,<sp/>std::logical_not&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>isNaN<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>std::isnan;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>arrays_internal::isnan;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(array,<sp/>result,<sp/>[](T<sp/>val){<sp/>return<sp/>isnan(val);}<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>isInf<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>std::isinf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>arrays_internal::isinf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(array,<sp/>result,<sp/>[](T<sp/>val){<sp/>return<sp/>isinf(val);}<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>isFinite<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>std::isfinite;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>arrays_internal::isfinite;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(array,<sp/>result,<sp/>[](T<sp/>val){<sp/>return<sp/>isfinite(val);}<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">LogicalArray<sp/>near<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>r,<sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;near&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>LogicalArray<sp/>nearAbs(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(l,<sp/>r,<sp/>&quot;nearAbs&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(l.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(l,<sp/>r,<sp/>result,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>LogicalArray<sp/>near<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>T<sp/>&amp;val,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(array,<sp/>val,<sp/>result,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>LogicalArray<sp/>near<sp/>(const<sp/>T<sp/>&amp;val,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(val,<sp/>array,<sp/>result,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>LogicalArray<sp/>nearAbs<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>T<sp/>&amp;val,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(array,<sp/>val,<sp/>result,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>LogicalArray<sp/>nearAbs<sp/>(const<sp/>T<sp/>&amp;val,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LogicalArray<sp/>result(array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(val,<sp/>array,<sp/>result,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>allNear<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>allNear<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>T<sp/>&amp;val,<sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(array,<sp/>val,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>allNear<sp/>(const<sp/>T<sp/>&amp;val,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(val,<sp/>array,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>allNearAbs<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(l,<sp/>r,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>allNearAbs<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>T<sp/>&amp;val,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(array,<sp/>val,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>allNearAbs<sp/>(const<sp/>T<sp/>&amp;val,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAll<sp/>(val,<sp/>array,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>anyNear<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>anyNear<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>T<sp/>&amp;val,<sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(array,<sp/>val,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>anyNear<sp/>(const<sp/>T<sp/>&amp;val,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(val,<sp/>array,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::near(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>anyNearAbs<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;l,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;r,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(l,<sp/>r,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>anyNearAbs<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>T<sp/>&amp;val,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(array,<sp/>val,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>bool<sp/>anyNearAbs<sp/>(const<sp/>T<sp/>&amp;val,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tol)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arrayCompareAny<sp/>(val,<sp/>array,<sp/>[tol](T<sp/>left,<sp/>T<sp/>right){<sp/>return<sp/>arrays_internal::nearAbs(left,<sp/>right,<sp/>tol);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>size_t<sp/>nfalse<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(array.contiguousStorage()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::count<sp/>(array.cbegin(),<sp/>array.cend(),<sp/>T())<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::count<sp/>(array.begin(),<sp/><sp/>array.end(),<sp/><sp/>T()));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>Array&lt;size_t&gt;<sp/>partialNTrue<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IPosition&amp;<sp/>collapseAxes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>IPosition&amp;<sp/>shape<sp/>=<sp/>array.shape();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>ndim<sp/>=<sp/>shape.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(ndim<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Array&lt;size_t&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IPosition<sp/>resShape,<sp/>incr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>nelemCont<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>stax<sp/>=<sp/>partialFuncHelper<sp/>(nelemCont,<sp/>resShape,<sp/>incr,<sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collapseAxes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;size_t&gt;<sp/>result<sp/>(resShape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>deleteData,<sp/>deleteRes;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>T*<sp/>arrData<sp/>=<sp/>array.getStorage<sp/>(deleteData);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>T*<sp/>data<sp/>=<sp/>arrData;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t*<sp/>resData<sp/>=<sp/>result.getStorage<sp/>(deleteRes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t*<sp/>res<sp/>=<sp/>resData;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Find<sp/>out<sp/>how<sp/>contiguous<sp/>the<sp/>data<sp/>is,<sp/>i.e.<sp/>if<sp/>some<sp/>contiguous<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>end<sp/>up<sp/>in<sp/>the<sp/>same<sp/>output<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>const<sp/>tells<sp/>if<sp/>any<sp/>data<sp/>are<sp/>contiguous.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>stax<sp/>gives<sp/>the<sp/>first<sp/>non-contiguous<sp/>axis.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>no<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>contiguous<sp/>elements.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>cont<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>n0<sp/>=<sp/>nelemCont;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>incr0<sp/>=<sp/>incr(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nelemCont<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cont<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>shape(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stax<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Loop<sp/>through<sp/>all<sp/>data<sp/>and<sp/>assemble<sp/>as<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IPosition<sp/>pos(ndim,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(cont)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>tmp<sp/>=<sp/>*res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;n0;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(*data++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tmp++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;n0;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(*data++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(*res)++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>+=<sp/>incr0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>ax;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(ax=stax;<sp/>ax&lt;ndim;<sp/>ax++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>incr(ax);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(++pos(ax)<sp/>&lt;<sp/>shape(ax))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos(ax)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ax<sp/>==<sp/>ndim)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array.freeStorage<sp/>(arrData,<sp/>deleteData);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result.putStorage<sp/>(resData,<sp/>deleteRes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>Array&lt;size_t&gt;<sp/>partialNFalse<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>array,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IPosition&amp;<sp/>collapseAxes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;size_t&gt;<sp/>result<sp/>=<sp/>partialNTrue<sp/>(array,<sp/>collapseAxes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>nr<sp/>=<sp/>result.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nr<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>factor<sp/>=<sp/>array.nelements()<sp/>/<sp/>nr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>deleteRes;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t*<sp/>res<sp/>=<sp/>result.getStorage<sp/>(deleteRes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;nr;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>factor<sp/>-<sp/>res[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result.putStorage<sp/>(res,<sp/>deleteRes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/Arrays/ArrayLogical.tcc"/>
  </compounddef>
</doxygen>
