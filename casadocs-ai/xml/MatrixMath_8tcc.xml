<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="MatrixMath_8tcc" kind="file" language="C++">
    <compoundname>MatrixMath.tcc</compoundname>
    <includedby refid="MatrixMath_8h" local="yes">casa/Arrays/MatrixMath.h</includedby>
    <invincdepgraph>
      <node id="2">
        <label>casa/Arrays/MatrixMath.h</label>
        <link refid="MatrixMath_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>casa/Quanta/MVDirection.cc</label>
        <link refid="MVDirection_8cc"/>
      </node>
      <node id="5">
        <label>casa/Arrays.h</label>
        <link refid="Arrays_8h"/>
      </node>
      <node id="4">
        <label>casa/Arrays/Matrix_tmpl.cc</label>
        <link refid="Matrix__tmpl_8cc"/>
      </node>
      <node id="1">
        <label>casa/Arrays/MatrixMath.tcc</label>
        <link refid="MatrixMath_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>casa/Arrays/Matrix2Math.cc</label>
        <link refid="Matrix2Math_8cc"/>
      </node>
      <node id="7">
        <label>casa/Quanta/MVPosition.cc</label>
        <link refid="MVPosition_8cc"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>MatrixMath.tcc:<sp/>The<sp/>Casacore<sp/>linear<sp/>algebra<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1994,1995,1996,1998,2001,2002</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_MATRIXMATH_2_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_MATRIXMATH_2_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;MatrixMath.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Matrix.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayError.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>vector<sp/>dot/scalar/inner<sp/>product</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;<sp/>T<sp/>innerProduct<sp/>(const<sp/>Vector&lt;T&gt;<sp/>&amp;A,<sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;B)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>for<sp/>correct<sp/>dimensions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(A.conform(B)<sp/>==<sp/>false){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayConformanceError(&quot;innerProduct<sp/>-<sp/>conform()<sp/>error.&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>scalar<sp/>=<sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>A.nelements();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scalar<sp/>+=<sp/>A(i)*B(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>scalar;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Uncomment<sp/>this<sp/>if<sp/>we<sp/>ever<sp/>want<sp/>a<sp/>templated<sp/>Rot3D<sp/>again.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>Matrix&lt;T&gt;<sp/>Rot3D(int<sp/>axis,<sp/>T<sp/>angle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(axis&lt;0<sp/>||<sp/>axis&gt;2)<sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>throw<sp/>(ArrayError(&quot;Rot3D(axis,<sp/>angle):<sp/>axis<sp/>has<sp/>to<sp/>be<sp/>0<sp/>(x),&quot;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>1<sp/>(y)<sp/>or<sp/>2<sp/>(z).&quot;));</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Matrix&lt;T&gt;<sp/>Rot(3,3);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Rot=0;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>T<sp/>cosa=cos(angle);<sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>T<sp/>sina=sin(angle);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Rot(axis,axis)=1;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Rot((axis+1)%3,(axis+1)%3)=cosa;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Rot((axis+2)%3,(axis+1)%3)=sina;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Rot((axis+1)%3,(axis+2)%3)=-sina;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Rot((axis+2)%3,(axis+2)%3)=cosa;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>return<sp/>Rot;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>3-space<sp/>cross/vector<sp/>product</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Vector&lt;T&gt;<sp/>crossProduct<sp/>(const<sp/>Vector&lt;T&gt;<sp/>&amp;A,<sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;B)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>for<sp/>correct<sp/>dimensions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!A.conform(B)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>(ArrayConformanceError(&quot;crossProduct<sp/>-<sp/>conform()<sp/>error.&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(A.nelements()<sp/>!=<sp/>3)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>(ArrayConformanceError(&quot;crossProduct<sp/>-<sp/>Vector<sp/>not<sp/>in<sp/>3-space&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Vector&lt;T&gt;<sp/>result(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result(0)<sp/>=<sp/>A(1)*B(2)<sp/>-<sp/>A(2)*B(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result(1)<sp/>=<sp/>A(2)*B(0)<sp/>-<sp/>A(0)*B(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result(2)<sp/>=<sp/>A(0)*B(1)<sp/>-<sp/>A(1)*B(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">T<sp/>crossProduct2D<sp/>(const<sp/>Vector&lt;T&gt;<sp/>&amp;A,<sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;B)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>for<sp/>correct<sp/>dimensions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!A.conform(B)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>(ArrayConformanceError(&quot;crossProduct2D<sp/>-<sp/>conform()<sp/>error.&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(A.nelements()<sp/>!=<sp/>2)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>(ArrayConformanceError(&quot;crossProduct2D<sp/>-<sp/>Vector<sp/>not<sp/>in<sp/>2-space&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>A[0]*<sp/>B[1]<sp/>-<sp/>A[1]*B[0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>matrix<sp/>multiplication<sp/>or<sp/>cayley<sp/>product</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Vector&lt;T&gt;<sp/>product<sp/>(const<sp/>Matrix&lt;T&gt;<sp/>&amp;A,<sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(A.ncolumn()<sp/>!=<sp/>x.nelements())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>(ArrayError(&quot;product<sp/>-<sp/>multiplication<sp/>of&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>these<sp/>matrices<sp/>shapes<sp/>is<sp/>undefined&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Vector&lt;T&gt;<sp/>result(A.nrow());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A.nrow();<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result(i)<sp/>=<sp/>T(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>A.ncolumn();<sp/>k++)<sp/>result(i)<sp/>+=<sp/>A(i,k)<sp/>*<sp/>x(k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">Vector&lt;T&gt;<sp/>directProduct(const<sp/>Vector&lt;T&gt;&amp;<sp/>x,<sp/>const<sp/>Vector&lt;T&gt;&amp;<sp/>y)<sp/></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>nx=x.nelements(),<sp/>ny=y.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Vector&lt;T&gt;<sp/>res(nx*ny);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;nx*ny;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res(i)<sp/>=<sp/>x(i/ny)<sp/>*<sp/>y(i%ny);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">Matrix&lt;T&gt;<sp/>product<sp/>(const<sp/>Vector&lt;T&gt;<sp/>&amp;x,<sp/>const<sp/>Matrix&lt;T&gt;<sp/>&amp;yT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(yT.nrow()!=<sp/>1)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>(ArrayError(&quot;product<sp/>-<sp/>multiplication<sp/>of&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>these<sp/>matrices<sp/>shapes<sp/>is<sp/>undefined&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Matrix&lt;T&gt;<sp/>A(x.nelements(),1u);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.column(0).assign_conforming(<sp/>x<sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>product(A,yT);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>matrix<sp/>multiplication<sp/>or<sp/>cayley<sp/>product</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">Matrix&lt;T&gt;<sp/>product<sp/>(const<sp/>Matrix&lt;T&gt;<sp/>&amp;A,<sp/>const<sp/>Matrix&lt;T&gt;<sp/>&amp;B)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(A.ncolumn()<sp/>!=<sp/>B.nrow())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>(ArrayError(&quot;product<sp/>-<sp/>multiplication<sp/>of&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>these<sp/>matrices<sp/>shapes<sp/>is<sp/>undefined&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Matrix&lt;T&gt;<sp/>result(A.nrow(),<sp/>B.ncolumn());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A.nrow();<sp/>i++)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>B.ncolumn();<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result(i,j)<sp/>=<sp/>T(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>A.ncolumn();<sp/>k++)<sp/>result(i,j)<sp/>+=<sp/>A(i,k)<sp/>*<sp/>B(k,j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/>Matrix&lt;T&gt;<sp/>transpose<sp/>(const<sp/>Matrix&lt;T&gt;<sp/>&amp;A)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Matrix&lt;T&gt;<sp/>aT(A.ncolumn(),<sp/>A.nrow());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;A.nrow();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>j=0;<sp/>j&lt;A.ncolumn();<sp/>j++)<sp/>aT(j,i)<sp/>=<sp/>A(i,j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>aT;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">Matrix&lt;T&gt;<sp/>directProduct(const<sp/><sp/>Matrix&lt;T&gt;<sp/>&amp;A,<sp/>const<sp/>Matrix&lt;T&gt;<sp/>&amp;B)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ncB<sp/>=<sp/>B.ncolumn(),<sp/>nrB<sp/>=<sp/>B.nrow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>dpAB(A.ncolumn()*B.ncolumn(),A.nrow()*B.nrow());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;dpAB.ncolumn();<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>j=0;<sp/>j&lt;dpAB.nrow();<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dpAB(i,j)<sp/>=<sp/>A(i/ncB,j/nrB)*B(i%ncB,j%nrB);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>dpAB;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/Arrays/MatrixMath.tcc"/>
  </compounddef>
</doxygen>
