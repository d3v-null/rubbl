<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceao" kind="namespace" language="C++">
    <compoundname>ao</compoundname>
    <innerclass refid="classao_1_1uvector" prot="public">ao::uvector</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__uvector_1ga6196ce441dcb8fdf40044c9f97162c7b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ao::operator==</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;lhs, const uvector&lt; Tp, Alloc &gt; &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two uvectors for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1156" column="13" bodyfile="tables/Dysco/uvector.h" bodystart="1156" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="group__uvector_1gafb207c1bc16ae6e2a97e5510eba92938" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ao::operator!=</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;lhs, const uvector&lt; Tp, Alloc &gt; &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two uvectors for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1163" column="13" bodyfile="tables/Dysco/uvector.h" bodystart="1163" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="group__uvector_1gacb4462b3426b8c6966bb792de38a7b1d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ao::operator&lt;</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;lhs, const uvector&lt; Tp, Alloc &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two uvectors for smaller than. </para>
        </briefdescription>
        <detaileddescription>
<para>If two uvectors compare equal up to the length of one, the uvector with the smallest size is consider to be smaller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1173" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="1173" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="group__uvector_1ga5fb5b1ceadbb118ea781115be51cf9db" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ao::operator&lt;=</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;lhs, const uvector&lt; Tp, Alloc &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two uvectors for smaller than or equal. </para>
        </briefdescription>
        <detaileddescription>
<para>If two uvectors compare equal up to the length of one, the uvector with the smallest size is consider to be smaller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1191" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="1191" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="group__uvector_1ga0426b11740b0522d75be11c46b255a00" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ao::operator&gt;</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;lhs, const uvector&lt; Tp, Alloc &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two uvectors for larger than. </para>
        </briefdescription>
        <detaileddescription>
<para>If two uvectors compare equal up to the length of one, the uvector with the smallest size is consider to be smaller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1209" column="13" bodyfile="tables/Dysco/uvector.h" bodystart="1209" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group__uvector_1ga903ae5c38e3b697286b47687e46864d5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ao::operator&gt;=</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;lhs, const uvector&lt; Tp, Alloc &gt; &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two uvectors for larger than or equal. </para>
        </briefdescription>
        <detaileddescription>
<para>If two uvectors compare equal up to the length of one, the uvector with the smallest size is consider to be smaller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1219" column="13" bodyfile="tables/Dysco/uvector.h" bodystart="1219" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="group__uvector_1gafa4ace9f13754144148fe51884355788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tp</type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::swap</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;x, uvector&lt; Tp, Alloc &gt; &amp;y)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Swap the contents of the two uvectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterators to both vectors will remain valid and will point into to the swapped container afterwards. This function will never reallocate space.</para>
<para>The allocator will be swapped when the <computeroutput>propagate_on_container_swap</computeroutput> of the respective <computeroutput>allocator_trait</computeroutput> is <computeroutput>true_type</computeroutput>. Its behaviour is undefined when the allocators do not compare equal and <computeroutput>propagate_on_container_swap</computeroutput> is false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1235" column="13" bodyfile="tables/Dysco/uvector.h" bodystart="1235" bodyend="1238"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="tables/Dysco/uvector.h" line="18" column="1"/>
  </compounddef>
</doxygen>
