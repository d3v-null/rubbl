<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="AipsrcVector_8tcc" kind="file" language="C++">
    <compoundname>AipsrcVector.tcc</compoundname>
    <includedby refid="AipsrcVector_8h" local="no">casa/System/AipsrcVector.h</includedby>
    <invincdepgraph>
      <node id="5">
        <label>casa/System/AppInfo.cc</label>
        <link refid="AppInfo_8cc"/>
      </node>
      <node id="2">
        <label>casa/System/AipsrcVector.h</label>
        <link refid="AipsrcVector_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>casa/System/AipsrcVector.tcc</label>
        <link refid="AipsrcVector_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>casa/System/AipsrcVString.cc</label>
        <link refid="AipsrcVString_8cc"/>
      </node>
      <node id="6">
        <label>casa/System.h</label>
        <link refid="System_8h"/>
      </node>
      <node id="3">
        <label>casa/System/AipsrcVBool.cc</label>
        <link refid="AipsrcVBool_8cc"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>AipsrcVector.cc:<sp/>Read<sp/>multiple<sp/>values<sp/>from<sp/>the<sp/><sp/>Aipsrc<sp/>resource<sp/>files</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1995,1996,1997,1998,2001,2002,2003</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_AIPSRCVECTOR_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_AIPSRCVECTOR_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Includes</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/System/AipsrcVector.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/Regex.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/Assert.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Vector.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Quanta/Quantum.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/sstream.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Data</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">AipsrcVector&lt;T&gt;<sp/>AipsrcVector&lt;T&gt;::myp_p;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Constructor</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">AipsrcVector&lt;T&gt;::AipsrcVector()<sp/>:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tlst(0),<sp/>ntlst(0)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>Destructor</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">AipsrcVector&lt;T&gt;::~AipsrcVector()<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Bool<sp/>AipsrcVector&lt;T&gt;::find(Vector&lt;T&gt;<sp/>&amp;value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String<sp/>&amp;keyword)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bool<sp/>x<sp/>=<sp/>Aipsrc::find(res,<sp/>keyword,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>Regex<sp/>ws(&quot;[<sp/><sp/><sp/>]+&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res.gsub(ws,<sp/>&quot;<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Int<sp/>m<sp/>=<sp/>res.freq(&quot;<sp/>&quot;)<sp/>+1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>*nres<sp/>=<sp/>new<sp/>String[m];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>split(res,<sp/>nres,<sp/>m,<sp/>&quot;<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Vector&lt;T&gt;(m);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Int<sp/>i=0;<sp/>i&lt;m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>istringstream<sp/>instr(nres[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instr<sp/>&gt;&gt;<sp/>value(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>[]<sp/>nres;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>x;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Bool<sp/>AipsrcVector&lt;T&gt;::find(Vector&lt;T&gt;<sp/>&amp;value,<sp/>const<sp/>String<sp/>&amp;keyword,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;deflt)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(find(value,<sp/>keyword)<sp/>?<sp/>True<sp/>:<sp/>(value<sp/>=<sp/>deflt,<sp/>False));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Bool<sp/>AipsrcVector&lt;T&gt;::find(Vector&lt;T&gt;<sp/>&amp;value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String<sp/>&amp;keyword,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Unit<sp/>&amp;defun,<sp/>const<sp/>Unit<sp/>&amp;resun)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bool<sp/>x<sp/>=<sp/>Aipsrc::find(res,<sp/>keyword,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>Regex<sp/>ws(&quot;[<sp/><sp/><sp/>]+&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res.gsub(ws,<sp/>&quot;<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Int<sp/>m<sp/>=<sp/>res.freq(&quot;<sp/>&quot;)<sp/>+1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>*nres<sp/>=<sp/>new<sp/>String[m];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>split(res,<sp/>nres,<sp/>m,<sp/>&quot;<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Vector&lt;T&gt;(m);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Quantum&lt;Double&gt;<sp/>qres;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Int<sp/>i=0;<sp/>i&lt;m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>istringstream<sp/>instr(nres[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instr<sp/>&gt;&gt;<sp/>qres;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(qres.check(UnitVal::NODIM))<sp/>qres.setUnit(defun);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value(i)<sp/>=<sp/>(T)<sp/>qres.getValue(resun);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>[]<sp/>nres;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>x;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Bool<sp/>AipsrcVector&lt;T&gt;::find(Vector&lt;T&gt;<sp/>&amp;value,<sp/>const<sp/>String<sp/>&amp;keyword,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Unit&amp;,<sp/>const<sp/>Unit&amp;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;deflt)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(find(value,<sp/>keyword)<sp/>?<sp/>True<sp/>:<sp/>(value<sp/>=<sp/>deflt,<sp/>False));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">uInt<sp/>AipsrcVector&lt;T&gt;::registerRC(const<sp/>String<sp/>&amp;keyword,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;deflt)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uInt<sp/>n<sp/>=<sp/>Aipsrc::registerRC(keyword,<sp/>myp_p.ntlst);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>myp_p.tlst.resize(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>find<sp/>((myp_p.tlst)[n-1],<sp/>keyword,<sp/>deflt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>n;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">uInt<sp/>AipsrcVector&lt;T&gt;::registerRC(const<sp/>String<sp/>&amp;keyword,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Unit<sp/>&amp;defun,<sp/>const<sp/>Unit<sp/>&amp;resun,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;deflt)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uInt<sp/>n<sp/>=<sp/>Aipsrc::registerRC(keyword,<sp/>myp_p.ntlst);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>myp_p.tlst.resize(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>find<sp/>((myp_p.tlst)[n-1],<sp/>keyword,<sp/>defun,<sp/>resun,<sp/>deflt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>n;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Vector&lt;T&gt;<sp/>&amp;AipsrcVector&lt;T&gt;::get(uInt<sp/>keyword)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AlwaysAssert(keyword<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>keyword<sp/>&lt;=<sp/>myp_p.tlst.nelements(),<sp/>AipsError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(myp_p.tlst)[keyword-1];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>AipsrcVector&lt;T&gt;::set(uInt<sp/>keyword,<sp/>const<sp/>Vector&lt;T&gt;<sp/>&amp;deflt)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AlwaysAssert(keyword<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>keyword<sp/>&lt;=<sp/>myp_p.tlst.nelements(),<sp/>AipsError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(myp_p.tlst)[keyword-1].resize(deflt.nelements());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(myp_p.tlst)[keyword-1]<sp/>=<sp/>deflt;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>AipsrcVector&lt;T&gt;::save(uInt<sp/>keyword)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AlwaysAssert(keyword<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>keyword<sp/>&lt;=<sp/>myp_p.tlst.nelements(),<sp/>AipsError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ostringstream<sp/>oss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Int<sp/>n<sp/>=<sp/>((myp_p.tlst)[keyword-1]).nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(Int<sp/>i=0;<sp/>i&lt;n;<sp/>i++)<sp/>oss<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>((myp_p.tlst)[keyword-1])(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Aipsrc::save((myp_p.ntlst)[keyword-1],<sp/>String(oss));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/System/AipsrcVector.tcc"/>
  </compounddef>
</doxygen>
