<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classao_1_1uvector" kind="class" language="C++" prot="public">
    <compoundname>ao::uvector</compoundname>
    <basecompoundref prot="private" virt="non-virtual">std::allocator&lt; Tp &gt;</basecompoundref>
    <includes refid="uvector_8h" local="no">uvector.h</includes>
    <templateparamlist>
      <param>
        <type>typename Tp</type>
      </param>
      <param>
        <type>typename Alloc</type>
        <defval>std::allocator&lt;Tp&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classao_1_1uvector_1a71db057aafa119005b4dee13c4db52cf" prot="public" static="no">
        <type>Tp</type>
        <definition>typedef Tp ao::uvector&lt; Tp, Alloc &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Element type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="79" column="14" bodyfile="tables/Dysco/uvector.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" prot="public" static="no">
        <type>Alloc</type>
        <definition>typedef Alloc ao::uvector&lt; Tp, Alloc &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
<para>Type of allocator used to allocate and deallocate space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="81" column="17" bodyfile="tables/Dysco/uvector.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a653d02899bdbb5f56e3085020e435a7e" prot="public" static="no">
        <type>Tp &amp;</type>
        <definition>typedef Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Reference to element type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="83" column="14" bodyfile="tables/Dysco/uvector.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a276633c9c49f4f4341feb20d58bbea26" prot="public" static="no">
        <type>const Tp &amp;</type>
        <definition>typedef const Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Constant reference to element type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="85" column="20" bodyfile="tables/Dysco/uvector.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" prot="public" static="no">
        <type>Tp *</type>
        <definition>typedef Tp* ao::uvector&lt; Tp, Alloc &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Pointer to element type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="87" column="14" bodyfile="tables/Dysco/uvector.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a6c1117840801f4059221f50d62fbaed9" prot="public" static="no">
        <type>const Tp *</type>
        <definition>typedef const Tp* ao::uvector&lt; Tp, Alloc &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Pointer to constant element type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="89" column="20" bodyfile="tables/Dysco/uvector.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" prot="public" static="no">
        <type>Tp *</type>
        <definition>typedef Tp* ao::uvector&lt; Tp, Alloc &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>Iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="91" column="14" bodyfile="tables/Dysco/uvector.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" prot="public" static="no">
        <type>const Tp *</type>
        <definition>typedef const Tp* ao::uvector&lt; Tp, Alloc &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Iterator type of constant elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="93" column="20" bodyfile="tables/Dysco/uvector.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; ao::uvector&lt; Tp, Alloc &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>Reverse iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="95" column="33" bodyfile="tables/Dysco/uvector.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; ao::uvector&lt; Tp, Alloc &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>Reverse iterator of constant elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="97" column="33" bodyfile="tables/Dysco/uvector.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1adda3a6b0829c0245e14ffa70152cee70" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t ao::uvector&lt; Tp, Alloc &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Difference between to iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="99" column="26" bodyfile="tables/Dysco/uvector.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t ao::uvector&lt; Tp, Alloc &gt;::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
<para>Type used for indexing elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="101" column="23" bodyfile="tables/Dysco/uvector.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classao_1_1uvector_1afe2c30fa610be46118af297f37f27ca1" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t ao::uvector&lt; Tp, Alloc &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>Type used for indexing elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="103" column="23" bodyfile="tables/Dysco/uvector.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classao_1_1uvector_1a8ce4262f4d9f2325b2e23937917d63b9" prot="private" static="no">
        <type>std::false_type</type>
        <definition>typedef std::false_type ao::uvector&lt; Tp, Alloc &gt;::allocator_is_always_equal</definition>
        <argsstring></argsstring>
        <name>allocator_is_always_equal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="110" column="27" bodyfile="tables/Dysco/uvector.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classao_1_1uvector_1ae628f800fdf44b2f1b2137fc187c7fbc" prot="private" static="no" mutable="no">
        <type><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref></type>
        <definition>pointer ao::uvector&lt; Tp, Alloc &gt;::_begin</definition>
        <argsstring></argsstring>
        <name>_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="112" column="11" bodyfile="tables/Dysco/uvector.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classao_1_1uvector_1ac7452cde30f09bdb3173471bac870258" prot="private" static="no" mutable="no">
        <type><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref></type>
        <definition>pointer ao::uvector&lt; Tp, Alloc &gt;::_end</definition>
        <argsstring></argsstring>
        <name>_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="112" column="18" bodyfile="tables/Dysco/uvector.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classao_1_1uvector_1a3b98e3dde99abe591909a785851506fa" prot="private" static="no" mutable="no">
        <type><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref></type>
        <definition>pointer ao::uvector&lt; Tp, Alloc &gt;::_endOfStorage</definition>
        <argsstring></argsstring>
        <name>_endOfStorage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="112" column="23" bodyfile="tables/Dysco/uvector.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(const allocator_type &amp;allocator=Alloc()) noexcept</argsstring>
        <name>uvector</name>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref> &amp;</type>
          <declname>allocator</declname>
          <defval>Alloc()</defval>
        </param>
        <briefdescription>
<para>Construct an empty uvector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for allocating and deallocating memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="118" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ae5d234595295b78c788ed2140d8b1a89" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(size_t n)</argsstring>
        <name>uvector</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Construct a vector with given amount of elements, without initializing these. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor deviates from std::vector&apos;s behaviour, because it will not value construct its elements. It is therefore faster than the corresponding constructor of std::vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements that the uvector will be initialized with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="129" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ae5f3c0817ed668be39ffebfdb1cfeb72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(size_t n, const value_type &amp;val, const allocator_type &amp;allocator=Alloc())</argsstring>
        <name>uvector</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a71db057aafa119005b4dee13c4db52cf" kindref="member">value_type</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref> &amp;</type>
          <declname>allocator</declname>
          <defval>Alloc()</defval>
        </param>
        <briefdescription>
<para>Construct a vector with given amount of elements and set these to a specific value. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor will initialize its members with the given value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements that the uvector will be initialized with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to initialize all elements with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for allocating and deallocating memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="142" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a7a5467232a346a461969386d55b45437" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(InputIterator first, InputIterator last, const allocator_type &amp;allocator=Alloc())</argsstring>
        <name>uvector</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref> &amp;</type>
          <declname>allocator</declname>
          <defval>Alloc()</defval>
        </param>
        <briefdescription>
<para>Construct a vector by copying elements from a range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to range start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to range end </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for allocating and deallocating memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="157" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1abab9ebda59065a14e8401fb5ed0497dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;other)</argsstring>
        <name>uvector</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy construct a uvector. </para>
        </briefdescription>
        <detaileddescription>
<para>The allocator of the new uvector will be initialized from <computeroutput>std::allocator_traits&lt;Alloc&gt;::select_on_container_copy_construction(other)</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Source uvector to be copied from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="168" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a33eb364955d9dc097b97b6babe84d720" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;other, const allocator_type &amp;allocator)</argsstring>
        <name>uvector</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Copy construct a uvector with custom allocator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Source uvector to be copied from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for allocating and deallocating memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="181" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="181" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a3497a068dd5662316d6a1dc6327cfe7f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;&amp;other) noexcept</argsstring>
        <name>uvector</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move construct a uvector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Source uvector to be moved from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="193" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="193" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1af9ebf4a255853677de835e04ff3581c3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;&amp;other, const allocator_type &amp;allocator) noexcept</argsstring>
        <name>uvector</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Move construct a uvector with custom allocator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Source uvector to be moved from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for allocating and deallocating memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="208" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="208" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ac64d97b346360ed05c2b6febdcbc0f2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::uvector</definition>
        <argsstring>(std::initializer_list&lt; Tp &gt; initlist, const allocator_type &amp;allocator=Alloc())</argsstring>
        <name>uvector</name>
        <param>
          <type>std::initializer_list&lt; Tp &gt;</type>
          <declname>initlist</declname>
        </param>
        <param>
          <type>const <ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref> &amp;</type>
          <declname>allocator</declname>
          <defval>Alloc()</defval>
        </param>
        <briefdescription>
<para>Construct a uvector from a initializer list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initlist</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer list used for initializing the new uvector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for allocating and deallocating memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="223" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="223" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a0384ea33901f406fc1e98b4757ce17cb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ao::uvector&lt; Tp, Alloc &gt;::~uvector</definition>
        <argsstring>() noexcept</argsstring>
        <name>~uvector</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="238" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a0c460db08f23572e8895d8891f76730a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref> &amp;</type>
        <definition>uvector&amp; ao::uvector&lt; Tp, Alloc &gt;::operator=</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assign another uvector to this uvector. </para>
        </briefdescription>
        <detaileddescription>
<para>The allocator of the uvector will be assigned to <computeroutput>other</computeroutput> when std::allocator_traits&lt;Alloc&gt;::propagate_on_container_copy_assignment() is of true_type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="247" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ae29fca669efe2f1dc46de39607752059" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref> &amp;</type>
        <definition>uvector&amp; ao::uvector&lt; Tp, Alloc &gt;::operator=</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;&amp;other) noexcept(std::allocator_traits&lt; Alloc &gt;::propagate_on_container_move_assignment::value||allocator_is_always_equal::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assign another uvector to this uvector. </para>
        </briefdescription>
        <detaileddescription>
<para>The allocator of the uvector will be assigned to <computeroutput>other</computeroutput> when std::allocator_traits&lt;Alloc&gt;::propagate_on_container_move_assignment() is of true_type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="256" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="256" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Get iterator to first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="264" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a78a480d1be5a65f7110e4f1a34724756" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator ao::uvector&lt; Tp, Alloc &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Get constant iterator to first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="267" column="16" bodyfile="tables/Dysco/uvector.h" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Get iterator to element past last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="270" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a93a3ba594d1bb8a88670aa9fbb018adf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator ao::uvector&lt; Tp, Alloc &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Get constant iterator to element past last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="273" column="16" bodyfile="tables/Dysco/uvector.h" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ac0d98dd5e689aeb68db234484515f96e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator ao::uvector&lt; Tp, Alloc &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Get reverse iterator to last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="276" column="18" bodyfile="tables/Dysco/uvector.h" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a2e3325a0a78cd6fb6ba7293c85da2c10" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator ao::uvector&lt; Tp, Alloc &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Get constant reverse iterator to last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="279" column="24" bodyfile="tables/Dysco/uvector.h" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a580e426b99d03410df6e57dc50da8c33" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator ao::uvector&lt; Tp, Alloc &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Get reverse iterator to element before first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="282" column="18" bodyfile="tables/Dysco/uvector.h" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a5c763e0f42637fbe9e63cf87734d7223" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator ao::uvector&lt; Tp, Alloc &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Get constant reverse iterator to element before first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="285" column="24" bodyfile="tables/Dysco/uvector.h" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a55134b90a07642e7374ee7361d620f72" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator ao::uvector&lt; Tp, Alloc &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Get constant iterator to first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="288" column="16" bodyfile="tables/Dysco/uvector.h" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a87d13a83df89d072e4bbea587f47e35a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator ao::uvector&lt; Tp, Alloc &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Get constant iterator to element past last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="291" column="16" bodyfile="tables/Dysco/uvector.h" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1acd31db66931f8cc780b53d1711ced0d8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator ao::uvector&lt; Tp, Alloc &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>Get constant reverse iterator to last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="294" column="24" bodyfile="tables/Dysco/uvector.h" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a22f772273ac3ddaf9adc600f781d2e52" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator ao::uvector&lt; Tp, Alloc &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
<para>Get constant reverse iterator to element before first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="297" column="24" bodyfile="tables/Dysco/uvector.h" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
        <definition>size_t ao::uvector&lt; Tp, Alloc &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get number of elements in container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="300" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ae8a2f7c95a33b257c176b8edb3d7e880" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
        <definition>size_t ao::uvector&lt; Tp, Alloc &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Get maximum number of elements that this container can hold. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="303" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::resize</definition>
        <argsstring>(size_t n)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Change the number of elements in the container. </para>
        </briefdescription>
        <detaileddescription>
<para>If the new size is larger than the current size, new values will be left uninitialized. Therefore, it is more efficient than <computeroutput><ref refid="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" kindref="member">resize(size_t)</ref></computeroutput> in <computeroutput>std::vector</computeroutput>, as well as <ref refid="classao_1_1uvector_1a846b103e8ff6f675f481197127b4a389" kindref="member">resize(size_t, const Tp&amp;)</ref>. If the new size is smaller than the current size, the container will be truncated and elements past the new size will be removed. No destructor of the removed elements will be called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="314" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="314" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a846b103e8ff6f675f481197127b4a389" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::resize</definition>
        <argsstring>(size_t n, const Tp &amp;val)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Tp &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Change the number of elements in the container. </para>
        </briefdescription>
        <detaileddescription>
<para>If the new size is larger than the current size, new values will be initialized by the given value. If the new size is smaller than the current size, the container will be truncated and elements past the new size will be removed. No destructor of the removed elements will be called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the container. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New value of elements that get added to the container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="337" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="337" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
        <definition>size_t ao::uvector&lt; Tp, Alloc &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Get the number of elements the container can currently hold without reallocating storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="354" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="354" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a834534d95e4406d971a9c2599cefc790" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ao::uvector&lt; Tp, Alloc &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Determine if the container is currently empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if <ref refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" kindref="member">size()</ref> == 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="358" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a5c17d4bacbb3983c24a1477b15ec4bc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::reserve</definition>
        <argsstring>(size_t n)</argsstring>
        <name>reserve</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reserve space for a number of elements, to prevent the overhead of extra reallocations. </para>
        </briefdescription>
        <detaileddescription>
<para>This has no effect on the working of the uvector, except that it might change the current capacity. This can enhance performance when a large number of elements are added, and an approximate size is known a priori.</para>
<para>This method might cause a reallocation, causing iterators to be invalidated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to reserve space for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="369" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="369" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a08863dcb6f57dd9f7fec8190ed2055cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::shrink_to_fit</definition>
        <argsstring>()</argsstring>
        <name>shrink_to_fit</name>
        <briefdescription>
<para>Change the capacity of the container such that no extra space is hold. </para>
        </briefdescription>
        <detaileddescription>
<para>This has no effect on the working of the uvector, except that it might change the current capacity. This can reduce the current memory usage of the container.</para>
<para>This method might cause a reallocation, causing iterators to be invalidated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="389" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="389" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ab025e61401da9f352c82b211377d3c66" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Tp &amp;</type>
        <definition>Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::operator[]</definition>
        <argsstring>(size_t index) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a reference to the element at the given index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="410" column="4" bodyfile="tables/Dysco/uvector.h" bodystart="410" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a2f353b9ea4d9b3fde8bc035efb257ee7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Tp &amp;</type>
        <definition>const Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::operator[]</definition>
        <argsstring>(size_t index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a constant reference to the element at the given index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="413" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ab2f17d41f81b07231a38115d4337ad85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Tp &amp;</type>
        <definition>Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::at</definition>
        <argsstring>(size_t index)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a reference to the element at the given index with bounds checking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>when given index is past the last element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="418" column="4" bodyfile="tables/Dysco/uvector.h" bodystart="418" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a6fe739baf292488dec65b70d88d29267" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Tp &amp;</type>
        <definition>const Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::at</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a constant reference to the element at the given index with bounds checking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>when given index is past the last element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="427" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aee98ea97e491f3ee31ca28e2d832ce53" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Tp &amp;</type>
        <definition>Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <briefdescription>
<para>Get reference to first element in container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="434" column="4" bodyfile="tables/Dysco/uvector.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aa415b08862cffdcacadf13c3212af303" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Tp &amp;</type>
        <definition>const Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <briefdescription>
<para>Get constant reference to first element in container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="437" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="437" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a351232c0a0ca4e981ab64276d37ecb51" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Tp &amp;</type>
        <definition>Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <briefdescription>
<para>Get reference to last element in container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="440" column="4" bodyfile="tables/Dysco/uvector.h" bodystart="440" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a77f388e6de64028142fab43234f50d4c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Tp &amp;</type>
        <definition>const Tp&amp; ao::uvector&lt; Tp, Alloc &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <briefdescription>
<para>Get constant reference to last element in container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="443" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="443" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Tp *</type>
        <definition>Tp* ao::uvector&lt; Tp, Alloc &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Get pointer to internal storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="446" column="4" bodyfile="tables/Dysco/uvector.h" bodystart="446" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a928c9d33d2c1b4c2cb917a8b58135a14" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Tp *</type>
        <definition>const Tp* ao::uvector&lt; Tp, Alloc &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Get constant pointer to internal storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="449" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="449" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1acb06505af16be08f01f5a0028da9fe88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::assign</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>assign</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Assign this container to be equal to the given range. </para>
        </briefdescription>
        <detaileddescription>
<para>The container will be resized to fit the length of the given range. Iterators are invalidated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator past the end of the range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="458" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a6f47d3741444fa997327c2f6f7b3e6c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::assign</definition>
        <argsstring>(size_t n, const Tp &amp;val)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Tp &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Resize the container and assign the given value to all elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterators are invalidated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be assigned to all elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="468" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="468" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a634a276af97bd750a36177b701a9d146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::assign</definition>
        <argsstring>(std::initializer_list&lt; Tp &gt; initlist)</argsstring>
        <name>assign</name>
        <param>
          <type>std::initializer_list&lt; Tp &gt;</type>
          <declname>initlist</declname>
        </param>
        <briefdescription>
<para>Assign this container to an initializer list. </para>
        </briefdescription>
        <detaileddescription>
<para>The container will be resized to fit the length of the given initializer list. Iterators are invalidated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initlist</parametername>
</parameternamelist>
<parameterdescription>
<para>List of values to assign to the container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="486" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="486" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1adcf96370233197b0a9161ccbe6fd12cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back</definition>
        <argsstring>(const Tp &amp;item)</argsstring>
        <name>push_back</name>
        <param>
          <type>const Tp &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Add the given value to the end of the container. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterators are invalidated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of new element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="508" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="508" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ae2204216d5a93b14845859bfdefa4dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back</definition>
        <argsstring>(Tp &amp;&amp;item)</argsstring>
        <name>push_back</name>
        <param>
          <type>Tp &amp;&amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Add the given value to the end of the container by moving it in. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterators are invalidated.</para>
<para>Note that this container can only hold simple types that do not perform allocations. Therefore, there is probably no benefit in moving the new item in over copying it in with <ref refid="classao_1_1uvector_1adcf96370233197b0a9161ccbe6fd12cd" kindref="member">push_back(const Tp&amp;)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of new element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="523" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="523" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aab5bf48390f54e1dfcf812d484b5135b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Remove the last element from the container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="532" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1af98ccf7b248bb73ee8805f9a65f9a6a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert</definition>
        <argsstring>(const_iterator position, const Tp &amp;item)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>const Tp &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Insert an element at a given position. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new element. The new element will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the new item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the new element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="545" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="545" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aa1a3f5fceafd44237491931013f6d0e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert</definition>
        <argsstring>(const_iterator position, size_t n, const Tp &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Tp &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert elements at a given position and initialize them with a value. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new elements. The new elements will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the new item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the first new element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="570" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="570" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a7aa7fe6ffc176a2b0c0c64d5f881737d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert</definition>
        <argsstring>(const_iterator position, InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Insert elements at a given position and initialize them from a range. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new elements. The new elements will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator past the end of the range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the first new element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="596" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="596" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aac20e88d7cd2f10f3d0073de746ba7c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert</definition>
        <argsstring>(const_iterator position, Tp &amp;&amp;item)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>Tp &amp;&amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Insert an element at a given position by moving it in. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive.</para>
<para>Note that this container can only hold simple types that do not perform allocations. Therefore, there is probably no benefit in moving the new item in over copying it in with <ref refid="classao_1_1uvector_1af98ccf7b248bb73ee8805f9a65f9a6a9" kindref="member">insert(const_iterator, const Tp&amp;)</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new element. The new element will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the new item. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the new element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="613" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="613" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a88716bb0affe3a4949b99f2a63851117" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert</definition>
        <argsstring>(const_iterator position, std::initializer_list&lt; Tp &gt; initlist)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; Tp &gt;</type>
          <declname>initlist</declname>
        </param>
        <briefdescription>
<para>Insert elements at a given position and initialize them from a initializer list. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new elements. The new elements will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initlist</parametername>
</parameternamelist>
<parameterdescription>
<para>List of items to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the first new element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="637" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="637" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a834bab716da5d5eae98f203511e072b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::erase</definition>
        <argsstring>(const_iterator position)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Delete an element from the container. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation moves all elements past the removed element, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of element to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator pointing to the first element past the delete element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="664" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="664" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1adbc616c537e5915439524719f856b6a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::erase</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Delete a range of elements from the container. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation moves all elements past the removed elements, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of first element to be removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Position past last element to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator pointing to the first element past the delete element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="678" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="678" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::swap</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this uvector with the given uvector. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterators to both vectors will remain valid and will point into to the swapped container afterwards. This function will never reallocate space.</para>
<para>The allocator will be swapped when the <computeroutput>propagate_on_container_swap</computeroutput> of the respective <computeroutput>allocator_trait</computeroutput> is <computeroutput>true_type</computeroutput>. Its behaviour is undefined when the allocators do not compare equal and <computeroutput>propagate_on_container_swap</computeroutput> is false. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other uvector whose contents it to be swapped with this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="696" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="696" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a7fc11179ac391addb252718f9134689d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Remove all elements from the container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="702" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="702" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1af4f7fba1993fff2255fc7e41db4c3c73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::emplace</definition>
        <argsstring>(const_iterator position, Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Insert an element at a given position by constructing it in place. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new element. The new element will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments to be forwarded to construct the new element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the new element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="716" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="716" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a92c04320e9490ae03a03c349acebb70d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Add the given value to the end of the container by constructing it in place. </para>
        </briefdescription>
        <detaileddescription>
<para>Iterators are invalidated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments to be forwarded to construct the new element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="737" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="737" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1af2ae154a74e75c0db67dcab01fde637e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" kindref="member">allocator_type</ref></type>
        <definition>allocator_type ao::uvector&lt; Tp, Alloc &gt;::get_allocator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_allocator</name>
        <briefdescription>
<para>Get a copy of the allocator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="746" column="16" bodyfile="tables/Dysco/uvector.h" bodystart="746" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a0352642a9593ed793434525113213a9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert_uninitialized</definition>
        <argsstring>(const_iterator position, size_t n)</argsstring>
        <name>insert_uninitialized</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Insert elements at a given position without initializing them. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated. This operation needs to move all elements after the new element, and can therefore be expensive. It will not initialize the new elements, and is therefore faster than <ref refid="classao_1_1uvector_1aa1a3f5fceafd44237491931013f6d0e6" kindref="member">insert(const_iterator, size_t, const Tp&amp;)</ref>.</para>
<para>This method is non-standard: it is not present in std::vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new elements. The new elements will be added before the old element at that position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="763" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="763" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1abaf220f5a31cf9a836c86b7fe655ad48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>push_back</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Add a range of items to the end of the container. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated.</para>
<para>This method is non-standard: it is not present in std::vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to the beginning of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator past the end of the range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="786" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="786" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a58e54db140700aa9fe0ac5cad57e64d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back</definition>
        <argsstring>(size_t n, const Tp &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Tp &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Add elements at the end and initialize them with a value. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated.</para>
<para>This method is non-standard: it is not present in std::vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the new items. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="798" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="798" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a140d21adbed27c0c8f3b8e2628561abf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back</definition>
        <argsstring>(std::initializer_list&lt; Tp &gt; initlist)</argsstring>
        <name>push_back</name>
        <param>
          <type>std::initializer_list&lt; Tp &gt;</type>
          <declname>initlist</declname>
        </param>
        <briefdescription>
<para>Add elements from an initializer list to the end of the container. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated.</para>
<para>This method is non-standard: it is not present in std::vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initlist</parametername>
</parameternamelist>
<parameterdescription>
<para>The list with values to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="814" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="814" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a0c7d62a0dcc15c42668e662180b1208f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back_uninitialized</definition>
        <argsstring>(size_t n)</argsstring>
        <name>push_back_uninitialized</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Add elements at the end without initializing them. </para>
        </briefdescription>
        <detaileddescription>
<para>All iterators will be invalidated.</para>
<para>This method is non-standard: it is not present in std::vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="833" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="833" bodyend="836"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classao_1_1uvector_1a9bb191fc76b0bd9acd5c0f9f4a7dccff" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref></type>
        <definition>pointer ao::uvector&lt; Tp, Alloc &gt;::allocate</definition>
        <argsstring>(size_t n)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="840" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="840" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a0743d81f64e1d3eb2ef6092140148313" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::deallocate</definition>
        <argsstring>() noexcept</argsstring>
        <name>deallocate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="845" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="845" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a27a7501365172868535c42866baa31df" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::deallocate</definition>
        <argsstring>(pointer begin, size_t n) noexcept</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" kindref="member">pointer</ref></type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="850" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="850" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a432f3dc2e69dfa2c01ae8a915a9ada1a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::construct_from_range</definition>
        <argsstring>(InputIterator first, InputIterator last, std::false_type)</argsstring>
        <name>construct_from_range</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="857" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="857" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ad2fcfa9ae1d997cdd601c0813cb89ab8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integral</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::construct_from_range</definition>
        <argsstring>(Integral n, Integral val, std::true_type)</argsstring>
        <name>construct_from_range</name>
        <param>
          <type>Integral</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Integral</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="863" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="863" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ae228f0096ecfc7349ef9afdbae0120d0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::construct_from_range</definition>
        <argsstring>(InputIterator first, InputIterator last, std::forward_iterator_tag)</argsstring>
        <name>construct_from_range</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::forward_iterator_tag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="872" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="872" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1ada5eed0606d17dd25f1335cd11d4249a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::assign_from_range</definition>
        <argsstring>(InputIterator first, InputIterator last, std::false_type)</argsstring>
        <name>assign_from_range</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="887" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="887" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a53a63797c9e16e54a1eea8652ff0aca6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integral</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::assign_from_range</definition>
        <argsstring>(Integral n, Integral val, std::true_type)</argsstring>
        <name>assign_from_range</name>
        <param>
          <type>Integral</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Integral</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="895" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="895" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a025f88cefff664210d62d0e8b35fb493" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::assign_from_range</definition>
        <argsstring>(InputIterator first, InputIterator last, std::forward_iterator_tag)</argsstring>
        <name>assign_from_range</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::forward_iterator_tag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="909" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="909" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1afbb291fe14be711588058761d89a1540" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert_from_range</definition>
        <argsstring>(const_iterator position, InputIterator first, InputIterator last, std::false_type)</argsstring>
        <name>insert_from_range</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="929" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="929" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a885e5b9c35bf1ff2fcda0b56eff7a9b8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integral</type>
          </param>
        </templateparamlist>
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert_from_range</definition>
        <argsstring>(const_iterator position, Integral n, Integral val, std::true_type)</argsstring>
        <name>insert_from_range</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>Integral</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Integral</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="936" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="936" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a4552f65896573411fd7d681c845bedda" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" kindref="member">iterator</ref></type>
        <definition>iterator ao::uvector&lt; Tp, Alloc &gt;::insert_from_range</definition>
        <argsstring>(const_iterator position, InputIterator first, InputIterator last, std::forward_iterator_tag)</argsstring>
        <name>insert_from_range</name>
        <param>
          <type><ref refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::forward_iterator_tag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="953" column="10" bodyfile="tables/Dysco/uvector.h" bodystart="953" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1af5ba538859110addcadec086844a5313" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::check_bounds</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>check_bounds</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="975" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="975" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aa415f9761d7b2506d932d2cf35491698" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
        <definition>size_t ao::uvector&lt; Tp, Alloc &gt;::enlarge_size</definition>
        <argsstring>(size_t extra_space_needed) const noexcept</argsstring>
        <name>enlarge_size</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>extra_space_needed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="981" column="8" bodyfile="tables/Dysco/uvector.h" bodystart="981" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a6e3c71ad7051bf305fc4ba4ef332a19f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::enlarge</definition>
        <argsstring>(size_t newSize)</argsstring>
        <name>enlarge</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="986" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="986" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1aba7605f103523646b28409243fede267" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::enlarge_for_insert</definition>
        <argsstring>(size_t newSize, size_t insert_position, size_t insert_count)</argsstring>
        <name>enlarge_for_insert</name>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>newSize</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>insert_position</declname>
        </param>
        <param>
          <type><ref refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" kindref="member">size_t</ref></type>
          <declname>insert_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="996" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="996" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a8011d1c2f2368b573f403484112c3b07" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref> &amp;</type>
        <definition>uvector&amp; ao::uvector&lt; Tp, Alloc &gt;::assign_copy_from</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;other, std::false_type)</argsstring>
        <name>assign_copy_from</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1008" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="1008" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a02fda69cbbd6a798d0e34fcfabc74659" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref> &amp;</type>
        <definition>uvector&amp; ao::uvector&lt; Tp, Alloc &gt;::assign_copy_from</definition>
        <argsstring>(const uvector&lt; Tp, Alloc &gt; &amp;other, std::true_type)</argsstring>
        <name>assign_copy_from</name>
        <param>
          <type>const <ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1023" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="1023" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a067b6e2e288abce9328b2c4f9be3962e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref> &amp;</type>
        <definition>uvector&amp; ao::uvector&lt; Tp, Alloc &gt;::assign_move_from</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;&amp;other, std::false_type) noexcept(allocator_is_always_equal::value)</argsstring>
        <name>assign_move_from</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1043" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="1043" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a5cb56c887436101adb2173bae70c10ec" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref> &amp;</type>
        <definition>uvector&amp; ao::uvector&lt; Tp, Alloc &gt;::assign_move_from</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;&amp;other, std::true_type) noexcept</argsstring>
        <name>assign_move_from</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1066" column="9" bodyfile="tables/Dysco/uvector.h" bodystart="1066" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a8f037cc0e7c4f8799601b620a3d9e46c" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::swap</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;other, std::true_type) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1080" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="1080" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a53e9b31e539c21a5bd4fbfab4ac68af2" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::swap</definition>
        <argsstring>(uvector&lt; Tp, Alloc &gt; &amp;other, std::false_type) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classao_1_1uvector" kindref="compound">uvector</ref>&lt; Tp, Alloc &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>We have two choices here:<itemizedlist>
<listitem><para>Do not swap the allocators. For stateful allocators, we would need to reallocate memory, and iterators would not be valid UNLESS they were stored as indices. However, containers with stateful allocators are not allowed to be swapped unless the allocators are equal, in which case swapping is not necessary.</para>
</listitem><listitem><para>Swap the allocators. This would not reallocate memory and iterators remain valid, but the trait ignores propagate_on_container_swap.</para>
</listitem></itemizedlist>
</para>
<para>The standard says: "Allocator replacement is performed by copy assignment, move assignment, or swapping of the allocator only if allocator_traits&lt;allocatortype&gt;:: propagate_on_container_copy_assignment::value, allocator_traits&lt;allocatortype&gt;::propagate_on_container_move_assignment::value, or allocator_traits&lt;allocatortype&gt;::propagate_on_container_swap::value is true within the implementation of the corresponding container operation. The behavior of a call to a container’s swap function is undefined unless the objects being swapped have allocators that compare equal or allocator_traits&lt;allocatortype&gt;::propagate_on_container_swap::value is true."</para>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1089" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="1089" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a18a699aca94ccc931ec1a53bd342d0d1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back_range</definition>
        <argsstring>(InputIterator first, InputIterator last, std::false_type)</argsstring>
        <name>push_back_range</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1118" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="1118" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a578597c310dff5db5d5fa35697ff25e1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Integral</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back_range</definition>
        <argsstring>(Integral n, Integral val, std::true_type)</argsstring>
        <name>push_back_range</name>
        <param>
          <type>Integral</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Integral</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1126" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="1126" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="classao_1_1uvector_1a3d28873fce89100602ceac8a3d872b77" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ao::uvector&lt; Tp, Alloc &gt;::push_back_range</definition>
        <argsstring>(InputIterator first, InputIterator last, std::forward_iterator_tag)</argsstring>
        <name>push_back_range</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>std::forward_iterator_tag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/uvector.h" line="1137" column="6" bodyfile="tables/Dysco/uvector.h" bodystart="1137" bodyend="1150"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A container similar to std::vector, but one that allows construction without initializing its elements. </para>
    </briefdescription>
    <detaileddescription>
<para>This container is similar to a std::vector, except that it can be constructed without initializing its elements. This saves the overhead of initialization, hence the constructor <ref refid="classao_1_1uvector_1ae5d234595295b78c788ed2140d8b1a89" kindref="member">uvector(size_t)</ref> is significantly faster than the corresponding std::vector constructor, and has no overhead compared to a manually allocated array.</para>
<para>Probably its greatest strength lies in the construction of containers with a number of elements that is runtime defined, but that will be initialized later. For example:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Open<sp/>a<sp/>file</highlight></codeline>
<codeline><highlight class="normal">ifstream<sp/>file(&quot;myfile.bin&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>a<sp/>buffer<sp/>for<sp/>this<sp/>file</highlight></codeline>
<codeline><highlight class="normal">uvector&lt;char&gt;<sp/>buffer(buffer_size);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Read<sp/>some<sp/>data<sp/>into<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">file.read(&amp;buffer[0],<sp/>buffer_size);</highlight></codeline>
</programlisting></para>
<para>However, it has a few more use-cases with improved performance over std::vector. This is possible because of more strengent requirements on the element&apos;s type.</para>
<para>The container will behave correctly with any trivial type, but will not work for almost all non-trivial types.</para>
<para>The methods with different semantics compared to std::vector are:<itemizedlist>
<listitem><para><ref refid="classao_1_1uvector_1ae5d234595295b78c788ed2140d8b1a89" kindref="member">uvector(size_t n)</ref></para>
</listitem><listitem><para><ref refid="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" kindref="member">resize(size_t n)</ref></para>
</listitem></itemizedlist>
</para>
<para>Also the following new members are introduced:<itemizedlist>
<listitem><para><ref refid="classao_1_1uvector_1a0352642a9593ed793434525113213a9a" kindref="member">insert_uninitialized(const_iterator position, size_t n)</ref></para>
</listitem><listitem><para><ref refid="classao_1_1uvector_1abaf220f5a31cf9a836c86b7fe655ad48" kindref="member">push_back(InputIterator first, InputIterator last)</ref></para>
</listitem><listitem><para><ref refid="classao_1_1uvector_1a58e54db140700aa9fe0ac5cad57e64d2" kindref="member">push_back(size_t n, const Tp&amp; val)</ref></para>
</listitem><listitem><para><ref refid="classao_1_1uvector_1a140d21adbed27c0c8f3b8e2628561abf" kindref="member">push_back(std::initializer_list&lt;Tp&gt; initlist)</ref></para>
</listitem><listitem><para><ref refid="classao_1_1uvector_1a0c7d62a0dcc15c42668e662180b1208f" kindref="member">push_back_uninitialized(size_t n)</ref></para>
</listitem></itemizedlist>
</para>
<para>All other members work exactly like std::vector&apos;s members, although some are slightly faster because of the stricter requirements on the element type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Container&apos;s element type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator type. Default is to use the std::allocator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>André Offringa </para>
</simplesect>
<simplesect kind="copyright"><para>André Offringa, 2013, distributed under the GPL license version 3. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
      </node>
      <node id="1">
        <label>ao::uvector&lt; Tp, Alloc &gt;</label>
        <link refid="classao_1_1uvector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>T</label>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ao::uvector&lt; Tp, Alloc &gt;</label>
        <link refid="classao_1_1uvector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="tables/Dysco/uvector.h" line="73" column="1" bodyfile="tables/Dysco/uvector.h" bodystart="74" bodyend="1152"/>
    <listofallmembers>
      <member refid="classao_1_1uvector_1ae628f800fdf44b2f1b2137fc187c7fbc" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>_begin</name></member>
      <member refid="classao_1_1uvector_1ac7452cde30f09bdb3173471bac870258" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>_end</name></member>
      <member refid="classao_1_1uvector_1a3b98e3dde99abe591909a785851506fa" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>_endOfStorage</name></member>
      <member refid="classao_1_1uvector_1a9bb191fc76b0bd9acd5c0f9f4a7dccff" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>allocate</name></member>
      <member refid="classao_1_1uvector_1a8ce4262f4d9f2325b2e23937917d63b9" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>allocator_is_always_equal</name></member>
      <member refid="classao_1_1uvector_1a6e0f4b56eca3a8e5b76bcc2de5cffcda" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>allocator_type</name></member>
      <member refid="classao_1_1uvector_1acb06505af16be08f01f5a0028da9fe88" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>assign</name></member>
      <member refid="classao_1_1uvector_1a6f47d3741444fa997327c2f6f7b3e6c0" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>assign</name></member>
      <member refid="classao_1_1uvector_1a634a276af97bd750a36177b701a9d146" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>assign</name></member>
      <member refid="classao_1_1uvector_1a8011d1c2f2368b573f403484112c3b07" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_copy_from</name></member>
      <member refid="classao_1_1uvector_1a02fda69cbbd6a798d0e34fcfabc74659" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_copy_from</name></member>
      <member refid="classao_1_1uvector_1ada5eed0606d17dd25f1335cd11d4249a" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_from_range</name></member>
      <member refid="classao_1_1uvector_1a53a63797c9e16e54a1eea8652ff0aca6" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_from_range</name></member>
      <member refid="classao_1_1uvector_1a025f88cefff664210d62d0e8b35fb493" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_from_range</name></member>
      <member refid="classao_1_1uvector_1a067b6e2e288abce9328b2c4f9be3962e" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_move_from</name></member>
      <member refid="classao_1_1uvector_1a5cb56c887436101adb2173bae70c10ec" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>assign_move_from</name></member>
      <member refid="classao_1_1uvector_1ab2f17d41f81b07231a38115d4337ad85" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>at</name></member>
      <member refid="classao_1_1uvector_1a6fe739baf292488dec65b70d88d29267" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>at</name></member>
      <member refid="classao_1_1uvector_1a351232c0a0ca4e981ab64276d37ecb51" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>back</name></member>
      <member refid="classao_1_1uvector_1a77f388e6de64028142fab43234f50d4c" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>back</name></member>
      <member refid="classao_1_1uvector_1a7475fb5e6696984a7bf85bb5818b2aaf" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>begin</name></member>
      <member refid="classao_1_1uvector_1a78a480d1be5a65f7110e4f1a34724756" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>begin</name></member>
      <member refid="classao_1_1uvector_1a3ad9f7960b8a324c03b6983f7ff31330" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>capacity</name></member>
      <member refid="classao_1_1uvector_1a55134b90a07642e7374ee7361d620f72" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>cbegin</name></member>
      <member refid="classao_1_1uvector_1a87d13a83df89d072e4bbea587f47e35a" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>cend</name></member>
      <member refid="classao_1_1uvector_1af5ba538859110addcadec086844a5313" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>check_bounds</name></member>
      <member refid="classao_1_1uvector_1a7fc11179ac391addb252718f9134689d" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>clear</name></member>
      <member refid="classao_1_1uvector_1a011d6c3bfe6cabe6984019064522762c" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>const_iterator</name></member>
      <member refid="classao_1_1uvector_1a6c1117840801f4059221f50d62fbaed9" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>const_pointer</name></member>
      <member refid="classao_1_1uvector_1a276633c9c49f4f4341feb20d58bbea26" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>const_reference</name></member>
      <member refid="classao_1_1uvector_1ac25f986e75fa5090132984e31783ebb0" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>const_reverse_iterator</name></member>
      <member refid="classao_1_1uvector_1a432f3dc2e69dfa2c01ae8a915a9ada1a" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>construct_from_range</name></member>
      <member refid="classao_1_1uvector_1ad2fcfa9ae1d997cdd601c0813cb89ab8" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>construct_from_range</name></member>
      <member refid="classao_1_1uvector_1ae228f0096ecfc7349ef9afdbae0120d0" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>construct_from_range</name></member>
      <member refid="classao_1_1uvector_1acd31db66931f8cc780b53d1711ced0d8" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>crbegin</name></member>
      <member refid="classao_1_1uvector_1a22f772273ac3ddaf9adc600f781d2e52" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>crend</name></member>
      <member refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>data</name></member>
      <member refid="classao_1_1uvector_1a928c9d33d2c1b4c2cb917a8b58135a14" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>data</name></member>
      <member refid="classao_1_1uvector_1a0743d81f64e1d3eb2ef6092140148313" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>deallocate</name></member>
      <member refid="classao_1_1uvector_1a27a7501365172868535c42866baa31df" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>deallocate</name></member>
      <member refid="classao_1_1uvector_1adda3a6b0829c0245e14ffa70152cee70" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>difference_type</name></member>
      <member refid="classao_1_1uvector_1af4f7fba1993fff2255fc7e41db4c3c73" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>emplace</name></member>
      <member refid="classao_1_1uvector_1a92c04320e9490ae03a03c349acebb70d" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>emplace_back</name></member>
      <member refid="classao_1_1uvector_1a834534d95e4406d971a9c2599cefc790" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>empty</name></member>
      <member refid="classao_1_1uvector_1a92761da8791e8e10b65281d9ef6c39cf" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>end</name></member>
      <member refid="classao_1_1uvector_1a93a3ba594d1bb8a88670aa9fbb018adf" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>end</name></member>
      <member refid="classao_1_1uvector_1a6e3c71ad7051bf305fc4ba4ef332a19f" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>enlarge</name></member>
      <member refid="classao_1_1uvector_1aba7605f103523646b28409243fede267" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>enlarge_for_insert</name></member>
      <member refid="classao_1_1uvector_1aa415f9761d7b2506d932d2cf35491698" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>enlarge_size</name></member>
      <member refid="classao_1_1uvector_1a834bab716da5d5eae98f203511e072b7" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>erase</name></member>
      <member refid="classao_1_1uvector_1adbc616c537e5915439524719f856b6a1" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>erase</name></member>
      <member refid="classao_1_1uvector_1aee98ea97e491f3ee31ca28e2d832ce53" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>front</name></member>
      <member refid="classao_1_1uvector_1aa415b08862cffdcacadf13c3212af303" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>front</name></member>
      <member refid="classao_1_1uvector_1af2ae154a74e75c0db67dcab01fde637e" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>get_allocator</name></member>
      <member refid="classao_1_1uvector_1af98ccf7b248bb73ee8805f9a65f9a6a9" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>insert</name></member>
      <member refid="classao_1_1uvector_1aa1a3f5fceafd44237491931013f6d0e6" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>insert</name></member>
      <member refid="classao_1_1uvector_1a7aa7fe6ffc176a2b0c0c64d5f881737d" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>insert</name></member>
      <member refid="classao_1_1uvector_1aac20e88d7cd2f10f3d0073de746ba7c0" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>insert</name></member>
      <member refid="classao_1_1uvector_1a88716bb0affe3a4949b99f2a63851117" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>insert</name></member>
      <member refid="classao_1_1uvector_1afbb291fe14be711588058761d89a1540" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>insert_from_range</name></member>
      <member refid="classao_1_1uvector_1a885e5b9c35bf1ff2fcda0b56eff7a9b8" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>insert_from_range</name></member>
      <member refid="classao_1_1uvector_1a4552f65896573411fd7d681c845bedda" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>insert_from_range</name></member>
      <member refid="classao_1_1uvector_1a0352642a9593ed793434525113213a9a" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>insert_uninitialized</name></member>
      <member refid="classao_1_1uvector_1a597be551193c3a7d8d8a9ba57b2d21ad" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>iterator</name></member>
      <member refid="classao_1_1uvector_1ae8a2f7c95a33b257c176b8edb3d7e880" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>max_size</name></member>
      <member refid="classao_1_1uvector_1a0c460db08f23572e8895d8891f76730a" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>operator=</name></member>
      <member refid="classao_1_1uvector_1ae29fca669efe2f1dc46de39607752059" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>operator=</name></member>
      <member refid="classao_1_1uvector_1ab025e61401da9f352c82b211377d3c66" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>operator[]</name></member>
      <member refid="classao_1_1uvector_1a2f353b9ea4d9b3fde8bc035efb257ee7" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>operator[]</name></member>
      <member refid="classao_1_1uvector_1a56141f76e1742adacd4a22b0cfbce59e" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>pointer</name></member>
      <member refid="classao_1_1uvector_1aab5bf48390f54e1dfcf812d484b5135b" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>pop_back</name></member>
      <member refid="classao_1_1uvector_1adcf96370233197b0a9161ccbe6fd12cd" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>push_back</name></member>
      <member refid="classao_1_1uvector_1ae2204216d5a93b14845859bfdefa4dbc" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>push_back</name></member>
      <member refid="classao_1_1uvector_1abaf220f5a31cf9a836c86b7fe655ad48" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>push_back</name></member>
      <member refid="classao_1_1uvector_1a58e54db140700aa9fe0ac5cad57e64d2" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>push_back</name></member>
      <member refid="classao_1_1uvector_1a140d21adbed27c0c8f3b8e2628561abf" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>push_back</name></member>
      <member refid="classao_1_1uvector_1a18a699aca94ccc931ec1a53bd342d0d1" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>push_back_range</name></member>
      <member refid="classao_1_1uvector_1a578597c310dff5db5d5fa35697ff25e1" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>push_back_range</name></member>
      <member refid="classao_1_1uvector_1a3d28873fce89100602ceac8a3d872b77" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>push_back_range</name></member>
      <member refid="classao_1_1uvector_1a0c7d62a0dcc15c42668e662180b1208f" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>push_back_uninitialized</name></member>
      <member refid="classao_1_1uvector_1ac0d98dd5e689aeb68db234484515f96e" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>rbegin</name></member>
      <member refid="classao_1_1uvector_1a2e3325a0a78cd6fb6ba7293c85da2c10" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>rbegin</name></member>
      <member refid="classao_1_1uvector_1a653d02899bdbb5f56e3085020e435a7e" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>reference</name></member>
      <member refid="classao_1_1uvector_1a580e426b99d03410df6e57dc50da8c33" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>rend</name></member>
      <member refid="classao_1_1uvector_1a5c763e0f42637fbe9e63cf87734d7223" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>rend</name></member>
      <member refid="classao_1_1uvector_1a5c17d4bacbb3983c24a1477b15ec4bc7" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>reserve</name></member>
      <member refid="classao_1_1uvector_1a438e78bce885a37dc76c7b1bef016355" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>resize</name></member>
      <member refid="classao_1_1uvector_1a846b103e8ff6f675f481197127b4a389" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>resize</name></member>
      <member refid="classao_1_1uvector_1a43730bd384eabef86420b4f18260f197" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>reverse_iterator</name></member>
      <member refid="classao_1_1uvector_1a08863dcb6f57dd9f7fec8190ed2055cc" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>shrink_to_fit</name></member>
      <member refid="classao_1_1uvector_1a3ce3e9629d364cbcb7d0e878c127801f" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>size</name></member>
      <member refid="classao_1_1uvector_1af8b2cbb86306b29cda7237156950bc8f" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>size_t</name></member>
      <member refid="classao_1_1uvector_1afe2c30fa610be46118af297f37f27ca1" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>size_type</name></member>
      <member refid="classao_1_1uvector_1adda06e94cc27f64265d786795969f922" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>swap</name></member>
      <member refid="classao_1_1uvector_1a8f037cc0e7c4f8799601b620a3d9e46c" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>swap</name></member>
      <member refid="classao_1_1uvector_1a53e9b31e539c21a5bd4fbfab4ac68af2" prot="private" virt="non-virtual"><scope>ao::uvector</scope><name>swap</name></member>
      <member refid="classao_1_1uvector_1a0a5f71a18d12bcdd15af33f6f7bf4925" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1ae5d234595295b78c788ed2140d8b1a89" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1ae5f3c0817ed668be39ffebfdb1cfeb72" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1a7a5467232a346a461969386d55b45437" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1abab9ebda59065a14e8401fb5ed0497dc" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1a33eb364955d9dc097b97b6babe84d720" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1a3497a068dd5662316d6a1dc6327cfe7f" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1af9ebf4a255853677de835e04ff3581c3" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1ac64d97b346360ed05c2b6febdcbc0f2a" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>uvector</name></member>
      <member refid="classao_1_1uvector_1a71db057aafa119005b4dee13c4db52cf" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>value_type</name></member>
      <member refid="classao_1_1uvector_1a0384ea33901f406fc1e98b4757ce17cb" prot="public" virt="non-virtual"><scope>ao::uvector</scope><name>~uvector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
