<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Slicer_8cc" kind="file" language="C++">
    <compoundname>Slicer.cc</compoundname>
    <includes refid="Slicer_8h" local="yes">Slicer.h</includes>
    <includes refid="Slice_8h" local="yes">Slice.h</includes>
    <includes refid="ArrayError_8h" local="yes">ArrayError.h</includes>
    <includes local="no">istream</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="2">
        <label>Slicer.h</label>
        <link refid="Slicer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Slice.h</label>
        <link refid="Slice_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="13">
        <label>ArrayError.h</label>
        <link refid="ArrayError_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/types.h</label>
      </node>
      <node id="3">
        <label>IPosition.h</label>
        <link refid="IPosition_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>unistd.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="17">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>casa/Arrays/Slicer.cc</label>
        <link refid="Slicer_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>ArrayFwd.h</label>
        <link refid="ArrayFwd_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="16">
        <label>istream</label>
      </node>
      <node id="8">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#<sp/>Slicer.cc:<sp/>Class<sp/>to<sp/>specify<sp/>which<sp/>elements<sp/>to<sp/>extract<sp/>from<sp/>an<sp/>n-dimensional<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Copyright<sp/>(C)<sp/>1994,1995,1999</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Slicer_8h" kindref="compound">Slicer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Slice_8h" kindref="compound">Slice.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ArrayError_8h" kindref="compound">ArrayError.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;istream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecasacore" kindref="compound">casacore</ref><sp/>{<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="classcasacore_1_1Slicer_1ac42f9a8c2f4e59f7bea70eb8291edacd" kindref="member">Slicer::Slicer</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">:<sp/>asEnd_p<sp/>(endIsLength),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>start_p<sp/>(1,MimicSource),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(1,MimicSource),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>stride_p(1,1),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(1,MimicSource),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>fixed_p<sp/>(false)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">Slicer::Slicer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>bl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>tr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>in,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>LengthOrLast<sp/>lol)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">:<sp/>asEnd_p<sp/>(lol),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>start_p<sp/>(bl),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(tr),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>stride_p(in),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(tr)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>fillEndLen();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">Slicer::Slicer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>bl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>tr,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>LengthOrLast<sp/>lol)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">:<sp/>asEnd_p<sp/>(lol),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>start_p<sp/>(bl),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(tr),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>stride_p(bl.<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>(),<sp/>1),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(tr)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>fillEndLen();</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">Slicer::Slicer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>bl)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">:<sp/>asEnd_p<sp/>(endIsLength),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>start_p<sp/>(bl),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(bl),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>stride_p(bl.<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>(),<sp/>1),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(bl.<ref refid="namespacecasacore_1a2540af98959c2053f8d6f39c6f1a3972" kindref="member">nelements</ref>(),<sp/>1)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>fillFixed();</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">Slicer::Slicer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>z,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>LengthOrLast<sp/>lol)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">:<sp/>asEnd_p<sp/>(lol),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>start_p<sp/>(3,<sp/>MimicSource),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(3,<sp/>MimicSource),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>stride_p(3,<sp/>1),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(3,<sp/>MimicSource)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>fillSlice<sp/>(x,<sp/>start_p(0),<sp/>len_p(0),<sp/>stride_p(0));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>fillSlice<sp/>(y,<sp/>start_p(1),<sp/>len_p(1),<sp/>stride_p(1));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>fillSlice<sp/>(z,<sp/>start_p(2),<sp/>len_p(2),<sp/>stride_p(2));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>fillEndLen();</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">Slicer::Slicer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>y,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>LengthOrLast<sp/>lol)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">:<sp/>asEnd_p<sp/>(lol),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>start_p<sp/>(2,<sp/>MimicSource),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(2,<sp/>MimicSource),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>stride_p(2,<sp/>1),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(2,<sp/>MimicSource)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>fillSlice<sp/>(x,<sp/>start_p(0),<sp/>len_p(0),<sp/>stride_p(0));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>fillSlice<sp/>(y,<sp/>start_p(1),<sp/>len_p(1),<sp/>stride_p(1));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>fillEndLen();</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">Slicer::Slicer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>x,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>LengthOrLast<sp/>lol)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">:<sp/>asEnd_p<sp/>(lol),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>start_p<sp/>(1,<sp/>MimicSource),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>end_p<sp/><sp/><sp/>(1,<sp/>MimicSource),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>stride_p(1,<sp/>1),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>len_p<sp/><sp/><sp/>(1,<sp/>MimicSource)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>fillSlice<sp/>(x,<sp/>start_p(0),<sp/>len_p(0),<sp/>stride_p(0));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>fillEndLen();</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecasacore_1abe8be169cb5d6e9c54c8c0fff301fa67" kindref="member">Slicer::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slicer&amp;<sp/>that)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;len_p.isEqual(that.len_p)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;start_p.isEqual(that.start_p)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;end_p.isEqual(that.end_p)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;stride_p.isEqual(that.stride_p)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;asEnd_p==that.asEnd_p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;fixed_p==that.fixed_p;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Slicer::fillEndLen()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>First<sp/>check<sp/>if<sp/>all<sp/>positions<sp/>have<sp/>same<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_p.nelements()<sp/>!=<sp/>end_p.nelements()</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/><sp/>start_p.nelements()<sp/>!=<sp/>stride_p.nelements())<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;IPosition-lengths<sp/>differ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Reversed<sp/>strides<sp/>are<sp/>not<sp/>allowed<sp/>yet<sp/>(thus<sp/>stride&gt;0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;start_p.nelements();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stride_p(i)<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;stride&lt;=0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asEnd_p<sp/>==<sp/>endIsLast)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>End<sp/>is<sp/>given;<sp/>check<sp/>if<sp/>start&lt;=end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Fill<sp/>in<sp/>length<sp/>of<sp/>result<sp/>if<sp/>start<sp/>and<sp/>end<sp/>are<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>len_p(i)<sp/>=<sp/>MimicSource;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_p(i)<sp/>&gt;=<sp/>0<sp/><sp/>&amp;&amp;<sp/><sp/>end_p(i)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len_p(i)<sp/>=<sp/>end_p(i)<sp/>-<sp/>start_p(i);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>input-length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len_p(i)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;end&lt;start&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len_p(i)<sp/>=<sp/>1<sp/>+<sp/>len_p(i)<sp/>/<sp/>stride_p(i);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result-length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Length<sp/>is<sp/>given;<sp/>check<sp/>if<sp/>&gt;=<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Fill<sp/>in<sp/>end<sp/>if<sp/>start<sp/>and<sp/>length<sp/>are<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>end_p(i)<sp/>=<sp/>MimicSource;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len_p(i)<sp/>!=<sp/>MimicSource)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len_p(i)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;length&lt;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_p(i)<sp/>=<sp/>start_p(i)<sp/>+<sp/>(len_p(i)<sp/>-<sp/>1)<sp/>*<sp/>stride_p(i);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Set<sp/>the<sp/>fixed_p<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>fillFixed();</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Slicer::fillFixed()</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>fixed_p<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;start_p.nelements();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_p(i)<sp/>&lt;<sp/>0<sp/><sp/>||<sp/><sp/>end_p(i)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fixed_p<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Slicer::fillSlice<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>sl,<sp/>ssize_t&amp;<sp/>start,<sp/>ssize_t&amp;<sp/>len,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t&amp;<sp/>stride)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Initialized<sp/>values<sp/>will<sp/>do<sp/>in<sp/>case<sp/>an<sp/>&quot;entire&quot;<sp/>slice<sp/>is<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sl.all())<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>start<sp/><sp/>=<sp/>sl.start();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>len<sp/><sp/><sp/><sp/>=<sp/>sl.length();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>stride<sp/>=<sp/>sl.inc();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">IPosition<sp/>Slicer::inferShapeFromSource<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IPosition&amp;<sp/>shp,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition&amp;<sp/>start,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition&amp;<sp/>end,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition&amp;<sp/>stride)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="193"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Check<sp/>if<sp/>length<sp/>of<sp/>shape<sp/>conforms<sp/>the<sp/>Slicer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shp.nelements()<sp/>!=<sp/>start_p.nelements())<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Shape<sp/>IPosition-lengths<sp/>differ<sp/>from<sp/>ndim()&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Resize<sp/>the<sp/>output<sp/>IPositions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#<sp/>Initialize<sp/>them,<sp/>so<sp/>they<sp/>will<sp/>do<sp/>for<sp/>unspecified<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>start.resize<sp/>(start_p.nelements());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>end.resize<sp/>(start_p.nelements());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>stride.resize<sp/>(start_p.nelements());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/><sp/><sp/><sp/>=<sp/>shp<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>stride<sp/>=<sp/>stride_p;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>IPosition<sp/>res(start_p.nelements(),<sp/>0);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;start_p.nelements();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#<sp/>Fill<sp/>and<sp/>check<sp/>start<sp/>value;<sp/>unspecified<sp/>means<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_p(i)<sp/>!=<sp/>MimicSource)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start(i)<sp/>=<sp/>start_p(i);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start(i)<sp/>&lt;<sp/>0)<sp/>start(i)<sp/>+=<sp/>shp(i);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start(i)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;infer:<sp/>startResult&lt;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start(i)<sp/>&gt;=<sp/>shp(i))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;infer:<sp/>startResult&gt;=shape&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#<sp/>Fill<sp/>end<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#<sp/>If<sp/>given<sp/>as<sp/>end,<sp/>unspecified<sp/>is<sp/>end<sp/>of<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#<sp/>If<sp/>given<sp/>as<sp/>length,<sp/>unspecified<sp/>is<sp/>also<sp/>end<sp/>of<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asEnd_p<sp/>==<sp/>endIsLast)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_p(i)<sp/>!=<sp/>MimicSource)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end(i)<sp/>=<sp/>end_p(i);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end(i)<sp/>&lt;<sp/>0)<sp/>end(i)<sp/>+=<sp/>shp(i);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len_p(i)<sp/>!=<sp/>MimicSource)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>end(i)<sp/>=<sp/>start(i)<sp/>+<sp/>len_p(i)<sp/>*<sp/>stride_p(i)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#<sp/>Get<sp/>resulting<sp/>shape<sp/>and<sp/>adjust<sp/>and<sp/>check<sp/>end<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#<sp/>Length<sp/>0<sp/>is<sp/>handled<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end(i)<sp/>&lt;<sp/>start(i))<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end(i)<sp/>&lt;<sp/>start(i)<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;infer:<sp/>endResult&lt;startResult-1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res(i)<sp/>=<sp/>1<sp/>+<sp/>(end(i)<sp/>-<sp/>start(i))<sp/>/<sp/>stride(i);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end(i)<sp/>=<sp/>start(i)<sp/>+<sp/>(res(i)<sp/>-<sp/>1)<sp/>*<sp/>stride(i);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end(i)<sp/>&gt;=<sp/>shp(i))<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(ArraySlicerError<sp/>(</highlight><highlight class="stringliteral">&quot;infer:<sp/>endResult&gt;=shape&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">std::ostream<sp/><sp/>&amp;<ref refid="namespacecasacore_1abe18b96402c77c1c1e764c7070808ad9" kindref="member">operator &lt;&lt; </ref>(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slicer<sp/>&amp;slicer)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>stream<sp/>&lt;&lt;<sp/>slicer.start<sp/>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>slicer.end<sp/>()<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>stride<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>slicer.stride<sp/>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>length<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>slicer.length<sp/>();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">std::string<sp/><ref refid="namespacecasacore_1acc0e323a3120bc4c60ba7f3bf0fe2cc6" kindref="member">to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slicer&amp;<sp/>slicer)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>str;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>str<sp/>&lt;&lt;<sp/>slicer;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.str();</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="casa/Arrays/Slicer.cc"/>
  </compounddef>
</doxygen>
