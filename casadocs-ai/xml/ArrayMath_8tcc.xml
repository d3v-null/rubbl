<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ArrayMath_8tcc" kind="file" language="C++">
    <compoundname>ArrayMath.tcc</compoundname>
    <includedby refid="ArrayMath_8h" local="yes">casa/Arrays/ArrayMath.h</includedby>
    <invincdepgraph>
      <node id="18">
        <label>tables/TaQL/ExprMathNodeArray.cc</label>
        <link refid="ExprMathNodeArray_8cc"/>
      </node>
      <node id="1">
        <label>casa/Arrays/ArrayMath.tcc</label>
        <link refid="ArrayMath_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>tables/TaQL/ExprLogicNodeArray.cc</label>
        <link refid="ExprLogicNodeArray_8cc"/>
      </node>
      <node id="25">
        <label>casa/Quanta/MVBaseline.cc</label>
        <link refid="MVBaseline_8cc"/>
      </node>
      <node id="3">
        <label>casa/Arrays/Array2Math.cc</label>
        <link refid="Array2Math_8cc"/>
      </node>
      <node id="26">
        <label>casa/Quanta/MVDirection.cc</label>
        <link refid="MVDirection_8cc"/>
      </node>
      <node id="7">
        <label>casa/Arrays/ArrayPartMath.h</label>
        <link refid="ArrayPartMath_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>casa/Arrays.h</label>
        <link refid="Arrays_8h"/>
      </node>
      <node id="13">
        <label>tables/TaQL/ExprGroupAggrFuncArray.cc</label>
        <link refid="ExprGroupAggrFuncArray_8cc"/>
      </node>
      <node id="20">
        <label>casa/Containers/Record2Interface.cc</label>
        <link refid="Record2Interface_8cc"/>
      </node>
      <node id="40">
        <label>tables/TaQL/ExprDerNodeArray.cc</label>
        <link refid="ExprDerNodeArray_8cc"/>
      </node>
      <node id="15">
        <label>tables/TaQL/ExprNodeArray.cc</label>
        <link refid="ExprNodeArray_8cc"/>
      </node>
      <node id="27">
        <label>casa/Quanta/MVEarthMagnetic.cc</label>
        <link refid="MVEarthMagnetic_8cc"/>
      </node>
      <node id="36">
        <label>tables/Tables/RowNumbers.cc</label>
        <link refid="RowNumbers_8cc"/>
      </node>
      <node id="31">
        <label>tables/DataMan/VirtualTaQLColumn.cc</label>
        <link refid="VirtualTaQLColumn_8cc"/>
      </node>
      <node id="44">
        <label>tables/TaQL/TableExprData.cc</label>
        <link refid="TableExprData_8cc"/>
      </node>
      <node id="17">
        <label>tables/TaQL/MArrayMath.h</label>
        <link refid="MArrayMath_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>casa/Arrays/Array_tmpl.cc</label>
        <link refid="Array__tmpl_8cc"/>
      </node>
      <node id="11">
        <label>tables/TaQL/ExprFuncNode.cc</label>
        <link refid="ExprFuncNode_8cc"/>
      </node>
      <node id="8">
        <label>casa/Arrays/ArrayPartMath.cc</label>
        <link refid="ArrayPartMath_8cc"/>
      </node>
      <node id="39">
        <label>tables/Tables/TableProxy.cc</label>
        <link refid="TableProxy_8cc"/>
      </node>
      <node id="29">
        <label>casa/Quanta/MVuvw.cc</label>
        <link refid="MVuvw_8cc"/>
      </node>
      <node id="12">
        <label>tables/TaQL/ExprFuncNodeArray.cc</label>
        <link refid="ExprFuncNodeArray_8cc"/>
      </node>
      <node id="30">
        <label>casa/Quanta/QMath2.cc</label>
        <link refid="QMath2_8cc"/>
      </node>
      <node id="21">
        <label>casa/Containers/ValueHolder.cc</label>
        <link refid="ValueHolder_8cc"/>
      </node>
      <node id="2">
        <label>casa/Arrays/ArrayMath.h</label>
        <link refid="ArrayMath_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>casa/Arrays/ArrayOpsDiffShapes.cc</label>
        <link refid="ArrayOpsDiffShapes_8cc"/>
      </node>
      <node id="45">
        <label>tables/TaQL/TableParseQuery.cc</label>
        <link refid="TableParseQuery_8cc"/>
      </node>
      <node id="43">
        <label>tables/TaQL/MArrayBase.cc</label>
        <link refid="MArrayBase_8cc"/>
      </node>
      <node id="16">
        <label>tables/TaQL/ExprNodeRep.cc</label>
        <link refid="ExprNodeRep_8cc"/>
      </node>
      <node id="34">
        <label>tables/Tables/ColumnsIndexArray.cc</label>
        <link refid="ColumnsIndexArray_8cc"/>
      </node>
      <node id="41">
        <label>tables/TaQL/ExprNodeRecord.cc</label>
        <link refid="ExprNodeRecord_8cc"/>
      </node>
      <node id="33">
        <label>tables/Tables/ColumnsIndex.cc</label>
        <link refid="ColumnsIndex_8cc"/>
      </node>
      <node id="38">
        <label>tables/Tables/TableIndexProxy.cc</label>
        <link refid="TableIndexProxy_8cc"/>
      </node>
      <node id="6">
        <label>casa/Arrays/ArrayOpsDiffShapes.h</label>
        <link refid="ArrayOpsDiffShapes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>casa/Quanta/Euler.cc</label>
        <link refid="Euler_8cc"/>
      </node>
      <node id="19">
        <label>casa/Arrays/Matrix2Math.cc</label>
        <link refid="Matrix2Math_8cc"/>
      </node>
      <node id="22">
        <label>casa/Containers/ValueHolderRep.cc</label>
        <link refid="ValueHolderRep_8cc"/>
      </node>
      <node id="32">
        <label>tables/Tables/BaseTable.cc</label>
        <link refid="BaseTable_8cc"/>
      </node>
      <node id="23">
        <label>casa/OS/Directory.cc</label>
        <link refid="Directory_8cc"/>
      </node>
      <node id="42">
        <label>tables/TaQL/ExprUnitNode.cc</label>
        <link refid="ExprUnitNode_8cc"/>
      </node>
      <node id="28">
        <label>casa/Quanta/MVPosition.cc</label>
        <link refid="MVPosition_8cc"/>
      </node>
      <node id="37">
        <label>tables/Tables/Table.cc</label>
        <link refid="Table_8cc"/>
      </node>
      <node id="35">
        <label>tables/Tables/RefTable.cc</label>
        <link refid="RefTable_8cc"/>
      </node>
      <node id="10">
        <label>tables/TaQL/MArrayLogical.h</label>
        <link refid="MArrayLogical_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>ArrayMath.cc:<sp/>Arithmetic<sp/>functions<sp/>defined<sp/>on<sp/>Arrays</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1993,1994,1995,1996,1997,1998,1999,2001,2003</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CASA_ARRAYMATH_2_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CASA_ARRAYMATH_2_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayMath.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Array.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayIter.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayUtil.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;VectorIter.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ArrayError.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ElementFunctions.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cassert&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cmath&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;functional&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>L,<sp/>typename<sp/>R,<sp/>typename<sp/>RES,<sp/>typename<sp/>BinaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>arrayTransform<sp/>(const<sp/>Array&lt;L&gt;&amp;<sp/>left,<sp/>const<sp/>Array&lt;R&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;RES&gt;&amp;<sp/>result,<sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(result.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>result,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(left.contiguousStorage()<sp/><sp/>&amp;&amp;<sp/><sp/>right.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::transform<sp/>(left.cbegin(),<sp/>left.cend(),<sp/>right.cbegin(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.begin(),<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::transform<sp/>(left.begin(),<sp/>left.end(),<sp/>right.begin(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.begin(),<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>L,<sp/>typename<sp/>R,<sp/>typename<sp/>RES,<sp/>typename<sp/>BinaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>arrayTransform<sp/>(const<sp/>Array&lt;L&gt;&amp;<sp/>left,<sp/>R<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;RES&gt;&amp;<sp/>result,<sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(result.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>result,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(left.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myrtransform<sp/>(left.cbegin(),<sp/>left.cend(),<sp/>result.begin(),<sp/>right,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myrtransform<sp/>(left.begin(),<sp/>left.end(),<sp/>result.begin(),<sp/>right,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>L,<sp/>typename<sp/>R,<sp/>typename<sp/>RES,<sp/>typename<sp/>BinaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>arrayTransform<sp/>(L<sp/>left,<sp/>const<sp/>Array&lt;R&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;RES&gt;&amp;<sp/>result,<sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(result.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>result,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(right.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myltransform<sp/>(right.cbegin(),<sp/>right.cend(),<sp/>result.begin(),<sp/>left,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myltransform<sp/>(right.begin(),<sp/>right.end(),<sp/>result.begin(),<sp/>left,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>RES,<sp/>typename<sp/>UnaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>arrayTransform<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>arr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;RES&gt;&amp;<sp/>result,<sp/>UnaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(result.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayContTransform<sp/>(arr,<sp/>result,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(arr.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::transform<sp/>(arr.cbegin(),<sp/>arr.cend(),<sp/>result.begin(),<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::transform<sp/>(arr.begin(),<sp/>arr.end(),<sp/>result.begin(),<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>BinaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>arrayTransformResult<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;T&gt;<sp/>res(left.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>res,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>BinaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>arrayTransformResult<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>left,<sp/>T<sp/>right,<sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;T&gt;<sp/>res(left.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>res,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>BinaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>arrayTransformResult<sp/>(T<sp/>left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right,<sp/>BinaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;T&gt;<sp/>res(right.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>res,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>UnaryOperator&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>arrayTransformResult<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>UnaryOperator<sp/>op)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;T&gt;<sp/>res(arr.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(arr,<sp/>res,<sp/>op);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>minMax(T<sp/>&amp;minVal,<sp/>T<sp/>&amp;maxVal,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IPosition<sp/>&amp;minPos,<sp/>IPosition<sp/>&amp;maxPos,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>n<sp/>=<sp/>array.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;void<sp/>minMax(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,<sp/>IPosition<sp/>&amp;minPos,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IPosition<sp/>&amp;maxPos,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array)<sp/>-<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Array<sp/>has<sp/>no<sp/>elements&quot;));<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>minp<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>maxp<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>minv<sp/>=<sp/>array.data()[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>maxv<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(array.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_contiter<sp/>iter<sp/>=<sp/>array.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;n;<sp/>++i,<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(*iter<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>iter<sp/>=<sp/>array.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;n;<sp/>++i,<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(*iter<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minPos.resize<sp/>(array.ndim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxPos.resize<sp/>(array.ndim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minPos<sp/>=<sp/>toIPositionInArray<sp/>(minp,<sp/>array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxPos<sp/>=<sp/>toIPositionInArray<sp/>(maxp,<sp/>array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minVal<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxVal<sp/>=<sp/>maxv;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>minMaxMasked(T<sp/>&amp;minVal,<sp/>T<sp/>&amp;maxVal,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition<sp/>&amp;minPos,<sp/>IPosition<sp/>&amp;maxPos,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;weight)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>n<sp/>=<sp/>array.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;void<sp/>minMax(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,<sp/>IPosition<sp/>&amp;minPos,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IPosition<sp/>&amp;maxPos,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array)<sp/>-<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;T&gt;<sp/>&amp;weight)<sp/>-<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Array<sp/>has<sp/>no<sp/>elements&quot;));<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/>array.shape().isEqual<sp/>(weight.shape()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayConformanceError(&quot;void<sp/>minMaxMasked(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IPosition<sp/>&amp;minPos,<sp/>IPosition<sp/>&amp;maxPos,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;T&gt;<sp/>&amp;weight)<sp/>-<sp/>array<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;and<sp/>weight<sp/>do<sp/>not<sp/>have<sp/>the<sp/>same<sp/>shape()&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>minp<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>maxp<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>minv<sp/>=<sp/>array.data()[0]<sp/>*<sp/>weight.data()[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>maxv<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(array.contiguousStorage()<sp/><sp/>&amp;&amp;<sp/><sp/>weight.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_contiter<sp/>iter<sp/>=<sp/>array.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_contiter<sp/>witer<sp/>=<sp/>weight.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;n;<sp/>++i,<sp/>++iter,<sp/>++witer)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>tmp<sp/>=<sp/>*iter<sp/>*<sp/>*witer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tmp<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(tmp<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>iter<sp/>=<sp/>array.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>witer<sp/>=<sp/>weight.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;n;<sp/>++i,<sp/>++iter,<sp/>++witer)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>tmp<sp/>=<sp/>*iter<sp/>*<sp/>*witer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tmp<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(tmp<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minPos.resize<sp/>(array.ndim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxPos.resize<sp/>(array.ndim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minPos<sp/>=<sp/>toIPositionInArray<sp/>(minp,<sp/>array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxPos<sp/>=<sp/>toIPositionInArray<sp/>(maxp,<sp/>array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minVal<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxVal<sp/>=<sp/>maxv;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;item&gt;<sp/>AipsError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>minMax(T<sp/>&amp;minVal,<sp/>T<sp/>&amp;maxVal,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IPosition<sp/>&amp;minPos,<sp/>IPosition<sp/>&amp;maxPos,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>const<sp/>Array&lt;bool&gt;<sp/>&amp;mask,<sp/>bool<sp/>valid)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>n<sp/>=<sp/>array.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;void<sp/>minMax(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,<sp/>IPosition<sp/>&amp;minPos,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IPosition<sp/>&amp;maxPos,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;bool&gt;<sp/>&amp;mask)<sp/>-<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Array<sp/>has<sp/>no<sp/>elements&quot;));<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/>array.shape().isEqual<sp/>(mask.shape()))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayConformanceError(&quot;void<sp/>minMax(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IPosition<sp/>&amp;minPos,<sp/>IPosition<sp/>&amp;maxPos,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;bool&gt;<sp/>&amp;mask)<sp/>-<sp/>&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;array<sp/>and<sp/>mask<sp/>do<sp/>not<sp/>have<sp/>the<sp/>same<sp/>shape()&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>minp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>maxp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>minv<sp/>=<sp/>T();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>maxv<sp/>=<sp/>T();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(array.contiguousStorage()<sp/><sp/>&amp;&amp;<sp/><sp/>mask.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_contiter<sp/>iter<sp/>=<sp/>array.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;bool&gt;::const_contiter<sp/>miter<sp/>=<sp/>mask.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>i=0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>i&lt;n;<sp/>++i,<sp/>++iter,<sp/>++miter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*miter<sp/>==<sp/>valid)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>i&lt;n;<sp/>++i,<sp/>++iter,<sp/>++miter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*miter<sp/>==<sp/>valid)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(*iter<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>iter<sp/>=<sp/>array.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;bool&gt;::const_iterator<sp/>miter<sp/>=<sp/>mask.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>i=0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>i&lt;n;<sp/>++i,<sp/>++iter,<sp/>++miter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*miter<sp/>==<sp/>valid)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>i&lt;n;<sp/>++i,<sp/>++iter,<sp/>++miter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*miter<sp/>==<sp/>valid)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(*iter<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(minp<sp/>==n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(std::runtime_error(&quot;void<sp/>minMax(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IPosition<sp/>&amp;minPos,<sp/>IPosition<sp/>&amp;maxPos,&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;T&gt;<sp/>&amp;array,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;bool&gt;<sp/>&amp;mask)<sp/>-<sp/>no<sp/>valid<sp/>array<sp/>elements&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minPos.resize<sp/>(array.ndim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxPos.resize<sp/>(array.ndim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minPos<sp/>=<sp/>toIPositionInArray<sp/>(minp,<sp/>array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxPos<sp/>=<sp/>toIPositionInArray<sp/>(maxp,<sp/>array.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>minVal<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>maxVal<sp/>=<sp/>maxv;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator+=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>other,<sp/>&quot;+=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>std::plus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/><sp/>T<sp/>min(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>T<sp/>Min,<sp/>Max;<sp/>minMax(Min,<sp/>Max,<sp/>a);<sp/>return<sp/>Min;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/><sp/>T<sp/>max(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>T<sp/>Min,<sp/>Max;<sp/>minMax(Min,<sp/>Max,<sp/>a);<sp/>return<sp/>Max;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator+=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>std::plus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator-=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>other,<sp/>&quot;-=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>std::minus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator-=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>std::minus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator%=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>other,<sp/>&quot;%=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>std::modulus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator%=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>std::modulus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator&amp;=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>other,<sp/>&quot;&amp;=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a&amp;b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator&amp;=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a&amp;b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator|=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>other,<sp/>&quot;|=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a|b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator|=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a|b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator^=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>other,<sp/>&quot;^=&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a^b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>operator^=<sp/>(Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;other)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransformInPlace<sp/>(left,<sp/>other,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a^b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>operator+(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>a.copy();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>operator-(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>std::negate&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>operator~(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>val)<sp/>{<sp/>return<sp/>~val;<sp/>});<sp/>//<sp/>bit_not<sp/>would<sp/>be<sp/>nicer,<sp/>but<sp/>is<sp/>C++14</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator+(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;+&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::plus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator-(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;-&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::minus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator/(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;/&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::divides&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator%(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;%&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::modulus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator&amp;(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;%&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a&amp;b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator|(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;%&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a|b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Array&lt;T&gt;<sp/>operator^(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;%&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a^b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator+<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::plus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator-<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::minus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator/<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::divides&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator%<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::modulus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator&amp;<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a&amp;b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator|<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a|b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator^<sp/>(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a^b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator+<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::plus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator-<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::minus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator/<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::divides&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator%<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>std::modulus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator&amp;<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a&amp;b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator|<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a|b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>operator^<sp/>(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(left,<sp/>right,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>a^b;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>minMax(T<sp/>&amp;minVal,<sp/>T<sp/>&amp;maxVal,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(array.nelements()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;void<sp/>minMax(T<sp/>&amp;min,<sp/>T<sp/>&amp;max,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;array)<sp/>-<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Array<sp/>has<sp/>no<sp/>elements&quot;));<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(array.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>minimal<sp/>scope<sp/>as<sp/>some<sp/>compilers<sp/>may<sp/>spill<sp/>onto<sp/>stack<sp/>otherwise</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>minv<sp/>=<sp/>array.data()[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxv<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_contiter<sp/>iterEnd<sp/>=<sp/>array.cend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::const_contiter<sp/>iter<sp/>=<sp/>array.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter!=iterEnd;<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>no<sp/>else<sp/>allows<sp/>compiler<sp/>to<sp/>use<sp/>branchless<sp/>instructions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>maxVal<sp/>=<sp/>maxv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>minVal<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>minv<sp/>=<sp/>array.data()[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxv<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>iterEnd<sp/>=<sp/>array.end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::const_iterator<sp/>iter<sp/>=<sp/>array.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter!=iterEnd;<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*iter<sp/>&gt;<sp/>maxv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>*iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>maxVal<sp/>=<sp/>maxv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>minVal<sp/>=<sp/>minv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>max(Array&lt;T&gt;<sp/>&amp;result,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>b,<sp/>&quot;max&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>result,<sp/>&quot;max&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransform<sp/>(a,<sp/>b,<sp/>result,<sp/>[](T<sp/>l,<sp/>T<sp/>r){<sp/>return<sp/>std::max&lt;T&gt;(l,<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>min(Array&lt;T&gt;<sp/>&amp;result,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>b,<sp/>&quot;min&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>result,<sp/>&quot;min&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransform<sp/>(a,<sp/>b,<sp/>result,<sp/>[](T<sp/>l,<sp/>T<sp/>r){<sp/>return<sp/>std::min&lt;T&gt;(l,<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>max(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>result(a.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>max(result,<sp/>a,<sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>min(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>result(a.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>min(result,<sp/>a,<sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>max(Array&lt;T&gt;<sp/>&amp;result,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>result,<sp/>&quot;max&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransform<sp/>(a,<sp/>b,<sp/>result,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>std::max&lt;T&gt;(a,<sp/>b);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>void<sp/>min(Array&lt;T&gt;<sp/>&amp;result,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>result,<sp/>&quot;min&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayTransform<sp/>(a,<sp/>b,<sp/>result,<sp/>[](T<sp/>a,<sp/>T<sp/>b){<sp/>return<sp/>std::min&lt;T&gt;(a,<sp/>b);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>max(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>result(a.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>max(result,<sp/>a,<sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>min(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>result(a.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>min(result,<sp/>a,<sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>indgen(Array&lt;T&gt;<sp/>&amp;a,<sp/>T<sp/>start,<sp/>T<sp/>inc)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(a.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::contiter<sp/>aend<sp/>=<sp/>a.cend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::contiter<sp/>iter=a.cbegin();<sp/>iter!=aend;<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>start;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>inc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::iterator<sp/>aend<sp/>=<sp/>a.end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::iterator<sp/>iter=a.begin();<sp/>iter!=aend;<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>start;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>inc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>cos(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::cos(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>cosh(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::cosh(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>exp(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::exp(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>log(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::log(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>log10(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::log10(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>sin(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::sin(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>sinh(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>v){<sp/>return<sp/>std::sinh(v);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>sqrt(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>a){<sp/>return<sp/>std::sqrt(a);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>square(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>a){<sp/>return<sp/>a*a;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>cube(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>a){<sp/>return<sp/>a*a*a;<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>acos(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>a){<sp/>return<sp/>std::acos(a);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>asin(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>a){<sp/>return<sp/>std::asin(a);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>atan(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>a){<sp/>return<sp/>std::atan(a);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>ceil(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>val)<sp/>{<sp/>return<sp/>std::ceil(val);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>fabs(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>t){<sp/>return<sp/>std::abs(t);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>abs(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>t){<sp/>return<sp/>std::abs(t);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>floor(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>t){<sp/>return<sp/>std::floor(t);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>round(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>t){<sp/>return<sp/>std::round(t);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>sign(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>value)<sp/>{<sp/>return<sp/>(value&lt;0<sp/>?<sp/>-1<sp/>:<sp/>(value&gt;0<sp/>?<sp/>1:0));});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>tan(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>t){<sp/>return<sp/>std::tan(t);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>tanh(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>[](T<sp/>t){<sp/>return<sp/>std::tanh(t);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>pow(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>b,<sp/>&quot;pow&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::pow(l,<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>pow(const<sp/>T<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::pow(l,<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>pow(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::pow(l,<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;std::complex&lt;T&gt;&gt;<sp/>pow(const<sp/>Array&lt;std::complex&lt;T&gt;&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;std::complex&lt;T&gt;&gt;<sp/>result(a.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrayContTransform<sp/>(a,<sp/>b,<sp/>result,<sp/>[](std::complex&lt;T&gt;<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::pow(l,<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>atan2(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>b,<sp/>&quot;atan2&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::atan2(l,r);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>atan2(const<sp/>T<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::atan2(l,r);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>atan2(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::atan2(l,r);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>fmod(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>b,<sp/>&quot;fmod&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::fmod(l,r);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>fmod(const<sp/>T<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::fmod(l,r);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>fmod(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>[](T<sp/>l,<sp/>T<sp/>r)<sp/>{<sp/>return<sp/>std::fmod(l,r);});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayConformanceError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>floormod(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkArrayShapes<sp/>(a,<sp/>b,<sp/>&quot;floormod&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>static_cast&lt;T<sp/>(*)(T,T)&gt;(arrays_internal::floormod));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>floormod(const<sp/>T<sp/>&amp;a,<sp/>const<sp/>Array&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>static_cast&lt;T<sp/>(*)(T,T)&gt;(arrays_internal::floormod));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>Array&lt;T&gt;<sp/>floormod(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>const<sp/>T<sp/>&amp;b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arrayTransformResult<sp/>(a,<sp/>b,<sp/>static_cast&lt;T<sp/>(*)(T,T)&gt;(arrays_internal::floormod));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>sum(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>a.contiguousStorage()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::accumulate(a.cbegin(),<sp/>a.cend(),<sp/>T(),<sp/>std::plus&lt;T&gt;())<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::accumulate(a.begin(),<sp/><sp/>a.end(),<sp/><sp/>T(),<sp/>std::plus&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>sumsqr(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>sumsqr<sp/>=<sp/>[](T<sp/>left,<sp/>T<sp/>right)<sp/>{<sp/>return<sp/>left<sp/>+<sp/>right*right;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>a.contiguousStorage()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::accumulate(a.cbegin(),<sp/>a.cend(),<sp/>T(),<sp/>sumsqr)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::accumulate(a.begin(),<sp/><sp/>a.end(),<sp/><sp/>T(),<sp/>sumsqr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>product(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(a.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>T();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Get<sp/>first<sp/>element,<sp/>because<sp/>T(1)<sp/>may<sp/>not<sp/>work<sp/>for<sp/>all<sp/>types.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>prod<sp/>=<sp/>*a.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(a.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_contiter<sp/>iter(a.cbegin());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::accumulate(iter,<sp/>a.cend(),<sp/>prod,<sp/>std::multiplies&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>iter(a.begin());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::accumulate(iter,<sp/>a.end(),<sp/><sp/>prod,<sp/>std::multiplies&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>mean(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw(ArrayError(&quot;::mean(const<sp/>Array&lt;T&gt;<sp/>&amp;)<sp/>-<sp/>0<sp/>element<sp/>array&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>T(sum(a)/T(1.0*a.nelements()));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Similar<sp/>to<sp/>numpy<sp/>the<sp/>ddof<sp/>argument<sp/>can<sp/>be<sp/>used<sp/>to<sp/>get<sp/>the<sp/>population</highlight></codeline>
<codeline><highlight class="normal">//<sp/>variance<sp/>(ddof=0)<sp/>or<sp/>the<sp/>sample<sp/>variance<sp/>(ddof=1).</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>pvariance(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>T<sp/>mean,<sp/>size_t<sp/>ddof)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(a.nelements()<sp/>&lt;<sp/>ddof+1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;::variance(const<sp/>Array&lt;T&gt;<sp/>&amp;)<sp/>-<sp/>Need<sp/>at<sp/>least<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(ddof+1)<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>elements&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>sum<sp/>=<sp/>a.contiguousStorage()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::accumulate(a.cbegin(),<sp/>a.cend(),<sp/>T(),<sp/>arrays_internal::SumSqrDiff&lt;T&gt;(mean))<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::accumulate(a.begin(),<sp/><sp/>a.end(),<sp/><sp/>T(),<sp/>arrays_internal::SumSqrDiff&lt;T&gt;(mean));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>T(sum/T(1.0*a.nelements()<sp/>-<sp/>ddof));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>variance(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>T<sp/>mean)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>pvariance<sp/>(a,<sp/>mean,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>pvariance(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>size_t<sp/>ddof)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>pvariance(a,<sp/>mean(a),<sp/>ddof);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>variance(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>pvariance(a,<sp/>mean(a),<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>pstddev(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>T<sp/>mean,<sp/>size_t<sp/>ddof)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(a.nelements()<sp/>&lt;<sp/>ddof+1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;::stddev(const<sp/>Array&lt;T&gt;<sp/>&amp;)<sp/>-<sp/>Need<sp/>at<sp/>least<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(ddof+1)<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>elements&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>std::sqrt(pvariance(a,<sp/>mean,<sp/>ddof));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>stddev(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>T<sp/>mean)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>pstddev<sp/>(a,<sp/>mean,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>pstddev(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>size_t<sp/>ddof)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>pstddev<sp/>(a,<sp/>mean(a),<sp/>ddof);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>stddev(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>pstddev<sp/>(a,<sp/>mean(a),<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>avdev(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a.nelements()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw(ArrayError(&quot;::avdev(const<sp/>Array&lt;T&gt;<sp/>&amp;,)<sp/>-<sp/>Need<sp/>at<sp/>least<sp/>1<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;element&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>avdev(a,<sp/>mean(a));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>avdev(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>T<sp/>mean)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a.nelements()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw(ArrayError(&quot;::avdev(const<sp/>Array&lt;T&gt;<sp/>&amp;,T)<sp/>-<sp/>Need<sp/>at<sp/>least<sp/>1<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;element&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>sumabsdiff<sp/>=<sp/>[mean](T<sp/>left,<sp/>T<sp/>right)<sp/>{<sp/>return<sp/>left<sp/>+<sp/>std::abs(right-mean);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sum<sp/>=<sp/>a.contiguousStorage()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(a.cbegin(),<sp/>a.cend(),<sp/>T(),<sp/>sumabsdiff)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(a.begin(),<sp/><sp/>a.end(),<sp/><sp/>T(),<sp/>sumabsdiff);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>T(sum/T(1.0*a.nelements()));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>rms(const<sp/>Array&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a.nelements()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw(ArrayError(&quot;::rms(const<sp/>Array&lt;T&gt;<sp/>&amp;)<sp/>-<sp/>Need<sp/>at<sp/>least<sp/>1<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;element&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>sumsqr<sp/>=<sp/>[](T<sp/>left,<sp/>T<sp/>right)<sp/>{<sp/>return<sp/>left<sp/>+<sp/>right*right;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>sum<sp/>=<sp/>a.contiguousStorage()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(a.cbegin(),<sp/>a.cend(),<sp/>T(),<sp/>sumsqr)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(a.begin(),<sp/><sp/>a.end(),<sp/><sp/>T(),<sp/>sumsqr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>T(std::sqrt(sum/T(1.0*a.nelements())));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>median(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>std::vector&lt;T&gt;&amp;<sp/>scratch,<sp/>bool<sp/>sorted,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>takeEvenMean,<sp/>bool<sp/>inPlace)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>medval=T();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>nelem<sp/>=<sp/>a.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nelem<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;::median(T*)<sp/>-<sp/>array<sp/>needs<sp/>at<sp/>least<sp/>1<sp/>element&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//#<sp/>Mean<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>taken<sp/>for<sp/>odd<sp/>number<sp/>of<sp/>elements.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nelem%2<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>takeEvenMean<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>A<sp/>copy<sp/>is<sp/>needed<sp/>if<sp/>not<sp/>contiguous<sp/>or<sp/>if<sp/>not<sp/>in<sp/>place.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>T*<sp/>storage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!a.contiguousStorage()<sp/>||<sp/>!inPlace)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>a.tovector(scratch);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>storage<sp/>=<sp/>scratch.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>storage<sp/>=<sp/>a.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T*<sp/>data<sp/>=<sp/>const_cast&lt;T*&gt;(storage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>n2<sp/>=<sp/>(nelem<sp/>-<sp/>1)/2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!sorted)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::nth_element(data,<sp/>data+n2,<sp/>data+nelem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>medval<sp/>=<sp/>data[n2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(takeEvenMean)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::nth_element(data,<sp/>data+n2+1,<sp/>data+nelem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>medval<sp/>=<sp/>T(0.5<sp/>*<sp/>(medval<sp/>+<sp/>data[n2+1]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(takeEvenMean)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>medval<sp/>=<sp/>T(0.5<sp/>*<sp/>(data[n2]<sp/>+<sp/>data[n2+1]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>medval<sp/>=<sp/>data[n2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>medval;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>madfm(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>std::vector&lt;T&gt;&amp;<sp/>scratch,<sp/>bool<sp/>sorted,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>takeEvenMean,<sp/>bool<sp/>inPlace)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>med<sp/>=<sp/>median(a,<sp/>scratch,<sp/>sorted,<sp/>takeEvenMean,<sp/>inPlace);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;T&gt;<sp/>atmp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(inPlace<sp/><sp/>&amp;&amp;<sp/><sp/>a.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>atmp.reference<sp/>(a);<sp/><sp/><sp/>//<sp/>remove<sp/>constness</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>copy<sp/>of<sp/>a<sp/>has<sp/>been<sp/>made<sp/>to<sp/>scratch.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Using<sp/>it<sp/>saves<sp/>computing.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(this<sp/>was<sp/>changed<sp/>for<sp/>array2:<sp/>sharing<sp/>storage<sp/>is<sp/>no<sp/>longer<sp/>possible)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/>scratch.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>atmp.resize(a.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>atmp.assign_conforming<sp/>(Array&lt;T&gt;(a.shape(),<sp/>scratch.data()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T*<sp/>aptr<sp/>=<sp/>atmp.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;atmp.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>aptr[i]<sp/>=<sp/>std::abs(aptr[i]<sp/>-<sp/>med);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>median(atmp,<sp/>scratch,<sp/>false,<sp/>takeEvenMean,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;<sp/>T<sp/>fractile(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>std::vector&lt;T&gt;&amp;<sp/>scratch,<sp/>float<sp/>fraction,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>sorted,<sp/>bool<sp/>inPlace)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(fraction<sp/>&lt;<sp/>0<sp/><sp/>||<sp/><sp/>fraction<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;::fractile(const<sp/>Array&lt;T&gt;&amp;)<sp/>-<sp/>fraction<sp/>&lt;0<sp/>or<sp/>&gt;1<sp/>&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>nelem<sp/>=<sp/>a.nelements();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(nelem<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw(ArrayError(&quot;::fractile(const<sp/>Array&lt;T&gt;&amp;)<sp/>-<sp/>Need<sp/>at<sp/>least<sp/>1<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;elements&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>A<sp/>copy<sp/>is<sp/>needed<sp/>if<sp/>not<sp/>contiguous<sp/>or<sp/>if<sp/>not<sp/>in<sp/>place.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>T*<sp/>storage<sp/>=<sp/>a.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!a.contiguousStorage()<sp/>||<sp/>!inPlace)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>a.tovector(scratch);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>storage<sp/>=<sp/>scratch.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T*<sp/>data<sp/>=<sp/>const_cast&lt;T*&gt;(storage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>n2<sp/>=<sp/>size_t((nelem<sp/>-<sp/>1)<sp/>*<sp/>double(fraction)<sp/>+<sp/>0.01);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!sorted)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::nth_element(data,<sp/>data+n2,<sp/>data+nelem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>data[n2];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&lt;thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>&lt;/item&gt;<sp/>ArrayError</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&lt;/thrown&gt;</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">T<sp/>interFractileRange(const<sp/>Array&lt;T&gt;<sp/>&amp;a,<sp/>std::vector&lt;T&gt;&amp;<sp/>scratch,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>float<sp/>fraction,<sp/>bool<sp/>sorted,<sp/>bool<sp/>inPlace)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!(fraction&gt;0<sp/><sp/>&amp;&amp;<sp/><sp/>fraction&lt;0.5))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;interFractileRange:<sp/>invalid<sp/>parameter&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>hex1,<sp/>hex2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hex1<sp/>=<sp/>fractile(a,<sp/>scratch,<sp/>fraction,<sp/>sorted,<sp/>inPlace);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(inPlace<sp/><sp/>&amp;&amp;<sp/><sp/>a.contiguousStorage())<sp/>{<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>hex2<sp/>=<sp/>fractile(a,<sp/>scratch,<sp/>1-fraction,<sp/>sorted,<sp/>inPlace);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>In<sp/>this<sp/>case<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>has<sp/>been<sp/>made<sp/>to<sp/>scratch.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Using<sp/>it<sp/>saves<sp/>making<sp/>another<sp/>copy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a.size()<sp/>!=<sp/>scratch.size())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;interFractileRange:<sp/>array<sp/>sizes<sp/>don&apos;t<sp/>match&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>atmp(a.shape(),<sp/>scratch.data(),<sp/>SHARE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>hex2<sp/>=<sp/>fractile(atmp,<sp/>scratch,<sp/>1-fraction,<sp/>sorted,<sp/>inPlace);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(hex2<sp/>-<sp/>hex1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>makeComplex(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(left,<sp/>right,<sp/>&quot;makeComplex&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>res(left.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](T<sp/>r,<sp/>T<sp/>i)<sp/>{<sp/>return<sp/>std::complex&lt;T&gt;(r,<sp/>i);});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>makeComplex(const<sp/>T<sp/>&amp;left,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>res(right.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](T<sp/>r,<sp/>T<sp/>i)<sp/>{<sp/>return<sp/>std::complex&lt;T&gt;(r,<sp/>i);});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>makeComplex(const<sp/>Array&lt;T&gt;<sp/>&amp;left,<sp/>const<sp/>T&amp;<sp/>right)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Array&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>res(left.shape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayContTransform<sp/>(left,<sp/>right,<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](T<sp/>r,<sp/>T<sp/>i)<sp/>{<sp/>return<sp/>std::complex&lt;T&gt;(r,<sp/>i);});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>C,<sp/>typename<sp/>R&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setReal(Array&lt;C&gt;<sp/>&amp;carray,<sp/>const<sp/>Array&lt;R&gt;<sp/>&amp;rarray)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(carray,<sp/>rarray,<sp/>&quot;setReal&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Cannot<sp/>be<sp/>done<sp/>in<sp/>place,<sp/>because<sp/>imag<sp/>is<sp/>taken<sp/>from<sp/>second<sp/>operand.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayTransform<sp/>(rarray,<sp/>carray,<sp/>carray,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](R<sp/>l,<sp/>C<sp/>r)-&gt;C<sp/>{<sp/>return<sp/>C(l,<sp/>std::imag(r));<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>C,<sp/>typename<sp/>R&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setImag(Array&lt;C&gt;<sp/>&amp;carray,<sp/>const<sp/>Array&lt;R&gt;<sp/>&amp;rarray)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>checkArrayShapes<sp/>(carray,<sp/>rarray,<sp/>&quot;setImag&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrayTransformInPlace<sp/>(carray,<sp/>rarray,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](C<sp/>l,<sp/>R<sp/>r)-&gt;C<sp/>{<sp/>return<sp/>C(std::real(l),<sp/>r);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>U&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>convertArray(Array&lt;T&gt;<sp/>&amp;to,<sp/>const<sp/>Array&lt;U&gt;<sp/>&amp;from)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(to.nelements()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>from.nelements()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(to.shape()<sp/>!=<sp/>from.shape())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw(ArrayConformanceError(&quot;void<sp/>::convertArray(Array&lt;T&gt;<sp/>&amp;to,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;const<sp/>Array&lt;U&gt;<sp/>&amp;from)&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>-<sp/>arrays<sp/>do<sp/>not<sp/>conform&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(to.contiguousStorage()<sp/><sp/>&amp;&amp;<sp/><sp/>from.contiguousStorage())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;U&gt;::const_contiter<sp/>endFrom<sp/>=<sp/>from.cend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;U&gt;::const_contiter<sp/>iterFrom<sp/>=<sp/>from.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::contiter<sp/>iterTo<sp/>=<sp/>to.cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>iterFrom<sp/>!=<sp/>endFrom;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>++iterFrom,<sp/>++iterTo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrays_internal::convertScalar<sp/>(*iterTo,<sp/>*iterFrom);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;U&gt;::const_iterator<sp/>endFrom<sp/>=<sp/>from.end();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;U&gt;::const_iterator<sp/>iterFrom<sp/>=<sp/>from.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::iterator<sp/>iterTo<sp/>=<sp/>to.begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>iterFrom<sp/>!=<sp/>endFrom;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>++iterFrom,<sp/>++iterTo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrays_internal::convertScalar<sp/>(*iterTo,<sp/>*iterFrom);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="casa/Arrays/ArrayMath.tcc"/>
  </compounddef>
</doxygen>
