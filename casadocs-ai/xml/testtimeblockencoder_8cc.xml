<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="testtimeblockencoder_8cc" kind="file" language="C++">
    <compoundname>testtimeblockencoder.cc</compoundname>
    <includes refid="aftimeblockencoder_8h" local="yes">../aftimeblockencoder.h</includes>
    <includes refid="dysconormalization_8h" local="yes">../dysconormalization.h</includes>
    <includes refid="rftimeblockencoder_8h" local="yes">../rftimeblockencoder.h</includes>
    <includes refid="rowtimeblockencoder_8h" local="yes">../rowtimeblockencoder.h</includes>
    <includes refid="stochasticencoder_8h" local="yes">../stochasticencoder.h</includes>
    <includes local="no">random</includes>
    <includes local="no">boost/test/unit_test.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>iterator</label>
      </node>
      <node id="20">
        <label>boost/test/unit_test.hpp</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>uvector.h</label>
        <link refid="uvector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stdexcept</label>
      </node>
      <node id="2">
        <label>../aftimeblockencoder.h</label>
        <link refid="aftimeblockencoder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>../rftimeblockencoder.h</label>
        <link refid="rftimeblockencoder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>../dysconormalization.h</label>
        <link refid="dysconormalization_8h"/>
      </node>
      <node id="15">
        <label>random</label>
      </node>
      <node id="12">
        <label>timeblockbuffer.h</label>
        <link refid="timeblockbuffer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>timeblockencoder.h</label>
        <link refid="timeblockencoder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="19">
        <label>../rowtimeblockencoder.h</label>
        <link refid="rowtimeblockencoder_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
      <node id="1">
        <label>tables/Dysco/tests/testtimeblockencoder.cc</label>
        <link refid="testtimeblockencoder_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stochasticencoder.h</label>
        <link refid="stochasticencoder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>complex</label>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03">anonymous_namespace{testtimeblockencoder.cc}</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(row_normalization_per_row_accuracy)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>row_normalization_per_row_accuracy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="243" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1aff903300f88b73333408f972a6355a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(row_normalization_global_rms_accuracy)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>row_normalization_global_rms_accuracy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="247" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a1c60be92ed1ebaac68e74f209bd67967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(af_normalization_per_row_accuracy)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>af_normalization_per_row_accuracy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="251" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a7ac9eaf57ad7c3a2698d6fa62b0f6132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(af_normalization_global_rms_accuracy)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>af_normalization_global_rms_accuracy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="255" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a7076a40ff19add74474b93e555f77da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(rf_normalization_per_row_accuracy)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>rf_normalization_per_row_accuracy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="259" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1aa3e137d89377e0b5be4e06ff585cc8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(rf_normalization_global_rms_accuracy)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>rf_normalization_global_rms_accuracy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="263" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1acdbe93757b4f3131cbce9d5f24390a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestZeroEncoding</definition>
        <argsstring>(Normalization block_normalization)</argsstring>
        <name>TestZeroEncoding</name>
        <param>
          <type><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref></type>
          <declname>block_normalization</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="267" column="6" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="267" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a996c40670aef06248ef9cb8d4f13779f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(af_normalization_with_zeros)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>af_normalization_with_zeros</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="307" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="307" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a59ceb5b31012c924284796f656730435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(rf_normalization_with_zeros)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>rf_normalization_with_zeros</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="311" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="311" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a840bbc190d83fedd4b982157108fa1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(row_normalization_with_zeros)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>row_normalization_with_zeros</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="315" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="315" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="testtimeblockencoder_8cc_1a6b96066cbc3ae93f775363f2dbb0039a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(rf_dynamic_range)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>rf_dynamic_range</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tables/Dysco/tests/testtimeblockencoder.cc" line="319" column="1" bodyfile="tables/Dysco/tests/testtimeblockencoder.cc" bodystart="319" bodyend="370"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../aftimeblockencoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../dysconormalization.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../rftimeblockencoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../rowtimeblockencoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../stochasticencoder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/test/unit_test.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedyscostman" kindref="compound">dyscostman</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">BOOST_AUTO_TEST_SUITE(timeblock_encoder)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03" refkind="compound"><highlight class="normal">namespace<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">std::unique_ptr&lt;TimeBlockEncoder&gt;<sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1aa63ab0bcd133a2cdd05c322be1ac4cd7" kindref="member">CreateEncoder</ref>(</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>blockNormalization,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nPol,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nChan)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(blockNormalization)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2aae75414828120521bf834a7dedf6c769" kindref="member">Normalization::kRF</ref>:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;(</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRFTimeBlockEncoder" kindref="compound">RFTimeBlockEncoder</ref>(nPol,<sp/>nChan));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a8e41c992f4f5eaa510be2b83376a2015" kindref="member">Normalization::kAF</ref>:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classAFTimeBlockEncoder" kindref="compound">AFTimeBlockEncoder</ref>(nPol,<sp/>nChan,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a08960ddb2241c0ee9af6fee018c6a61f" kindref="member">Normalization::kRow</ref>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRowTimeBlockEncoder" kindref="compound">RowTimeBlockEncoder</ref>(nPol,<sp/>nChan));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a663f281084eb39e585163330857368f6" kindref="member">Decode</ref>(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>blockNormalization,<sp/><ref refid="classdyscostman_1_1StochasticEncoder" kindref="compound">StochasticEncoder&lt;float&gt;</ref>&amp;<sp/>gausEncoder,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nAnt,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nChan,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nPol,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nRow,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>metaBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTimeBlockEncoder_1a862b6db652dffb0f26de18040cd17003" kindref="member">TimeBlockEncoder::symbol_t</ref>*<sp/>symbolBuffer)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>out(nPol,<sp/>nChan);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>out.<ref refid="classTimeBlockBuffer_1ae90ea381bb3238a67ffc25d9849d62f5" kindref="member">resize</ref>(nRow);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;<sp/>decoder<sp/>=</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1aa63ab0bcd133a2cdd05c322be1ac4cd7" kindref="member">CreateEncoder</ref>(blockNormalization,<sp/>nPol,<sp/>nChan);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>decoder-&gt;InitializeDecode(metaBuffer,<sp/>nRow,<sp/>nAnt);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ant1<sp/>=<sp/>0;<sp/>ant1<sp/>!=<sp/>nAnt;<sp/>++ant1)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ant2<sp/>=<sp/>ant1;<sp/>ant2<sp/>!=<sp/>nAnt;<sp/>++ant2)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoder-&gt;Decode(gausEncoder,<sp/>out,<sp/>symbolBuffer,<sp/>rIndex,<sp/>ant1,<sp/>ant2);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++rIndex;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a9d7eee1e4073f480f30e7d7213a9bf9f" kindref="member">TestSimpleExample</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>blockNormalization)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nAnt<sp/>=<sp/>4,<sp/>nChan<sp/>=<sp/>1,<sp/>nPol<sp/>=<sp/>2,<sp/>nRow<sp/>=<sp/>(nAnt<sp/>*<sp/>(nAnt<sp/>+<sp/>1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>buffer(nPol,<sp/>nChan);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::complex&lt;float&gt;<sp/>data[nChan<sp/>*<sp/>nPol];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(0,<sp/>0,<sp/>0,<sp/>data);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>std::complex&lt;double&gt;(9.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(1,<sp/>0,<sp/>1,<sp/>data);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>8.0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>std::complex&lt;double&gt;(7.0,<sp/>2.0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(2,<sp/>0,<sp/>2,<sp/>data);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>6.0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>std::complex&lt;double&gt;(5.0,<sp/>3.0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(3,<sp/>0,<sp/>3,<sp/>data);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(4,<sp/>1,<sp/>1,<sp/>data);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>4.0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>std::complex&lt;double&gt;(3.0,<sp/>4.0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(5,<sp/>1,<sp/>2,<sp/>data);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>std::complex&lt;double&gt;(1.0,<sp/>5.0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(6,<sp/>1,<sp/>3,<sp/>data);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(7,<sp/>2,<sp/>2,<sp/>data);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>std::numeric_limits&lt;float&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(8,<sp/>2,<sp/>3,<sp/>data);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>99.0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(9,<sp/>3,<sp/>3,<sp/>data);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>input(buffer);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="classdyscostman_1_1StochasticEncoder" kindref="compound">StochasticEncoder&lt;float&gt;</ref><sp/>gausEncoder(256,<sp/>1.0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;<sp/>encoder<sp/>=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1aa63ab0bcd133a2cdd05c322be1ac4cd7" kindref="member">CreateEncoder</ref>(blockNormalization,<sp/>nPol,<sp/>nChan);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>metaDataCount<sp/>=<sp/>encoder-&gt;MetaDataCount(nRow,<sp/>nPol,<sp/>nChan,<sp/>nAnt);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>symbolCount<sp/>=<sp/>encoder-&gt;SymbolCount(nRow);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;float&gt;</ref><sp/>metaBuffer(metaDataCount);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;TimeBlockEncoder::symbol_t&gt;</ref><sp/>symbolBuffer(symbolCount);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>encoder-&gt;EncodeWithoutDithering(gausEncoder,<sp/>buffer,<sp/>metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>nAnt);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>out<sp/>=</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a663f281084eb39e585163330857368f6" kindref="member">Decode</ref>(blockNormalization,<sp/>gausEncoder,<sp/>nAnt,<sp/>nChan,<sp/>nPol,<sp/>nRow,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::complex&lt;float&gt;<sp/>dataFromOut[nChan<sp/>*<sp/>nPol],<sp/>dataFromIn[nChan<sp/>*<sp/>nPol];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>!=<sp/>nRow;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>auto-correlations<sp/>of<sp/>AF,<sp/>since<sp/>these<sp/>are<sp/>not<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="classTimeBlockBuffer_1adaf8c21ef04152455a040ac522468ecc" kindref="member">GetData</ref>(row,<sp/>dataFromOut);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>input.<ref refid="classTimeBlockBuffer_1adaf8c21ef04152455a040ac522468ecc" kindref="member">GetData</ref>(row,<sp/>dataFromIn);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockNormalization<sp/>!=<sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a8e41c992f4f5eaa510be2b83376a2015" kindref="member">Normalization::kAF</ref><sp/>||</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>row<sp/>!=<sp/>4<sp/>&amp;&amp;<sp/>row<sp/>!=<sp/>7<sp/>&amp;&amp;<sp/>row<sp/>!=<sp/>9))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>!=<sp/>nChan;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a4acbf7a5e2230a66c26a42f6ce15e711" kindref="member">std::norm</ref>(dataFromOut[ch]<sp/>-<sp/>dataFromIn[ch])<sp/>&lt;<sp/>0.1,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Output{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dataFromOut[ch]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>is<sp/>close<sp/>to<sp/>input{&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dataFromIn[ch]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>of<sp/>row<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>normalization<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(blockNormalization));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1af346325806ee62e631557df5b479bae4" kindref="member">TestTimeBlockEncoder</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>blockNormalization)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nAnt<sp/>=<sp/>50,<sp/>nChan<sp/>=<sp/>64,<sp/>nPol<sp/>=<sp/>4,<sp/>nRow<sp/>=<sp/>(nAnt<sp/>*<sp/>(nAnt<sp/>+<sp/>1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>buffer(nPol,<sp/>nChan);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::mt19937<sp/>rnd;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::normal_distribution&lt;float&gt;<sp/>dist;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classdyscostman_1_1StochasticEncoder" kindref="compound">StochasticEncoder&lt;float&gt;</ref><sp/>gausEncoder(256,<sp/>1.0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::uniform_int_distribution&lt;unsigned&gt;<sp/>dither<sp/>=</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gausEncoder.<ref refid="classdyscostman_1_1StochasticEncoder_1a526b6a60b845ee128878cf7b8f7e3fe7" kindref="member">GetDitherDistribution</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>dist(rnd);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>data(nChan<sp/>*<sp/>nPol);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::vector&lt;ao::uvector&lt;std::complex&lt;float&gt;&gt;&gt;<sp/>allData;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classRMSMeasurement" kindref="compound">RMSMeasurement</ref><sp/>unscaledRMS;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factorSum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>factorCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blockRow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>0;<sp/>a1<sp/>!=<sp/>nAnt;<sp/>++a1)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>a1;<sp/>a2<sp/>!=<sp/>nAnt;<sp/>++a2)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>!=<sp/>nChan;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>!=<sp/>nPol;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;float&gt;<sp/>rndVal(dist(rnd),<sp/>dist(rnd));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::complex&lt;float&gt;<sp/>rndVal(1.0,<sp/>0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>f<sp/>=<sp/>float(a1+1)<sp/>*<sp/>float(a2+1)<sp/>*<sp/>float(p+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factorSum<sp/>+=<sp/>f;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factorCount++;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[p<sp/>+<sp/>ch<sp/>*<sp/>nPol]<sp/>=<sp/>rndVal<sp/>*<sp/>f;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;float&gt;<sp/>encodedVal(</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gausEncoder.<ref refid="classdyscostman_1_1StochasticEncoder_1ae8ef6e1adbf23d8db19ff8fd6383de01" kindref="member">Decode</ref>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gausEncoder.<ref refid="classdyscostman_1_1StochasticEncoder_1ac0bb79f9d0c710f2e83459872215b77c" kindref="member">EncodeWithDithering</ref>(rndVal.real(),<sp/>dither(rnd))),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gausEncoder.<ref refid="classdyscostman_1_1StochasticEncoder_1ae8ef6e1adbf23d8db19ff8fd6383de01" kindref="member">Decode</ref>(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gausEncoder.<ref refid="classdyscostman_1_1StochasticEncoder_1ac0bb79f9d0c710f2e83459872215b77c" kindref="member">EncodeWithDithering</ref>(rndVal.imag(),<sp/>dither(rnd))));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unscaledRMS.<ref refid="classRMSMeasurement_1aac73ea86f00781214e76502497785716" kindref="member">Include</ref>(encodedVal<sp/>-<sp/>rndVal);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1a91dc5e891b48aa5891117e904ef64a16" kindref="member">SetData</ref>(blockRow,<sp/>a1,<sp/>a2,<sp/>data.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allData.push_back(data);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++blockRow;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;<sp/>encoder<sp/>=</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1aa63ab0bcd133a2cdd05c322be1ac4cd7" kindref="member">CreateEncoder</ref>(blockNormalization,<sp/>nPol,<sp/>nChan);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nIter<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;float&gt;</ref><sp/>metaBuffer(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encoder-&gt;MetaDataCount(nRow,<sp/>nPol,<sp/>nChan,<sp/>nAnt));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;unsigned&gt;</ref><sp/>symbolBuffer(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encoder-&gt;SymbolCount(nAnt<sp/>*<sp/>(nAnt<sp/>+<sp/>1)<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>nIter;<sp/>++i)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>encoder-&gt;EncodeWithDithering(gausEncoder,<sp/>buffer,<sp/>metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>nAnt,<sp/>rnd);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>nIter;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>encoder-&gt;InitializeDecode(metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>nRow,<sp/>nAnt);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>blockRow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>0;<sp/>a1<sp/>!=<sp/>nAnt;<sp/>++a1)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>a1;<sp/>a2<sp/>!=<sp/>nAnt;<sp/>++a2)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>dataOut(nChan<sp/>*<sp/>nPol);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoder-&gt;Decode(gausEncoder,<sp/>buffer,<sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>blockRow,<sp/>a1,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1adaf8c21ef04152455a040ac522468ecc" kindref="member">GetData</ref>(blockRow,<sp/>dataOut.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++blockRow;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classRMSMeasurement" kindref="compound">RMSMeasurement</ref><sp/>mEncodingError,<sp/>mData;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>encoder-&gt;InitializeDecode(metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>nRow,<sp/>nAnt);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>blockRow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>0;<sp/>a1<sp/>!=<sp/>nAnt;<sp/>++a1)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>a1;<sp/>a2<sp/>!=<sp/>nAnt;<sp/>++a2)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>dataOut(nChan<sp/>*<sp/>nPol);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encoder-&gt;Decode(gausEncoder,<sp/>buffer,<sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>blockRow,<sp/>a1,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="classTimeBlockBuffer_1adaf8c21ef04152455a040ac522468ecc" kindref="member">GetData</ref>(blockRow,<sp/>dataOut.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;std::complex&lt;float&gt;</ref>&gt;&amp;<sp/>dataIn<sp/>=<sp/>allData[index];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>nPol<sp/>*<sp/>nChan;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mEncodingError.<ref refid="classRMSMeasurement_1aac73ea86f00781214e76502497785716" kindref="member">Include</ref>(dataOut[i]<sp/>-<sp/>dataIn[i]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mData.<ref refid="classRMSMeasurement_1aac73ea86f00781214e76502497785716" kindref="member">Include</ref>(dataIn[i]);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++blockRow;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>BOOST_CHECK_LT(mEncodingError.<ref refid="classRMSMeasurement_1a60c181c85089d94bdf7f24b61f39e14f" kindref="member">RMS</ref>(),<sp/>mData.<ref refid="classRMSMeasurement_1a60c181c85089d94bdf7f24b61f39e14f" kindref="member">RMS</ref>()<sp/>*<sp/>0.1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*std::cout<sp/>&lt;&lt;<sp/>&quot;Gaussian<sp/>encoding<sp/>error<sp/>for<sp/>unscaled<sp/>values:<sp/>&quot;<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>unscaledRMS.RMS()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Average<sp/>factor:<sp/>&quot;<sp/>&lt;&lt;<sp/>factorSum<sp/>/</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>factorCount<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Effective<sp/>RMS<sp/>of<sp/>error:<sp/>&quot;<sp/>&lt;&lt;<sp/>mEncoded.RMS()<sp/>/<sp/>(factorSum<sp/>/</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>factorCount)<sp/>&lt;&lt;<sp/>&quot;<sp/>(<sp/>&quot;<sp/>&lt;&lt;<sp/>(mEncoded.RMS()<sp/>/<sp/>(factorSum<sp/>/<sp/>factorCount))<sp/>/</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>unscaledRMS.RMS()<sp/>&lt;&lt;<sp/>&quot;<sp/>x<sp/>theoretical)\n&quot;;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a01441f220cf924dbf54c5ac6e7fa60f4" kindref="member">EncodeDecode</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>block_normalization,<sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer</ref>&lt;std::complex&lt;float&gt;&gt;<sp/>&amp;buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_pol,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_chan,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ant)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_row<sp/>=<sp/>buffer.NRows();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="classdyscostman_1_1StochasticEncoder" kindref="compound">StochasticEncoder&lt;float&gt;</ref><sp/>gausEncoder(256,<sp/>1.0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TimeBlockEncoder&gt;<sp/>encoder<sp/>=</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1aa63ab0bcd133a2cdd05c322be1ac4cd7" kindref="member">CreateEncoder</ref>(block_normalization,<sp/>n_pol,<sp/>n_chan);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>metaDataCount<sp/>=<sp/>encoder-&gt;MetaDataCount(n_row,<sp/>n_pol,<sp/>n_chan,<sp/>n_ant);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>symbolCount<sp/>=<sp/>encoder-&gt;SymbolCount(n_row);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;float&gt;</ref><sp/>metaBuffer(metaDataCount);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="classao_1_1uvector" kindref="compound">ao::uvector&lt;TimeBlockEncoder::symbol_t&gt;</ref><sp/>symbolBuffer(symbolCount);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>std::mt19937<sp/>mt;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>encoder-&gt;EncodeWithDithering(gausEncoder,<sp/>buffer,<sp/>metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>n_ant,<sp/>mt);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a663f281084eb39e585163330857368f6" kindref="member">Decode</ref>(block_normalization,<sp/>gausEncoder,<sp/>n_ant,<sp/>n_chan,<sp/>n_pol,<sp/>n_row,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metaBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>(),<sp/>symbolBuffer.<ref refid="classao_1_1uvector_1a2475deee7f0d64164eedebbd2910cc55" kindref="member">data</ref>());</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(row_normalization_per_row_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a9d7eee1e4073f480f30e7d7213a9bf9f" kindref="member">TestSimpleExample</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a08960ddb2241c0ee9af6fee018c6a61f" kindref="member">Normalization::kRow</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(row_normalization_global_rms_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1af346325806ee62e631557df5b479bae4" kindref="member">TestTimeBlockEncoder</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a08960ddb2241c0ee9af6fee018c6a61f" kindref="member">Normalization::kRow</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(af_normalization_per_row_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a9d7eee1e4073f480f30e7d7213a9bf9f" kindref="member">TestSimpleExample</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a8e41c992f4f5eaa510be2b83376a2015" kindref="member">Normalization::kAF</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(af_normalization_global_rms_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1af346325806ee62e631557df5b479bae4" kindref="member">TestTimeBlockEncoder</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a8e41c992f4f5eaa510be2b83376a2015" kindref="member">Normalization::kAF</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(rf_normalization_per_row_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a9d7eee1e4073f480f30e7d7213a9bf9f" kindref="member">TestSimpleExample</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2aae75414828120521bf834a7dedf6c769" kindref="member">Normalization::kRF</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(rf_normalization_global_rms_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1af346325806ee62e631557df5b479bae4" kindref="member">TestTimeBlockEncoder</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2aae75414828120521bf834a7dedf6c769" kindref="member">Normalization::kRF</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="testtimeblockencoder_8cc_1acdbe93757b4f3131cbce9d5f24390a0d" kindref="member">TestZeroEncoding</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>block_normalization)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ant<sp/>=<sp/>4,<sp/>n_chan<sp/>=<sp/>1,<sp/>n_pol<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>buffer(n_pol,<sp/>n_chan);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>std::vector&lt;std::complex&lt;float&gt;&gt;<sp/>data(n_chan<sp/>*<sp/>n_pol,<sp/>0.0);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>0;<sp/>a1<sp/>!=<sp/>n_ant;<sp/>++a1)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>a1;<sp/>a2<sp/>!=<sp/>n_ant;<sp/>++a2)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer.SetData(index,<sp/>a1,<sp/>a2,<sp/>data.data());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>out<sp/>=<sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a01441f220cf924dbf54c5ac6e7fa60f4" kindref="member">EncodeDecode</ref>(block_normalization,<sp/>buffer,<sp/>n_pol,<sp/>n_chan,<sp/>n_ant);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>std::complex&lt;float&gt;<sp/>dataFromOut[n_chan<sp/>*<sp/>n_pol];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>!=<sp/>out.<ref refid="classTimeBlockBuffer_1a20ea4c3fd95116dadd10d4303dabf6b7" kindref="member">NRows</ref>();<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>auto-correlations<sp/>of<sp/>AF,<sp/>since<sp/>these<sp/>are<sp/>not<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="classTimeBlockBuffer_1adaf8c21ef04152455a040ac522468ecc" kindref="member">GetData</ref>(row,<sp/>dataFromOut);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block_normalization<sp/>!=<sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a8e41c992f4f5eaa510be2b83376a2015" kindref="member">Normalization::kAF</ref><sp/>||</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>row<sp/>!=<sp/>4<sp/>&amp;&amp;<sp/>row<sp/>!=<sp/>7<sp/>&amp;&amp;<sp/>row<sp/>!=<sp/>9))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>!=<sp/>n_chan;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(<ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">std::isfinite</ref>(dataFromOut[ch].<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>()),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Real<sp/>output{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dataFromOut[ch]</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>is<sp/>finite,<sp/>row<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>normalization<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(block_normalization));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(<ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">std::isfinite</ref>(dataFromOut[ch].<ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>()),</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Imaginary<sp/>output{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dataFromOut[ch]</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>is<sp/>finite,<sp/>row<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>normalization<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(block_normalization));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_EQUAL(dataFromOut[ch].<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>(),<sp/>0.0);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_EQUAL(dataFromOut[ch].<ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>(),<sp/>0.0);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(af_normalization_with_zeros)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="testtimeblockencoder_8cc_1acdbe93757b4f3131cbce9d5f24390a0d" kindref="member">TestZeroEncoding</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a8e41c992f4f5eaa510be2b83376a2015" kindref="member">Normalization::kAF</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(rf_normalization_with_zeros)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="testtimeblockencoder_8cc_1acdbe93757b4f3131cbce9d5f24390a0d" kindref="member">TestZeroEncoding</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2aae75414828120521bf834a7dedf6c769" kindref="member">Normalization::kRF</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(row_normalization_with_zeros)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="testtimeblockencoder_8cc_1acdbe93757b4f3131cbce9d5f24390a0d" kindref="member">TestZeroEncoding</ref>(<ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2a08960ddb2241c0ee9af6fee018c6a61f" kindref="member">Normalization::kRow</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><ref refid="testtimeblockencoder_8cc_1adf1c82eefebb5fc5280a2d78160dd804" kindref="member">BOOST_AUTO_TEST_CASE</ref>(rf_dynamic_range)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ant<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_chan<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_pol<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2" kindref="member">Normalization</ref><sp/>block_normalization<sp/>=<sp/><ref refid="namespacedyscostman_1a0310ef73fb535ced1f64687d171da9a2aae75414828120521bf834a7dedf6c769" kindref="member">Normalization::kRF</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>buffer(n_pol,<sp/>n_chan);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>row,<sp/>ant1,<sp/>ant2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>constexpr<sp/>std::complex&lt;float&gt;<sp/>normal_row_values[n_chan]<sp/>=<sp/>{{0.1,<sp/>0.1},<sp/>{1.0,<sp/>1.0},<sp/>{1.0,<sp/>1.0}};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>constexpr<sp/>std::complex&lt;float&gt;<sp/>weird_row_values[n_chan]<sp/>=<sp/>{{1.0,<sp/>1.0},<sp/>{1e8,<sp/>1e8},<sp/>{1e8,<sp/>1e8}};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>weird_antenna<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a1=0;<sp/>a1!=n_ant;<sp/>++a1)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a2=a1;<sp/>a2!=n_ant;<sp/>++a2)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a1<sp/>==<sp/>weird_antenna<sp/>&amp;&amp;<sp/>a2<sp/>==<sp/>weird_antenna)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.SetData(row,<sp/>a1,<sp/>a2,<sp/>weird_row_values);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.SetData(row,<sp/>a1,<sp/>a2,<sp/>normal_row_values);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++row;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTimeBlockBuffer" kindref="compound">TimeBlockBuffer&lt;std::complex&lt;float&gt;</ref>&gt;<sp/>out<sp/>=<sp/><ref refid="namespaceanonymous__namespace_02testtimeblockencoder_8cc_03_1a01441f220cf924dbf54c5ac6e7fa60f4" kindref="member">EncodeDecode</ref>(block_normalization,<sp/>buffer,<sp/>n_pol,<sp/>n_chan,<sp/>n_ant);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a1=0;<sp/>a1!=n_ant;<sp/>++a1)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a2=a1;<sp/>a2!=n_ant;<sp/>++a2)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>auto-correlations<sp/>of<sp/>AF,<sp/>since<sp/>these<sp/>are<sp/>not<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;float&gt;<sp/>out_data[n_chan<sp/>*<sp/>n_pol];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="classTimeBlockBuffer_1adaf8c21ef04152455a040ac522468ecc" kindref="member">GetData</ref>(row,<sp/>out_data);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>!=<sp/>n_chan;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(<ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">std::isfinite</ref>(out_data[ch].<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>()),</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Real<sp/>output{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>out_data[ch]</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>is<sp/>finite,<sp/>row<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(<ref refid="namespacecasacore_1_1arrays__internal_1a3cf71da9c9565e64651036e50ee046fd" kindref="member">std::isfinite</ref>(out_data[ch].<ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>()),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Imaginary<sp/>output{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>out_data[ch]</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}<sp/>is<sp/>finite,<sp/>row<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a1<sp/>!=<sp/>weird_antenna<sp/>||<sp/>a2<sp/>!=<sp/>weird_antenna)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>(ch<sp/>==<sp/>0)<sp/>?<sp/>0.1<sp/>:<sp/>1.0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_CLOSE_FRACTION(out_data[ch].<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>(),<sp/>expected,<sp/>1<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>-4);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_CLOSE_FRACTION(out_data[ch].<ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>(),<sp/>expected,<sp/>1<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>-4);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>test<sp/>channel<sp/>0<sp/>because<sp/>it<sp/>can<sp/>(and<sp/>may)<sp/>have<sp/>a<sp/>large<sp/>error,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>the<sp/>only<sp/>low<sp/>value<sp/>in<sp/>this<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_CLOSE_FRACTION(out_data[ch].<ref refid="namespacecasacore_1aede9ff6c3a17f5b45e6fc56859d40d5b" kindref="member">real</ref>(),<sp/>1e8,<sp/>1<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>-4);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_CLOSE_FRACTION(out_data[ch].<ref refid="namespacecasacore_1ad3d3f071b089ce0a8409042448268ad1" kindref="member">imag</ref>(),<sp/>1e8,<sp/>1<ref refid="namespacecasacore_1_1C_1affe3d5b244c2ac147c007388050bae03" kindref="member">e</ref>-4);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++row;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">BOOST_AUTO_TEST_SUITE_END()</highlight></codeline>
    </programlisting>
    <location file="tables/Dysco/tests/testtimeblockencoder.cc"/>
  </compounddef>
</doxygen>
