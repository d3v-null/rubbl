<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ArrayColumn_8tcc" kind="file" language="C++">
    <compoundname>ArrayColumn.tcc</compoundname>
    <includedby refid="ArrayColumn_8h" local="no">tables/Tables/ArrayColumn.h</includedby>
    <invincdepgraph>
      <node id="4">
        <label>tables/DataMan/CompressFloat.cc</label>
        <link refid="CompressFloat_8cc"/>
      </node>
      <node id="39">
        <label>tables/TaQL/ExprMathNodeArray.cc</label>
        <link refid="ExprMathNodeArray_8cc"/>
      </node>
      <node id="3">
        <label>tables/DataMan/CompressComplex.cc</label>
        <link refid="CompressComplex_8cc"/>
      </node>
      <node id="37">
        <label>tables/TaQL/ExprLogicNodeArray.cc</label>
        <link refid="ExprLogicNodeArray_8cc"/>
      </node>
      <node id="44">
        <label>tables/TaQL/ExprUDFNodeArray.h</label>
        <link refid="ExprUDFNodeArray_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>tables/Tables.h</label>
        <link refid="Tables_8h"/>
      </node>
      <node id="46">
        <label>tables/TaQL/ExprUnitNode.h</label>
        <link refid="ExprUnitNode_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>tables/TaQL/ExprGroupAggrFuncArray.cc</label>
        <link refid="ExprGroupAggrFuncArray_8cc"/>
      </node>
      <node id="17">
        <label>tables/TaQL/ExprDerNodeArray.h</label>
        <link refid="ExprDerNodeArray_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>tables/TaQL/ExprConeNode.cc</label>
        <link refid="ExprConeNode_8cc"/>
      </node>
      <node id="18">
        <label>tables/TaQL/ExprDerNodeArray.cc</label>
        <link refid="ExprDerNodeArray_8cc"/>
      </node>
      <node id="13">
        <label>tables/Tables/TableRow.cc</label>
        <link refid="TableRow_8cc"/>
      </node>
      <node id="40">
        <label>tables/TaQL/ExprNodeArray.cc</label>
        <link refid="ExprNodeArray_8cc"/>
      </node>
      <node id="21">
        <label>tables/TaQL/ExprNodeSet.cc</label>
        <link refid="ExprNodeSet_8cc"/>
      </node>
      <node id="8">
        <label>tables/LogTables/TableLogSink.cc</label>
        <link refid="TableLogSink_8cc"/>
      </node>
      <node id="1">
        <label>tables/Tables/ArrayColumn.tcc</label>
        <link refid="ArrayColumn_8tcc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>tables/TaQL/TableParseTableList.cc</label>
        <link refid="TableParseTableList_8cc"/>
      </node>
      <node id="50">
        <label>tables/TaQL/TableParseUpdate.cc</label>
        <link refid="TableParseUpdate_8cc"/>
      </node>
      <node id="34">
        <label>tables/TaQL/ExprGroupAggrFunc.cc</label>
        <link refid="ExprGroupAggrFunc_8cc"/>
      </node>
      <node id="6">
        <label>tables/LogTables/TableLogSink.h</label>
        <link refid="TableLogSink_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>tables/TaQL/ExprLogicNodeArray.h</label>
        <link refid="ExprLogicNodeArray_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>tables/TaQL/ExprFuncNode.cc</label>
        <link refid="ExprFuncNode_8cc"/>
      </node>
      <node id="32">
        <label>tables/TaQL/TableParseFunc.cc</label>
        <link refid="TableParseFunc_8cc"/>
      </node>
      <node id="43">
        <label>tables/TaQL/RecordExpr.cc</label>
        <link refid="RecordExpr_8cc"/>
      </node>
      <node id="12">
        <label>tables/Tables/TableProxy.cc</label>
        <link refid="TableProxy_8cc"/>
      </node>
      <node id="33">
        <label>tables/TaQL/ExprFuncNodeArray.cc</label>
        <link refid="ExprFuncNodeArray_8cc"/>
      </node>
      <node id="16">
        <label>tables/apps/taql.cc</label>
        <link refid="taql_8cc"/>
      </node>
      <node id="23">
        <label>tables/TaQL/TableParseQuery.cc</label>
        <link refid="TableParseQuery_8cc"/>
      </node>
      <node id="11">
        <label>tables/Tables/ReadAsciiTable.cc</label>
        <link refid="ReadAsciiTable_8cc"/>
      </node>
      <node id="41">
        <label>tables/TaQL/ExprNodeRecord.h</label>
        <link refid="ExprNodeRecord_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tables/TaQL/ExprGroup.cc</label>
        <link refid="ExprGroup_8cc"/>
      </node>
      <node id="30">
        <label>tables/TaQL/ExprConeNode.h</label>
        <link refid="ExprConeNode_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>tables/TaQL/ExprNodeRep.cc</label>
        <link refid="ExprNodeRep_8cc"/>
      </node>
      <node id="15">
        <label>tables/TaQL/ExprNodeArray.h</label>
        <link refid="ExprNodeArray_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>tables/Tables/ColumnsIndexArray.cc</label>
        <link refid="ColumnsIndexArray_8cc"/>
      </node>
      <node id="48">
        <label>tables/TaQL/ExprMathNode.cc</label>
        <link refid="ExprMathNode_8cc"/>
      </node>
      <node id="19">
        <label>tables/TaQL/ExprNode.cc</label>
        <link refid="ExprNode_8cc"/>
      </node>
      <node id="45">
        <label>tables/TaQL/ExprUDFNodeArray.cc</label>
        <link refid="ExprUDFNodeArray_8cc"/>
      </node>
      <node id="42">
        <label>tables/TaQL/ExprNodeRecord.cc</label>
        <link refid="ExprNodeRecord_8cc"/>
      </node>
      <node id="38">
        <label>tables/TaQL/ExprMathNodeArray.h</label>
        <link refid="ExprMathNodeArray_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tables/TaQL/ExprNodeSetElem.cc</label>
        <link refid="ExprNodeSetElem_8cc"/>
      </node>
      <node id="9">
        <label>tables/Tables/ArrayColumn_tmpl.cc</label>
        <link refid="ArrayColumn__tmpl_8cc"/>
      </node>
      <node id="5">
        <label>tables/Dysco/tests/testdyscostman.cc</label>
        <link refid="testdyscostman_8cc"/>
      </node>
      <node id="7">
        <label>tables/LogTables/LoggerHolder.cc</label>
        <link refid="LoggerHolder_8cc"/>
      </node>
      <node id="49">
        <label>tables/TaQL/ExprUnitNode.cc</label>
        <link refid="ExprUnitNode_8cc"/>
      </node>
      <node id="25">
        <label>tables/TaQL/TableParseUtil.cc</label>
        <link refid="TableParseUtil_8cc"/>
      </node>
      <node id="27">
        <label>tables/TaQL/ExprAggrNodeArray.h</label>
        <link refid="ExprAggrNodeArray_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>tables/TaQL/ExprAggrNodeArray.cc</label>
        <link refid="ExprAggrNodeArray_8cc"/>
      </node>
      <node id="26">
        <label>tables/TaQL/ExprFuncNodeArray.h</label>
        <link refid="ExprFuncNodeArray_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tables/Tables/ArrayColumn.h</label>
        <link refid="ArrayColumn_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//#<sp/>ArrayColumn.cc:<sp/>Access<sp/>to<sp/>an<sp/>array<sp/>table<sp/>column<sp/>with<sp/>arbitrary<sp/>data<sp/>type</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Copyright<sp/>(C)<sp/>1994,1995,1996,1997,1998,1999,2000,2001</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight></codeline>
<codeline><highlight class="normal">//#</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight></codeline>
<codeline><highlight class="normal">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TABLES_ARRAYCOLUMN_TCC</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TABLES_ARRAYCOLUMN_TCC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/ArrayColumn.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/ArrayColumnFunc.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/Table.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/RefRows.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Array.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/ArrayIter.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/IPosition.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Arrays/Slicer.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/BasicSL/String.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/ValTypeId.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/tables/Tables/TableError.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;casacore/casa/Utilities/Assert.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>casacore<sp/>{<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;::ArrayColumn()</highlight></codeline>
<codeline><highlight class="normal">:<sp/>ArrayColumnBase<sp/>()</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;::ArrayColumn<sp/>(const<sp/>Table&amp;<sp/>tab,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>String&amp;<sp/>columnName)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>ArrayColumnBase<sp/>(tab,<sp/>columnName)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkDataType();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;::ArrayColumn<sp/>(const<sp/>TableColumn&amp;<sp/>column)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>ArrayColumnBase<sp/>(column)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>checkDataType();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;::ArrayColumn<sp/>(const<sp/>ArrayColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">:<sp/>ArrayColumnBase<sp/>(that)</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">TableColumn*<sp/>ArrayColumn&lt;T&gt;::clone()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>new<sp/>ArrayColumn&lt;T&gt;<sp/>(*this);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;&amp;<sp/>ArrayColumn&lt;T&gt;::operator=<sp/>(const<sp/>ArrayColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>reference<sp/>(that);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(*this);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::reference<sp/>(const<sp/>ArrayColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TableColumn::reference<sp/>(that);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;::~ArrayColumn()</highlight></codeline>
<codeline><highlight class="normal">{}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::checkDataType()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//#<sp/>Check<sp/>if<sp/>the<sp/>data<sp/>type<sp/>matches.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>ColumnDesc&amp;<sp/>cd<sp/>=<sp/>baseColPtr_p-&gt;columnDesc();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>dtype<sp/>=<sp/>cd.dataType();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(dtype<sp/>!=<sp/>ValType::getType(static_cast&lt;T*&gt;(0))<sp/><sp/>||<sp/><sp/>!cd.isArray())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>throw<sp/>(TableInvDT<sp/>(&quot;<sp/>in<sp/>ArrayColumn<sp/>ctor<sp/>for<sp/>column<sp/>&quot;<sp/>+<sp/>cd.name()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(dtype<sp/>==<sp/>TpOther)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(cd.dataTypeId()<sp/>!=<sp/>valDataTypeId(static_cast&lt;T*&gt;(0)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>(TableInvDT<sp/>(&quot;<sp/>in<sp/>ArrayColumn<sp/>ctor<sp/>for<sp/>column<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>cd.name()<sp/>+<sp/>&quot;;<sp/>using<sp/>data<sp/>type<sp/>id<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>valDataTypeId(static_cast&lt;T*&gt;(0))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>&quot;,<sp/>expected<sp/>&quot;<sp/>+<sp/>cd.dataTypeId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::operator()<sp/>(rownr_t<sp/>rownr)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>get<sp/>(rownr,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::get<sp/>(rownr_t<sp/>rownr)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>get<sp/>(rownr,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::get<sp/>(rownr_t<sp/>rownr,<sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGet<sp/>(rownr,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getSlice<sp/>(rownr_t<sp/>rownr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getSlice<sp/>(rownr,<sp/>arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getSlice<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetSlice<sp/>(rownr,<sp/>arraySection,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getSlice</highlight></codeline>
<codeline><highlight class="normal">(rownr_t<sp/>rownr,<sp/>const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getSlice<sp/>(rownr,<sp/>arraySlices,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getSlice<sp/>(rownr_t<sp/>rownr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetSlice<sp/>(rownr,<sp/>arraySlices,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rows,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ColumnSlicer&amp;<sp/>columnSlicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>destination,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumnCells<sp/>(rows,<sp/>columnSlicer,<sp/>destination,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">//void</highlight></codeline>
<codeline><highlight class="normal">//ArrayColumn&lt;T&gt;::getColumnCellsSlicers<sp/>(const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;<sp/>&amp;<sp/>arraySlices,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>axis,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;uInt&gt;<sp/>selections,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Slicer<sp/>*&gt;<sp/>result)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>if<sp/>(axis<sp/>==<sp/>arraySlices.size()){</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPosition<sp/>start<sp/>(axis),<sp/>increment<sp/>(axis),<sp/>length<sp/>(axis);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>axis;<sp/>i++){</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slice<sp/>&amp;<sp/>slice<sp/>=<sp/>arraySlices<sp/>[i]<sp/>[selections<sp/>[i]];</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>[i]<sp/>=<sp/>slice.start();</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>[i]<sp/>=<sp/>slice.inc();</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>[i]<sp/>=<sp/>slice.length();</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back<sp/>=<sp/>new<sp/>Slicer<sp/>(start,<sp/>length,<sp/>increment);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Vector&lt;Slice&gt;<sp/>&amp;<sp/>thisAxis<sp/>=<sp/>arraySlices<sp/>[axis];</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>for<sp/>(uInt<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>thisAxis.size();<sp/>i++){</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selections<sp/>[axis]<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getColumnCellsSlicers<sp/>(arraySlices,<sp/>axis<sp/>+<sp/>1,<sp/>selections,<sp/>result);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumn()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumn<sp/>(arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumn<sp/>(Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumn<sp/>(arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumn<sp/>(const<sp/>Slicer&amp;<sp/>arraySection)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumn<sp/>(arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumn<sp/>(const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumn<sp/>(arraySection,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumn</highlight></codeline>
<codeline><highlight class="normal">(const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumn<sp/>(arraySlices,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumn<sp/>(const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumn<sp/>(arraySlices,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumnRange<sp/>(rowRange,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumnRange<sp/>(rowRange,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumnCells<sp/>(rownrs,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumnCells<sp/>(rownrs,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumnRange<sp/>(rowRange,<sp/>arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>acbGetColumnRange<sp/>(rowRange,<sp/>arraySection,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>ArrayColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getColumnCells<sp/>(rownrs,<sp/>arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::getColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;T&gt;&amp;<sp/>arr,<sp/>Bool<sp/>resize)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbGetColumnCells<sp/>(rownrs,<sp/>arraySection,<sp/>arr,<sp/>resize);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::setShape<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>IPosition&amp;<sp/>shape)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ArrayColumnBase::setShape<sp/>(rownr,<sp/>shape);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::setShape<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>IPosition&amp;<sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>IPosition&amp;<sp/>tileShape)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ArrayColumnBase::setShape<sp/>(rownr,<sp/>shape,<sp/>tileShape);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::put<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPut<sp/>(rownr,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putSlice<sp/>(rownr_t<sp/>rownr,<sp/>const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutSlice<sp/>(rownr,<sp/>arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putSlice<sp/>(rownr_t<sp/>rownr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutSlice<sp/>(rownr,<sp/>arraySlices,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rows,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>source)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumnCells<sp/>(rows,<sp/>arraySlices,<sp/>source);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void</highlight></codeline>
<codeline><highlight class="normal">ArrayColumn&lt;T&gt;::putColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rows,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ColumnSlicer&amp;<sp/>columnSlicer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>source)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumnCells<sp/>(rows,<sp/>columnSlicer,<sp/>source);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::put<sp/>(rownr_t<sp/>thisRownr,<sp/>const<sp/>TableColumn&amp;<sp/>that,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownr_t<sp/>thatRownr,<sp/>Bool<sp/>preserveTileShape)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TableColumn::put<sp/>(thisRownr,<sp/>that,<sp/>thatRownr,<sp/>preserveTileShape);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumn<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumn<sp/>(arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumn<sp/>(const<sp/>Slicer&amp;<sp/>arraySection,<sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumn<sp/>(arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumn<sp/>(const<sp/>Vector&lt;Vector&lt;Slice&gt;<sp/>&gt;&amp;<sp/>arraySlices,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumn<sp/>(arraySlices,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumnRange<sp/>(rowRange,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumnCells<sp/>(rownrs,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumnRange<sp/>(const<sp/>Slicer&amp;<sp/>rowRange,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumnRange<sp/>(rowRange,<sp/>arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumnCells<sp/>(const<sp/>RefRows&amp;<sp/>rownrs,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Slicer&amp;<sp/>arraySection,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Array&lt;T&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumnCells<sp/>(rownrs,<sp/>arraySection,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//#<sp/>This<sp/>is<sp/>a<sp/>very<sp/>simple<sp/>implementation.</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>However,<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>more<sp/>fancy,<sp/>since<sp/>an<sp/>array<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>is<sp/>already<sp/>much<sp/>more<sp/>expensive<sp/>than<sp/>the<sp/>virtual<sp/>function<sp/>calls</highlight></codeline>
<codeline><highlight class="normal">//#<sp/>involved<sp/>in<sp/>each<sp/>loop<sp/>iteration.</highlight></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::fillColumn<sp/>(const<sp/>Array&lt;T&gt;&amp;<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbFillColumn<sp/>(value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>ArrayColumn&lt;T&gt;::putColumn<sp/>(const<sp/>ArrayColumn&lt;T&gt;&amp;<sp/>that)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>acbPutColumn<sp/>(that);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="tables/Tables/ArrayColumn.tcc"/>
  </compounddef>
</doxygen>
