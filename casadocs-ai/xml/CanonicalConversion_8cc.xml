<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="CanonicalConversion_8cc" kind="file" language="C++">
    <compoundname>CanonicalConversion.cc</compoundname>
    <includes refid="CanonicalConversion_8h" local="no">casacore/casa/OS/CanonicalConversion.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="iostream_8h" local="no">casacore/casa/iostream.h</includes>
    <incdepgraph>
      <node id="4">
        <label>casacore/casa/aipsenv.h</label>
        <link refid="aipsenv_8h"/>
      </node>
      <node id="11">
        <label>assert.h</label>
      </node>
      <node id="12">
        <label>casacore/casa/iostream.h</label>
        <link refid="iostream_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>casa/OS/CanonicalConversion.cc</label>
        <link refid="CanonicalConversion_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>casacore/casa/aipstype.h</label>
        <link refid="aipstype_8h"/>
      </node>
      <node id="3">
        <label>casacore/casa/aips.h</label>
        <link refid="aips_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>casacore/casa/string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>casacore/casa/aipsdef.h</label>
        <link refid="aipsdef_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>casacore/casa/OS/Conversion.h</label>
        <link refid="Conversion_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>casacore/casa/OS/CanonicalConversion.h</label>
        <link refid="CanonicalConversion_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>casacore/casa/aipsxtype.h</label>
        <link refid="aipsxtype_8h"/>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="CanonicalConversion_8cc_1a502c088e76c0f72565b5110ff10a4ea6" prot="public" static="no">
        <name>CANONICALCONVERSION_DO</name>
        <param><defname>CONVERT</defname></param>
        <param><defname>SIZE</defname></param>
        <param><defname>TOLOCAL</defname></param>
        <param><defname>FROMLOCAL</defname></param>
        <param><defname>BYTETO</defname></param>
        <param><defname>BYTEFROM</defname></param>
        <param><defname>T</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="casa/OS/CanonicalConversion.cc" line="128" column="9" bodyfile="casa/OS/CanonicalConversion.cc" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#<sp/>CanonicalConversion.cc:<sp/>A<sp/>class<sp/>with<sp/>static<sp/>functions<sp/>to<sp/>convert<sp/>canonical<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Copyright<sp/>(C)<sp/>1996,2000,2001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Associated<sp/>Universities,<sp/>Inc.<sp/>Washington<sp/>DC,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Inc.,<sp/>675<sp/>Massachusetts<sp/>Ave,<sp/>Cambridge,<sp/>MA<sp/>02139,<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>Correspondence<sp/>concerning<sp/>AIPS++<sp/>should<sp/>be<sp/>addressed<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internet<sp/>email:<sp/>casa-feedback@nrao.edu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Postal<sp/>address:<sp/>AIPS++<sp/>Project<sp/>Office</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>National<sp/>Radio<sp/>Astronomy<sp/>Observatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>520<sp/>Edgemont<sp/>Road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Charlottesville,<sp/>VA<sp/>22903-2475<sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CanonicalConversion_8h" kindref="compound">casacore/casa/OS/CanonicalConversion.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="iostream_8h" kindref="compound">casacore/casa/iostream.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecasacore" kindref="compound">casacore</ref><sp/>{<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>BEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1CanonicalConversion_1a869be7996670ec44180ab846b4bb2679" kindref="member">CanonicalConversion::toLocalChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr<sp/>*<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1CanonicalConversion_1a7e6b31e56f417774b739c701cdb4e0f7" kindref="member">CanonicalConversion::fromLocalChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nr);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr<sp/>*<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1ac048e984a9cd529046f62d1976fe82d3" kindref="member">CanonicalConversion::byteToLocalChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nrbytes)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nrbytes);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1add520432be3eb073c4b7d2af199566f5" kindref="member">CanonicalConversion::byteFromLocalChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nrbytes)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nrbytes);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="classcasacore_1_1Conversion_1aa12d3b89ed6c2739441c831f582505de" kindref="member">Conversion::ByteFunction</ref>*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1a49cdbfb26d8d2d7edca949cae785d6ea" kindref="member">CanonicalConversion::getByteToLocal</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1Conversion_1ae33088f8f267b637161fe7506cdf231e" kindref="member">Conversion::getmemcpy</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="classcasacore_1_1Conversion_1aa12d3b89ed6c2739441c831f582505de" kindref="member">Conversion::ByteFunction</ref>*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1a5fbe2f22cea57d346a3b5b85f0f77e3d" kindref="member">CanonicalConversion::getByteFromLocal</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a308aa32c115f0550a13ccf0f1c4696a7" kindref="member">SIZE_CAN_CHAR</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1Conversion_1ae33088f8f267b637161fe7506cdf231e" kindref="member">Conversion::getmemcpy</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1CanonicalConversion_1a9487f73c675c71fe8b09fd6db1cf972a" kindref="member">CanonicalConversion::toLocalUChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nr);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr<sp/>*<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1CanonicalConversion_1a3a2faca4b650321bf213f1e90e15b94d" kindref="member">CanonicalConversion::fromLocalUChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nr);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nr<sp/>*<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1ade3687d11dcd7bdc4e6d0ce37bf70f84" kindref="member">CanonicalConversion::byteToLocalUChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nrbytes)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nrbytes);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1ae08be9e9be4d75706ddee26d44d6142f" kindref="member">CanonicalConversion::byteFromLocalUChar</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nrbytes)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nrbytes);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="classcasacore_1_1Conversion_1aa12d3b89ed6c2739441c831f582505de" kindref="member">Conversion::ByteFunction</ref>*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1a49cdbfb26d8d2d7edca949cae785d6ea" kindref="member">CanonicalConversion::getByteToLocal</ref></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1Conversion_1ae33088f8f267b637161fe7506cdf231e" kindref="member">Conversion::getmemcpy</ref>();</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="classcasacore_1_1Conversion_1aa12d3b89ed6c2739441c831f582505de" kindref="member">Conversion::ByteFunction</ref>*<sp/><ref refid="classcasacore_1_1CanonicalConversion_1a5fbe2f22cea57d346a3b5b85f0f77e3d" kindref="member">CanonicalConversion::getByteFromLocal</ref></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="malloc_8cc_1af576bf8ffa22a44e53018c67095ffbf0" kindref="member">assert</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="CanonicalConversion_8h_1a8849f99511b4e6774e795116366cdf0c" kindref="member">SIZE_CAN_UCHAR</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcasacore_1_1Conversion_1ae33088f8f267b637161fe7506cdf231e" kindref="member">Conversion::getmemcpy</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANONICALCONVERSION_DO(CONVERT,SIZE,TOLOCAL,FROMLOCAL,BYTETO,BYTEFROM,T)<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor">size_t<sp/>CanonicalConversion::TOLOCAL<sp/>(void*<sp/>to,<sp/>const<sp/>void*<sp/>from,<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nr)<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>memcpy<sp/>if<sp/>no<sp/>conversion<sp/>is<sp/>needed.<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(CONVERT<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/>assert<sp/>(sizeof(T)<sp/>==<sp/>SIZE);<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nr*SIZE);<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}else{<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/>const<sp/>char*<sp/>data<sp/>=<sp/>(const<sp/>char*)from;<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>dest<sp/>=<sp/>(T*)to;<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/>T*<sp/>last<sp/>=<sp/>dest<sp/>+<sp/>nr;<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/>while<sp/>(dest<sp/>&lt;<sp/>last)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>toLocal<sp/>(*dest++,<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>SIZE;<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>nr*SIZE;<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor">size_t<sp/>CanonicalConversion::FROMLOCAL<sp/>(void*<sp/>to,<sp/>const<sp/>void*<sp/>from,<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nr)<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>memcpy<sp/>if<sp/>no<sp/>conversion<sp/>is<sp/>needed.<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(CONVERT<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/>assert<sp/>(sizeof(T)<sp/>==<sp/>SIZE);<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/>memcpy<sp/>(to,<sp/>from,<sp/>nr*SIZE);<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}else{<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/>char*<sp/>data<sp/>=<sp/>(char*)to;<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/>const<sp/>T*<sp/>src<sp/>=<sp/>(const<sp/>T*)from;<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/>const<sp/>T*<sp/>last<sp/>=<sp/>src<sp/>+<sp/>nr;<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/>while<sp/>(src<sp/>&lt;<sp/>last)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fromLocal<sp/>(data,<sp/>*src++);<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>SIZE;<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>nr*SIZE;<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor">void*<sp/>CanonicalConversion::BYTETO<sp/>(void*<sp/>to,<sp/>const<sp/>void*<sp/>from,<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nrbytes)<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TOLOCAL<sp/>(to,<sp/>from,<sp/>nrbytes<sp/>/<sp/>sizeof(T));<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>to;<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor">void*<sp/>CanonicalConversion::BYTEFROM<sp/>(void*<sp/>to,<sp/>const<sp/>void*<sp/>from,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>nrbytes)<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FROMLOCAL<sp/>(to,<sp/>from,<sp/>nrbytes<sp/>/<sp/>sizeof(T));<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>to;<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor">Conversion::ByteFunction*<sp/>CanonicalConversion::getByteToLocal<sp/>(const<sp/>T*)<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(CONVERT<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/>assert<sp/>(sizeof(T)<sp/>==<sp/>SIZE);<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Conversion::getmemcpy();<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>BYTETO;<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor">Conversion::ByteFunction*<sp/>CanonicalConversion::getByteFromLocal<sp/>(const<sp/>T*)<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(CONVERT<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/>assert<sp/>(sizeof(T)<sp/>==<sp/>SIZE);<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Conversion::getmemcpy();<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>BYTEFROM;<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1a4a06b22262884b0d4d61b16d85ca63fe" kindref="member">CONVERT_CAN_SHORT</ref>,<sp/><sp/><ref refid="CanonicalConversion_8h_1a99390a54c8c285ac11df4aeecd5ff529" kindref="member">SIZE_CAN_SHORT</ref>,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toLocalShort,<sp/><sp/>fromLocalShort,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byteToLocalShort,<sp/><sp/>byteFromLocalShort,<sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1a994143044e597550ccc2a8eb2da99789" kindref="member">CONVERT_CAN_USHORT</ref>,<sp/><ref refid="namespacecasacore_1a78df098f1bf840340b9d8e835ce83500" kindref="member">SIZE_CAN_USHORT</ref>,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1af89a662d370cc1d12fe1acab9185db95" kindref="member">toLocalUShort</ref>,<sp/><ref refid="namespacecasacore_1a2934a2b45786ea0c9ebe96aaa0589e30" kindref="member">fromLocalUShort</ref>,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a361622e2caeefe940fa589e7cfcbbaf5" kindref="member">byteToLocalUShort</ref>,<sp/><ref refid="namespacecasacore_1acfa7a309383d353c60db6c7f408f0852" kindref="member">byteFromLocalUShort</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1a61c53eca3434c746f90458786d7aae07" kindref="member">CONVERT_CAN_INT</ref>,<sp/><sp/><sp/><sp/><ref refid="CanonicalConversion_8h_1a65fd562aaaa8a4850bd995d31069af5d" kindref="member">SIZE_CAN_INT</ref>,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toLocalInt,<sp/><sp/><sp/><sp/>fromLocalInt,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byteToLocalInt,<sp/><sp/><sp/><sp/>byteFromLocalInt,<sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1aa7a1f026c4916588a9f6096ea56d9947" kindref="member">CONVERT_CAN_UINT</ref>,<sp/><sp/><sp/><ref refid="namespacecasacore_1a7003b50b3aeddb283225f5e290878e6a" kindref="member">SIZE_CAN_UINT</ref>,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a061bbd628ea80bb50b7fe8896b22742c" kindref="member">toLocalUInt</ref>,<sp/><sp/><sp/><ref refid="namespacecasacore_1a58a0e7068626f8abc9c3c85a5aaa59de" kindref="member">fromLocalUInt</ref>,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a1375673efd4972aa385641c8686bf479" kindref="member">byteToLocalUInt</ref>,<sp/><sp/><sp/><ref refid="namespacecasacore_1af216081decfd2e331bfbae75de2550b5" kindref="member">byteFromLocalUInt</ref>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1ad39d2b96491b3f167740912e5015ae38" kindref="member">CONVERT_CAN_INT64</ref>,<sp/><sp/><ref refid="CanonicalConversion_8h_1a0756b5b7e4ef42a04b30afffa6b3a177" kindref="member">SIZE_CAN_INT64</ref>,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toLocalInt64,<sp/><sp/>fromLocalInt64,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byteToLocalInt64,<sp/><sp/>byteFromLocalInt64,<sp/><sp/><ref refid="namespacecasacore_1a79c2dfec4363785472512dbf384675a1" kindref="member">Int64</ref>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1aee57f0d3d10a8a11d0ad6e00b846f496" kindref="member">CONVERT_CAN_UINT64</ref>,<sp/><ref refid="namespacecasacore_1a482f953ee5ca1a2176377d1a3727f7e6" kindref="member">SIZE_CAN_UINT64</ref>,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a56820cd9cfb578a5c179e8d5a66273ba" kindref="member">toLocalUInt64</ref>,<sp/><ref refid="namespacecasacore_1a470b3da32780613630848f2d49ce9ce0" kindref="member">fromLocalUInt64</ref>,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1aedabf746152f57aa70529a50989eef8e" kindref="member">byteToLocalUInt64</ref>,<sp/><ref refid="namespacecasacore_1a266daae662bc22f4944cdf636778d20a" kindref="member">byteFromLocalUInt64</ref>,<sp/><ref refid="namespacecasacore_1afbaa0f0eab7b3a56a4c320715f577d4f" kindref="member">uInt64</ref>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1a8a77e777d5712ef104abef7be8a6c01a" kindref="member">CONVERT_CAN_FLOAT</ref>,<sp/><sp/><ref refid="CanonicalConversion_8h_1acbf4e9ce7c728a759bcc29282e676dda" kindref="member">SIZE_CAN_FLOAT</ref>,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toLocalFloat,<sp/><sp/>fromLocalFloat,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byteToLocalFloat,<sp/><sp/>byteFromLocalFloat,<sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="namespacecasacore_1a42ecbb5b94e1afd39f8e8d15636a18dd" kindref="member">CANONICALCONVERSION_DO</ref><sp/>(<ref refid="CanonicalConversion_8h_1a39636a954794394a95fbe5d2ffc79802" kindref="member">CONVERT_CAN_DOUBLE</ref>,<sp/><ref refid="namespacecasacore_1aa21e513e1ff000552a3db947cc1ea078" kindref="member">SIZE_CAN_DOUBLE</ref>,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1a1ebecf9dcc711de2db35544e2a939014" kindref="member">toLocalDouble</ref>,<sp/><ref refid="namespacecasacore_1a3d9f836f4ce1632ccc5bcb3501ee4a04" kindref="member">fromLocalDouble</ref>,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecasacore_1ac1db98b6a79d1450f59ba2480908977c" kindref="member">byteToLocalDouble</ref>,<sp/><ref refid="namespacecasacore_1a51ac316ab7e93c8e12e8ca9083cd5e4b" kindref="member">byteFromLocalDouble</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">}<sp/></highlight><highlight class="comment">//#<sp/>NAMESPACE<sp/>CASACORE<sp/>-<sp/>END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="casa/OS/CanonicalConversion.cc"/>
  </compounddef>
</doxygen>
